// Package entitleOpenApiV3 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerScopes = "bearer.Scopes"
)

// Defines values for AccessReviewAuditLogResponseSchemaType.
const (
	AccessReviewAuditLogResponseSchemaTypeAccessReviewActivated                                      AccessReviewAuditLogResponseSchemaType = "accessReview.activated"
	AccessReviewAuditLogResponseSchemaTypeAccessReviewCreated                                        AccessReviewAuditLogResponseSchemaType = "accessReview.created"
	AccessReviewAuditLogResponseSchemaTypeAccessReviewDeleted                                        AccessReviewAuditLogResponseSchemaType = "accessReview.deleted"
	AccessReviewAuditLogResponseSchemaTypeAccessReviewDone                                           AccessReviewAuditLogResponseSchemaType = "accessReview.done"
	AccessReviewAuditLogResponseSchemaTypeAccessReviewUpdated                                        AccessReviewAuditLogResponseSchemaType = "accessReview.updated"
	AccessReviewAuditLogResponseSchemaTypeApprovalAlgorithmCreated                                   AccessReviewAuditLogResponseSchemaType = "approvalAlgorithm.created"
	AccessReviewAuditLogResponseSchemaTypeApprovalAlgorithmDeleted                                   AccessReviewAuditLogResponseSchemaType = "approvalAlgorithm.deleted"
	AccessReviewAuditLogResponseSchemaTypeApprovalAlgorithmUpdated                                   AccessReviewAuditLogResponseSchemaType = "approvalAlgorithm.updated"
	AccessReviewAuditLogResponseSchemaTypeBundleCreated                                              AccessReviewAuditLogResponseSchemaType = "bundle.created"
	AccessReviewAuditLogResponseSchemaTypeBundleDeleted                                              AccessReviewAuditLogResponseSchemaType = "bundle.deleted"
	AccessReviewAuditLogResponseSchemaTypeBundleUpdated                                              AccessReviewAuditLogResponseSchemaType = "bundle.updated"
	AccessReviewAuditLogResponseSchemaTypeCompanyFailedSyncDirectoriesGroups                         AccessReviewAuditLogResponseSchemaType = "company.failed.sync.directories.groups"
	AccessReviewAuditLogResponseSchemaTypeCompanyFailedSyncDirectoriesUsers                          AccessReviewAuditLogResponseSchemaType = "company.failed.sync.directories.users"
	AccessReviewAuditLogResponseSchemaTypeCompanyFailedSyncHrDirectManagers                          AccessReviewAuditLogResponseSchemaType = "company.failed.sync.hr.directManagers"
	AccessReviewAuditLogResponseSchemaTypeCompanyPolicyPermissionsUpdated                            AccessReviewAuditLogResponseSchemaType = "company.policy.permissions.updated"
	AccessReviewAuditLogResponseSchemaTypeCompanyPolicyUserMissingActors                             AccessReviewAuditLogResponseSchemaType = "company.policy.user.missingActors"
	AccessReviewAuditLogResponseSchemaTypeCompanySyncDirectoriesGroups                               AccessReviewAuditLogResponseSchemaType = "company.sync.directories.groups"
	AccessReviewAuditLogResponseSchemaTypeCompanySyncDirectoriesUsers                                AccessReviewAuditLogResponseSchemaType = "company.sync.directories.users"
	AccessReviewAuditLogResponseSchemaTypeCompanySyncHrDirectManagers                                AccessReviewAuditLogResponseSchemaType = "company.sync.hr.directManagers"
	AccessReviewAuditLogResponseSchemaTypeIntegrationCreated                                         AccessReviewAuditLogResponseSchemaType = "integration.created"
	AccessReviewAuditLogResponseSchemaTypeIntegrationDeleted                                         AccessReviewAuditLogResponseSchemaType = "integration.deleted"
	AccessReviewAuditLogResponseSchemaTypeIntegrationFailedAccessGive                                AccessReviewAuditLogResponseSchemaType = "integration.failed.access.give"
	AccessReviewAuditLogResponseSchemaTypeIntegrationFailedAccessRevoke                              AccessReviewAuditLogResponseSchemaType = "integration.failed.access.revoke"
	AccessReviewAuditLogResponseSchemaTypeIntegrationFailedSyncActors                                AccessReviewAuditLogResponseSchemaType = "integration.failed.sync.actors"
	AccessReviewAuditLogResponseSchemaTypeIntegrationFailedSyncAssets                                AccessReviewAuditLogResponseSchemaType = "integration.failed.sync.assets"
	AccessReviewAuditLogResponseSchemaTypeIntegrationFailedSyncPermissions                           AccessReviewAuditLogResponseSchemaType = "integration.failed.sync.permissions"
	AccessReviewAuditLogResponseSchemaTypeIntegrationResourceCreatedManually                         AccessReviewAuditLogResponseSchemaType = "integrationResource.created.manually"
	AccessReviewAuditLogResponseSchemaTypeIntegrationResourceDeletedManually                         AccessReviewAuditLogResponseSchemaType = "integrationResource.deleted.manually"
	AccessReviewAuditLogResponseSchemaTypeIntegrationResourceRoleCreatedManually                     AccessReviewAuditLogResponseSchemaType = "integrationResourceRole.created.manually"
	AccessReviewAuditLogResponseSchemaTypeIntegrationResourceRoleDeletedManually                     AccessReviewAuditLogResponseSchemaType = "integrationResourceRole.deleted.manually"
	AccessReviewAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedAllowedDurations             AccessReviewAuditLogResponseSchemaType = "integrationResourceRole.updated.allowedDurations"
	AccessReviewAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedAllowsRequests               AccessReviewAuditLogResponseSchemaType = "integrationResourceRole.updated.allowsRequests"
	AccessReviewAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedApprovalAlgorithm            AccessReviewAuditLogResponseSchemaType = "integrationResourceRole.updated.approvalAlgorithm"
	AccessReviewAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedName                         AccessReviewAuditLogResponseSchemaType = "integrationResourceRole.updated.name"
	AccessReviewAuditLogResponseSchemaTypeIntegrationResourceUpdatedAllowedDurations                 AccessReviewAuditLogResponseSchemaType = "integrationResource.updated.allowedDurations"
	AccessReviewAuditLogResponseSchemaTypeIntegrationResourceUpdatedAllowsRequests                   AccessReviewAuditLogResponseSchemaType = "integrationResource.updated.allowsRequests"
	AccessReviewAuditLogResponseSchemaTypeIntegrationResourceUpdatedApprovalAlgorithm                AccessReviewAuditLogResponseSchemaType = "integrationResource.updated.approvalAlgorithm"
	AccessReviewAuditLogResponseSchemaTypeIntegrationResourceUpdatedMaintainers                      AccessReviewAuditLogResponseSchemaType = "integrationResource.updated.maintainers"
	AccessReviewAuditLogResponseSchemaTypeIntegrationResourceUpdatedName                             AccessReviewAuditLogResponseSchemaType = "integrationResource.updated.name"
	AccessReviewAuditLogResponseSchemaTypeIntegrationResourceUpdatedOwner                            AccessReviewAuditLogResponseSchemaType = "integrationResource.updated.owner"
	AccessReviewAuditLogResponseSchemaTypeIntegrationResourceUpdatedUserDefinedDescription           AccessReviewAuditLogResponseSchemaType = "integrationResource.updated.userDefinedDescription"
	AccessReviewAuditLogResponseSchemaTypeIntegrationResourceUpdatedUserDefinedTags                  AccessReviewAuditLogResponseSchemaType = "integrationResource.updated.userDefinedTags"
	AccessReviewAuditLogResponseSchemaTypeIntegrationSyncActors                                      AccessReviewAuditLogResponseSchemaType = "integration.sync.actors"
	AccessReviewAuditLogResponseSchemaTypeIntegrationSyncAssets                                      AccessReviewAuditLogResponseSchemaType = "integration.sync.assets"
	AccessReviewAuditLogResponseSchemaTypeIntegrationSyncPermissions                                 AccessReviewAuditLogResponseSchemaType = "integration.sync.permissions"
	AccessReviewAuditLogResponseSchemaTypeIntegrationUpdatedAllowedDurations                         AccessReviewAuditLogResponseSchemaType = "integration.updated.allowedDurations"
	AccessReviewAuditLogResponseSchemaTypeIntegrationUpdatedAllowsRequests                           AccessReviewAuditLogResponseSchemaType = "integration.updated.allowsRequests"
	AccessReviewAuditLogResponseSchemaTypeIntegrationUpdatedApprovalAlgorithm                        AccessReviewAuditLogResponseSchemaType = "integration.updated.approvalAlgorithm"
	AccessReviewAuditLogResponseSchemaTypeIntegrationUpdatedAutoAssignRecommendedResourceMaintainers AccessReviewAuditLogResponseSchemaType = "integration.updated.autoAssignRecommendedResourceMaintainers"
	AccessReviewAuditLogResponseSchemaTypeIntegrationUpdatedAutoAssignRecommendedResourceOwner       AccessReviewAuditLogResponseSchemaType = "integration.updated.autoAssignRecommendedResourceOwner"
	AccessReviewAuditLogResponseSchemaTypeIntegrationUpdatedCanCreateActors                          AccessReviewAuditLogResponseSchemaType = "integration.updated.canCreateActors"
	AccessReviewAuditLogResponseSchemaTypeIntegrationUpdatedCanEditPermissions                       AccessReviewAuditLogResponseSchemaType = "integration.updated.canEditPermissions"
	AccessReviewAuditLogResponseSchemaTypeIntegrationUpdatedConfiguration                            AccessReviewAuditLogResponseSchemaType = "integration.updated.configuration"
	AccessReviewAuditLogResponseSchemaTypeIntegrationUpdatedDefaultAllowsRequests                    AccessReviewAuditLogResponseSchemaType = "integration.updated.defaultAllowsRequests"
	AccessReviewAuditLogResponseSchemaTypeIntegrationUpdatedIsVirtual                                AccessReviewAuditLogResponseSchemaType = "integration.updated.isVirtual"
	AccessReviewAuditLogResponseSchemaTypeIntegrationUpdatedMaintainers                              AccessReviewAuditLogResponseSchemaType = "integration.updated.maintainers"
	AccessReviewAuditLogResponseSchemaTypeIntegrationUpdatedName                                     AccessReviewAuditLogResponseSchemaType = "integration.updated.name"
	AccessReviewAuditLogResponseSchemaTypeIntegrationUpdatedNotifyAboutExternalPermissions           AccessReviewAuditLogResponseSchemaType = "integration.updated.notifyAboutExternalPermissions"
	AccessReviewAuditLogResponseSchemaTypeIntegrationUpdatedOwner                                    AccessReviewAuditLogResponseSchemaType = "integration.updated.owner"
	AccessReviewAuditLogResponseSchemaTypeIntegrationUpdatedReadonly                                 AccessReviewAuditLogResponseSchemaType = "integration.updated.readonly"
	AccessReviewAuditLogResponseSchemaTypeIntegrationUpdatedRestoreImage                             AccessReviewAuditLogResponseSchemaType = "integration.updated.restoreImage"
	AccessReviewAuditLogResponseSchemaTypePolicyCreated                                              AccessReviewAuditLogResponseSchemaType = "policy.created"
	AccessReviewAuditLogResponseSchemaTypePolicyDeleted                                              AccessReviewAuditLogResponseSchemaType = "policy.deleted"
	AccessReviewAuditLogResponseSchemaTypePolicyUpdatedData                                          AccessReviewAuditLogResponseSchemaType = "policy.updated.data"
	AccessReviewAuditLogResponseSchemaTypePolicyUpdatedSortOrder                                     AccessReviewAuditLogResponseSchemaType = "policy.updated.sortOrder"
	AccessReviewAuditLogResponseSchemaTypeTicketAutomaticApproval                                    AccessReviewAuditLogResponseSchemaType = "ticket.automaticApproval"
	AccessReviewAuditLogResponseSchemaTypeTicketCreated                                              AccessReviewAuditLogResponseSchemaType = "ticket.created"
	AccessReviewAuditLogResponseSchemaTypeTicketDeleted                                              AccessReviewAuditLogResponseSchemaType = "ticket.deleted"
	AccessReviewAuditLogResponseSchemaTypeTicketFailedGrant                                          AccessReviewAuditLogResponseSchemaType = "ticket.failed.grant"
	AccessReviewAuditLogResponseSchemaTypeTicketFailedRevoke                                         AccessReviewAuditLogResponseSchemaType = "ticket.failed.revoke"
	AccessReviewAuditLogResponseSchemaTypeTicketFinalApproved                                        AccessReviewAuditLogResponseSchemaType = "ticket.finalApproved"
	AccessReviewAuditLogResponseSchemaTypeTicketGranted                                              AccessReviewAuditLogResponseSchemaType = "ticket.granted"
	AccessReviewAuditLogResponseSchemaTypeTicketPassedStage                                          AccessReviewAuditLogResponseSchemaType = "ticket.passedStage"
	AccessReviewAuditLogResponseSchemaTypeTicketPermissionAlreadyExist                               AccessReviewAuditLogResponseSchemaType = "ticket.permissionAlreadyExist"
	AccessReviewAuditLogResponseSchemaTypeTicketPermissionReverted                                   AccessReviewAuditLogResponseSchemaType = "ticket.permissionReverted"
	AccessReviewAuditLogResponseSchemaTypeTicketPermissionWontRevoke                                 AccessReviewAuditLogResponseSchemaType = "ticket.permissionWontRevoke"
	AccessReviewAuditLogResponseSchemaTypeTicketRedirectEmptyGroup                                   AccessReviewAuditLogResponseSchemaType = "ticket.redirect.emptyGroup"
	AccessReviewAuditLogResponseSchemaTypeTicketRedirectForward                                      AccessReviewAuditLogResponseSchemaType = "ticket.redirect.forward"
	AccessReviewAuditLogResponseSchemaTypeTicketRedirectNoManagers                                   AccessReviewAuditLogResponseSchemaType = "ticket.redirect.noManagers"
	AccessReviewAuditLogResponseSchemaTypeTicketRedirectNoTeamMembers                                AccessReviewAuditLogResponseSchemaType = "ticket.redirect.noTeamMembers"
	AccessReviewAuditLogResponseSchemaTypeTicketRedirectToUser                                       AccessReviewAuditLogResponseSchemaType = "ticket.redirect.toUser"
	AccessReviewAuditLogResponseSchemaTypeTicketRetryGrant                                           AccessReviewAuditLogResponseSchemaType = "ticket.retry.grant"
	AccessReviewAuditLogResponseSchemaTypeTicketRetryRevoke                                          AccessReviewAuditLogResponseSchemaType = "ticket.retry.revoke"
	AccessReviewAuditLogResponseSchemaTypeTicketRevoked                                              AccessReviewAuditLogResponseSchemaType = "ticket.revoked"
	AccessReviewAuditLogResponseSchemaTypeTicketSentGrant                                            AccessReviewAuditLogResponseSchemaType = "ticket.sent.grant"
	AccessReviewAuditLogResponseSchemaTypeTicketSentRevert                                           AccessReviewAuditLogResponseSchemaType = "ticket.sent.revert"
	AccessReviewAuditLogResponseSchemaTypeTicketSentRevoke                                           AccessReviewAuditLogResponseSchemaType = "ticket.sent.revoke"
	AccessReviewAuditLogResponseSchemaTypeTicketStatusChanged                                        AccessReviewAuditLogResponseSchemaType = "ticket.statusChanged"
	AccessReviewAuditLogResponseSchemaTypeTicketTaskCreated                                          AccessReviewAuditLogResponseSchemaType = "ticket.taskCreated"
	AccessReviewAuditLogResponseSchemaTypeTicketUserApproved                                         AccessReviewAuditLogResponseSchemaType = "ticket.userApproved"
	AccessReviewAuditLogResponseSchemaTypeTicketUserDeclined                                         AccessReviewAuditLogResponseSchemaType = "ticket.userDeclined"
)

// Defines values for ApprovalAlgorithmAuditLogResponseSchemaType.
const (
	ApprovalAlgorithmAuditLogResponseSchemaTypeAccessReviewActivated                                      ApprovalAlgorithmAuditLogResponseSchemaType = "accessReview.activated"
	ApprovalAlgorithmAuditLogResponseSchemaTypeAccessReviewCreated                                        ApprovalAlgorithmAuditLogResponseSchemaType = "accessReview.created"
	ApprovalAlgorithmAuditLogResponseSchemaTypeAccessReviewDeleted                                        ApprovalAlgorithmAuditLogResponseSchemaType = "accessReview.deleted"
	ApprovalAlgorithmAuditLogResponseSchemaTypeAccessReviewDone                                           ApprovalAlgorithmAuditLogResponseSchemaType = "accessReview.done"
	ApprovalAlgorithmAuditLogResponseSchemaTypeAccessReviewUpdated                                        ApprovalAlgorithmAuditLogResponseSchemaType = "accessReview.updated"
	ApprovalAlgorithmAuditLogResponseSchemaTypeApprovalAlgorithmCreated                                   ApprovalAlgorithmAuditLogResponseSchemaType = "approvalAlgorithm.created"
	ApprovalAlgorithmAuditLogResponseSchemaTypeApprovalAlgorithmDeleted                                   ApprovalAlgorithmAuditLogResponseSchemaType = "approvalAlgorithm.deleted"
	ApprovalAlgorithmAuditLogResponseSchemaTypeApprovalAlgorithmUpdated                                   ApprovalAlgorithmAuditLogResponseSchemaType = "approvalAlgorithm.updated"
	ApprovalAlgorithmAuditLogResponseSchemaTypeBundleCreated                                              ApprovalAlgorithmAuditLogResponseSchemaType = "bundle.created"
	ApprovalAlgorithmAuditLogResponseSchemaTypeBundleDeleted                                              ApprovalAlgorithmAuditLogResponseSchemaType = "bundle.deleted"
	ApprovalAlgorithmAuditLogResponseSchemaTypeBundleUpdated                                              ApprovalAlgorithmAuditLogResponseSchemaType = "bundle.updated"
	ApprovalAlgorithmAuditLogResponseSchemaTypeCompanyFailedSyncDirectoriesGroups                         ApprovalAlgorithmAuditLogResponseSchemaType = "company.failed.sync.directories.groups"
	ApprovalAlgorithmAuditLogResponseSchemaTypeCompanyFailedSyncDirectoriesUsers                          ApprovalAlgorithmAuditLogResponseSchemaType = "company.failed.sync.directories.users"
	ApprovalAlgorithmAuditLogResponseSchemaTypeCompanyFailedSyncHrDirectManagers                          ApprovalAlgorithmAuditLogResponseSchemaType = "company.failed.sync.hr.directManagers"
	ApprovalAlgorithmAuditLogResponseSchemaTypeCompanyPolicyPermissionsUpdated                            ApprovalAlgorithmAuditLogResponseSchemaType = "company.policy.permissions.updated"
	ApprovalAlgorithmAuditLogResponseSchemaTypeCompanyPolicyUserMissingActors                             ApprovalAlgorithmAuditLogResponseSchemaType = "company.policy.user.missingActors"
	ApprovalAlgorithmAuditLogResponseSchemaTypeCompanySyncDirectoriesGroups                               ApprovalAlgorithmAuditLogResponseSchemaType = "company.sync.directories.groups"
	ApprovalAlgorithmAuditLogResponseSchemaTypeCompanySyncDirectoriesUsers                                ApprovalAlgorithmAuditLogResponseSchemaType = "company.sync.directories.users"
	ApprovalAlgorithmAuditLogResponseSchemaTypeCompanySyncHrDirectManagers                                ApprovalAlgorithmAuditLogResponseSchemaType = "company.sync.hr.directManagers"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationCreated                                         ApprovalAlgorithmAuditLogResponseSchemaType = "integration.created"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationDeleted                                         ApprovalAlgorithmAuditLogResponseSchemaType = "integration.deleted"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationFailedAccessGive                                ApprovalAlgorithmAuditLogResponseSchemaType = "integration.failed.access.give"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationFailedAccessRevoke                              ApprovalAlgorithmAuditLogResponseSchemaType = "integration.failed.access.revoke"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationFailedSyncActors                                ApprovalAlgorithmAuditLogResponseSchemaType = "integration.failed.sync.actors"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationFailedSyncAssets                                ApprovalAlgorithmAuditLogResponseSchemaType = "integration.failed.sync.assets"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationFailedSyncPermissions                           ApprovalAlgorithmAuditLogResponseSchemaType = "integration.failed.sync.permissions"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationResourceCreatedManually                         ApprovalAlgorithmAuditLogResponseSchemaType = "integrationResource.created.manually"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationResourceDeletedManually                         ApprovalAlgorithmAuditLogResponseSchemaType = "integrationResource.deleted.manually"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationResourceRoleCreatedManually                     ApprovalAlgorithmAuditLogResponseSchemaType = "integrationResourceRole.created.manually"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationResourceRoleDeletedManually                     ApprovalAlgorithmAuditLogResponseSchemaType = "integrationResourceRole.deleted.manually"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedAllowedDurations             ApprovalAlgorithmAuditLogResponseSchemaType = "integrationResourceRole.updated.allowedDurations"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedAllowsRequests               ApprovalAlgorithmAuditLogResponseSchemaType = "integrationResourceRole.updated.allowsRequests"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedApprovalAlgorithm            ApprovalAlgorithmAuditLogResponseSchemaType = "integrationResourceRole.updated.approvalAlgorithm"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedName                         ApprovalAlgorithmAuditLogResponseSchemaType = "integrationResourceRole.updated.name"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationResourceUpdatedAllowedDurations                 ApprovalAlgorithmAuditLogResponseSchemaType = "integrationResource.updated.allowedDurations"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationResourceUpdatedAllowsRequests                   ApprovalAlgorithmAuditLogResponseSchemaType = "integrationResource.updated.allowsRequests"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationResourceUpdatedApprovalAlgorithm                ApprovalAlgorithmAuditLogResponseSchemaType = "integrationResource.updated.approvalAlgorithm"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationResourceUpdatedMaintainers                      ApprovalAlgorithmAuditLogResponseSchemaType = "integrationResource.updated.maintainers"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationResourceUpdatedName                             ApprovalAlgorithmAuditLogResponseSchemaType = "integrationResource.updated.name"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationResourceUpdatedOwner                            ApprovalAlgorithmAuditLogResponseSchemaType = "integrationResource.updated.owner"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationResourceUpdatedUserDefinedDescription           ApprovalAlgorithmAuditLogResponseSchemaType = "integrationResource.updated.userDefinedDescription"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationResourceUpdatedUserDefinedTags                  ApprovalAlgorithmAuditLogResponseSchemaType = "integrationResource.updated.userDefinedTags"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationSyncActors                                      ApprovalAlgorithmAuditLogResponseSchemaType = "integration.sync.actors"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationSyncAssets                                      ApprovalAlgorithmAuditLogResponseSchemaType = "integration.sync.assets"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationSyncPermissions                                 ApprovalAlgorithmAuditLogResponseSchemaType = "integration.sync.permissions"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationUpdatedAllowedDurations                         ApprovalAlgorithmAuditLogResponseSchemaType = "integration.updated.allowedDurations"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationUpdatedAllowsRequests                           ApprovalAlgorithmAuditLogResponseSchemaType = "integration.updated.allowsRequests"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationUpdatedApprovalAlgorithm                        ApprovalAlgorithmAuditLogResponseSchemaType = "integration.updated.approvalAlgorithm"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationUpdatedAutoAssignRecommendedResourceMaintainers ApprovalAlgorithmAuditLogResponseSchemaType = "integration.updated.autoAssignRecommendedResourceMaintainers"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationUpdatedAutoAssignRecommendedResourceOwner       ApprovalAlgorithmAuditLogResponseSchemaType = "integration.updated.autoAssignRecommendedResourceOwner"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationUpdatedCanCreateActors                          ApprovalAlgorithmAuditLogResponseSchemaType = "integration.updated.canCreateActors"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationUpdatedCanEditPermissions                       ApprovalAlgorithmAuditLogResponseSchemaType = "integration.updated.canEditPermissions"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationUpdatedConfiguration                            ApprovalAlgorithmAuditLogResponseSchemaType = "integration.updated.configuration"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationUpdatedDefaultAllowsRequests                    ApprovalAlgorithmAuditLogResponseSchemaType = "integration.updated.defaultAllowsRequests"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationUpdatedIsVirtual                                ApprovalAlgorithmAuditLogResponseSchemaType = "integration.updated.isVirtual"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationUpdatedMaintainers                              ApprovalAlgorithmAuditLogResponseSchemaType = "integration.updated.maintainers"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationUpdatedName                                     ApprovalAlgorithmAuditLogResponseSchemaType = "integration.updated.name"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationUpdatedNotifyAboutExternalPermissions           ApprovalAlgorithmAuditLogResponseSchemaType = "integration.updated.notifyAboutExternalPermissions"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationUpdatedOwner                                    ApprovalAlgorithmAuditLogResponseSchemaType = "integration.updated.owner"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationUpdatedReadonly                                 ApprovalAlgorithmAuditLogResponseSchemaType = "integration.updated.readonly"
	ApprovalAlgorithmAuditLogResponseSchemaTypeIntegrationUpdatedRestoreImage                             ApprovalAlgorithmAuditLogResponseSchemaType = "integration.updated.restoreImage"
	ApprovalAlgorithmAuditLogResponseSchemaTypePolicyCreated                                              ApprovalAlgorithmAuditLogResponseSchemaType = "policy.created"
	ApprovalAlgorithmAuditLogResponseSchemaTypePolicyDeleted                                              ApprovalAlgorithmAuditLogResponseSchemaType = "policy.deleted"
	ApprovalAlgorithmAuditLogResponseSchemaTypePolicyUpdatedData                                          ApprovalAlgorithmAuditLogResponseSchemaType = "policy.updated.data"
	ApprovalAlgorithmAuditLogResponseSchemaTypePolicyUpdatedSortOrder                                     ApprovalAlgorithmAuditLogResponseSchemaType = "policy.updated.sortOrder"
	ApprovalAlgorithmAuditLogResponseSchemaTypeTicketAutomaticApproval                                    ApprovalAlgorithmAuditLogResponseSchemaType = "ticket.automaticApproval"
	ApprovalAlgorithmAuditLogResponseSchemaTypeTicketCreated                                              ApprovalAlgorithmAuditLogResponseSchemaType = "ticket.created"
	ApprovalAlgorithmAuditLogResponseSchemaTypeTicketDeleted                                              ApprovalAlgorithmAuditLogResponseSchemaType = "ticket.deleted"
	ApprovalAlgorithmAuditLogResponseSchemaTypeTicketFailedGrant                                          ApprovalAlgorithmAuditLogResponseSchemaType = "ticket.failed.grant"
	ApprovalAlgorithmAuditLogResponseSchemaTypeTicketFailedRevoke                                         ApprovalAlgorithmAuditLogResponseSchemaType = "ticket.failed.revoke"
	ApprovalAlgorithmAuditLogResponseSchemaTypeTicketFinalApproved                                        ApprovalAlgorithmAuditLogResponseSchemaType = "ticket.finalApproved"
	ApprovalAlgorithmAuditLogResponseSchemaTypeTicketGranted                                              ApprovalAlgorithmAuditLogResponseSchemaType = "ticket.granted"
	ApprovalAlgorithmAuditLogResponseSchemaTypeTicketPassedStage                                          ApprovalAlgorithmAuditLogResponseSchemaType = "ticket.passedStage"
	ApprovalAlgorithmAuditLogResponseSchemaTypeTicketPermissionAlreadyExist                               ApprovalAlgorithmAuditLogResponseSchemaType = "ticket.permissionAlreadyExist"
	ApprovalAlgorithmAuditLogResponseSchemaTypeTicketPermissionReverted                                   ApprovalAlgorithmAuditLogResponseSchemaType = "ticket.permissionReverted"
	ApprovalAlgorithmAuditLogResponseSchemaTypeTicketPermissionWontRevoke                                 ApprovalAlgorithmAuditLogResponseSchemaType = "ticket.permissionWontRevoke"
	ApprovalAlgorithmAuditLogResponseSchemaTypeTicketRedirectEmptyGroup                                   ApprovalAlgorithmAuditLogResponseSchemaType = "ticket.redirect.emptyGroup"
	ApprovalAlgorithmAuditLogResponseSchemaTypeTicketRedirectForward                                      ApprovalAlgorithmAuditLogResponseSchemaType = "ticket.redirect.forward"
	ApprovalAlgorithmAuditLogResponseSchemaTypeTicketRedirectNoManagers                                   ApprovalAlgorithmAuditLogResponseSchemaType = "ticket.redirect.noManagers"
	ApprovalAlgorithmAuditLogResponseSchemaTypeTicketRedirectNoTeamMembers                                ApprovalAlgorithmAuditLogResponseSchemaType = "ticket.redirect.noTeamMembers"
	ApprovalAlgorithmAuditLogResponseSchemaTypeTicketRedirectToUser                                       ApprovalAlgorithmAuditLogResponseSchemaType = "ticket.redirect.toUser"
	ApprovalAlgorithmAuditLogResponseSchemaTypeTicketRetryGrant                                           ApprovalAlgorithmAuditLogResponseSchemaType = "ticket.retry.grant"
	ApprovalAlgorithmAuditLogResponseSchemaTypeTicketRetryRevoke                                          ApprovalAlgorithmAuditLogResponseSchemaType = "ticket.retry.revoke"
	ApprovalAlgorithmAuditLogResponseSchemaTypeTicketRevoked                                              ApprovalAlgorithmAuditLogResponseSchemaType = "ticket.revoked"
	ApprovalAlgorithmAuditLogResponseSchemaTypeTicketSentGrant                                            ApprovalAlgorithmAuditLogResponseSchemaType = "ticket.sent.grant"
	ApprovalAlgorithmAuditLogResponseSchemaTypeTicketSentRevert                                           ApprovalAlgorithmAuditLogResponseSchemaType = "ticket.sent.revert"
	ApprovalAlgorithmAuditLogResponseSchemaTypeTicketSentRevoke                                           ApprovalAlgorithmAuditLogResponseSchemaType = "ticket.sent.revoke"
	ApprovalAlgorithmAuditLogResponseSchemaTypeTicketStatusChanged                                        ApprovalAlgorithmAuditLogResponseSchemaType = "ticket.statusChanged"
	ApprovalAlgorithmAuditLogResponseSchemaTypeTicketTaskCreated                                          ApprovalAlgorithmAuditLogResponseSchemaType = "ticket.taskCreated"
	ApprovalAlgorithmAuditLogResponseSchemaTypeTicketUserApproved                                         ApprovalAlgorithmAuditLogResponseSchemaType = "ticket.userApproved"
	ApprovalAlgorithmAuditLogResponseSchemaTypeTicketUserDeclined                                         ApprovalAlgorithmAuditLogResponseSchemaType = "ticket.userDeclined"
)

// Defines values for AuditLogBaseSchemaType.
const (
	AuditLogBaseSchemaTypeAccessReviewActivated                                      AuditLogBaseSchemaType = "accessReview.activated"
	AuditLogBaseSchemaTypeAccessReviewCreated                                        AuditLogBaseSchemaType = "accessReview.created"
	AuditLogBaseSchemaTypeAccessReviewDeleted                                        AuditLogBaseSchemaType = "accessReview.deleted"
	AuditLogBaseSchemaTypeAccessReviewDone                                           AuditLogBaseSchemaType = "accessReview.done"
	AuditLogBaseSchemaTypeAccessReviewUpdated                                        AuditLogBaseSchemaType = "accessReview.updated"
	AuditLogBaseSchemaTypeApprovalAlgorithmCreated                                   AuditLogBaseSchemaType = "approvalAlgorithm.created"
	AuditLogBaseSchemaTypeApprovalAlgorithmDeleted                                   AuditLogBaseSchemaType = "approvalAlgorithm.deleted"
	AuditLogBaseSchemaTypeApprovalAlgorithmUpdated                                   AuditLogBaseSchemaType = "approvalAlgorithm.updated"
	AuditLogBaseSchemaTypeBundleCreated                                              AuditLogBaseSchemaType = "bundle.created"
	AuditLogBaseSchemaTypeBundleDeleted                                              AuditLogBaseSchemaType = "bundle.deleted"
	AuditLogBaseSchemaTypeBundleUpdated                                              AuditLogBaseSchemaType = "bundle.updated"
	AuditLogBaseSchemaTypeCompanyFailedSyncDirectoriesGroups                         AuditLogBaseSchemaType = "company.failed.sync.directories.groups"
	AuditLogBaseSchemaTypeCompanyFailedSyncDirectoriesUsers                          AuditLogBaseSchemaType = "company.failed.sync.directories.users"
	AuditLogBaseSchemaTypeCompanyFailedSyncHrDirectManagers                          AuditLogBaseSchemaType = "company.failed.sync.hr.directManagers"
	AuditLogBaseSchemaTypeCompanyPolicyPermissionsUpdated                            AuditLogBaseSchemaType = "company.policy.permissions.updated"
	AuditLogBaseSchemaTypeCompanyPolicyUserMissingActors                             AuditLogBaseSchemaType = "company.policy.user.missingActors"
	AuditLogBaseSchemaTypeCompanySyncDirectoriesGroups                               AuditLogBaseSchemaType = "company.sync.directories.groups"
	AuditLogBaseSchemaTypeCompanySyncDirectoriesUsers                                AuditLogBaseSchemaType = "company.sync.directories.users"
	AuditLogBaseSchemaTypeCompanySyncHrDirectManagers                                AuditLogBaseSchemaType = "company.sync.hr.directManagers"
	AuditLogBaseSchemaTypeIntegrationCreated                                         AuditLogBaseSchemaType = "integration.created"
	AuditLogBaseSchemaTypeIntegrationDeleted                                         AuditLogBaseSchemaType = "integration.deleted"
	AuditLogBaseSchemaTypeIntegrationFailedAccessGive                                AuditLogBaseSchemaType = "integration.failed.access.give"
	AuditLogBaseSchemaTypeIntegrationFailedAccessRevoke                              AuditLogBaseSchemaType = "integration.failed.access.revoke"
	AuditLogBaseSchemaTypeIntegrationFailedSyncActors                                AuditLogBaseSchemaType = "integration.failed.sync.actors"
	AuditLogBaseSchemaTypeIntegrationFailedSyncAssets                                AuditLogBaseSchemaType = "integration.failed.sync.assets"
	AuditLogBaseSchemaTypeIntegrationFailedSyncPermissions                           AuditLogBaseSchemaType = "integration.failed.sync.permissions"
	AuditLogBaseSchemaTypeIntegrationResourceCreatedManually                         AuditLogBaseSchemaType = "integrationResource.created.manually"
	AuditLogBaseSchemaTypeIntegrationResourceDeletedManually                         AuditLogBaseSchemaType = "integrationResource.deleted.manually"
	AuditLogBaseSchemaTypeIntegrationResourceRoleCreatedManually                     AuditLogBaseSchemaType = "integrationResourceRole.created.manually"
	AuditLogBaseSchemaTypeIntegrationResourceRoleDeletedManually                     AuditLogBaseSchemaType = "integrationResourceRole.deleted.manually"
	AuditLogBaseSchemaTypeIntegrationResourceRoleUpdatedAllowedDurations             AuditLogBaseSchemaType = "integrationResourceRole.updated.allowedDurations"
	AuditLogBaseSchemaTypeIntegrationResourceRoleUpdatedAllowsRequests               AuditLogBaseSchemaType = "integrationResourceRole.updated.allowsRequests"
	AuditLogBaseSchemaTypeIntegrationResourceRoleUpdatedApprovalAlgorithm            AuditLogBaseSchemaType = "integrationResourceRole.updated.approvalAlgorithm"
	AuditLogBaseSchemaTypeIntegrationResourceRoleUpdatedName                         AuditLogBaseSchemaType = "integrationResourceRole.updated.name"
	AuditLogBaseSchemaTypeIntegrationResourceUpdatedAllowedDurations                 AuditLogBaseSchemaType = "integrationResource.updated.allowedDurations"
	AuditLogBaseSchemaTypeIntegrationResourceUpdatedAllowsRequests                   AuditLogBaseSchemaType = "integrationResource.updated.allowsRequests"
	AuditLogBaseSchemaTypeIntegrationResourceUpdatedApprovalAlgorithm                AuditLogBaseSchemaType = "integrationResource.updated.approvalAlgorithm"
	AuditLogBaseSchemaTypeIntegrationResourceUpdatedMaintainers                      AuditLogBaseSchemaType = "integrationResource.updated.maintainers"
	AuditLogBaseSchemaTypeIntegrationResourceUpdatedName                             AuditLogBaseSchemaType = "integrationResource.updated.name"
	AuditLogBaseSchemaTypeIntegrationResourceUpdatedOwner                            AuditLogBaseSchemaType = "integrationResource.updated.owner"
	AuditLogBaseSchemaTypeIntegrationResourceUpdatedUserDefinedDescription           AuditLogBaseSchemaType = "integrationResource.updated.userDefinedDescription"
	AuditLogBaseSchemaTypeIntegrationResourceUpdatedUserDefinedTags                  AuditLogBaseSchemaType = "integrationResource.updated.userDefinedTags"
	AuditLogBaseSchemaTypeIntegrationSyncActors                                      AuditLogBaseSchemaType = "integration.sync.actors"
	AuditLogBaseSchemaTypeIntegrationSyncAssets                                      AuditLogBaseSchemaType = "integration.sync.assets"
	AuditLogBaseSchemaTypeIntegrationSyncPermissions                                 AuditLogBaseSchemaType = "integration.sync.permissions"
	AuditLogBaseSchemaTypeIntegrationUpdatedAllowedDurations                         AuditLogBaseSchemaType = "integration.updated.allowedDurations"
	AuditLogBaseSchemaTypeIntegrationUpdatedAllowsRequests                           AuditLogBaseSchemaType = "integration.updated.allowsRequests"
	AuditLogBaseSchemaTypeIntegrationUpdatedApprovalAlgorithm                        AuditLogBaseSchemaType = "integration.updated.approvalAlgorithm"
	AuditLogBaseSchemaTypeIntegrationUpdatedAutoAssignRecommendedResourceMaintainers AuditLogBaseSchemaType = "integration.updated.autoAssignRecommendedResourceMaintainers"
	AuditLogBaseSchemaTypeIntegrationUpdatedAutoAssignRecommendedResourceOwner       AuditLogBaseSchemaType = "integration.updated.autoAssignRecommendedResourceOwner"
	AuditLogBaseSchemaTypeIntegrationUpdatedCanCreateActors                          AuditLogBaseSchemaType = "integration.updated.canCreateActors"
	AuditLogBaseSchemaTypeIntegrationUpdatedCanEditPermissions                       AuditLogBaseSchemaType = "integration.updated.canEditPermissions"
	AuditLogBaseSchemaTypeIntegrationUpdatedConfiguration                            AuditLogBaseSchemaType = "integration.updated.configuration"
	AuditLogBaseSchemaTypeIntegrationUpdatedDefaultAllowsRequests                    AuditLogBaseSchemaType = "integration.updated.defaultAllowsRequests"
	AuditLogBaseSchemaTypeIntegrationUpdatedIsVirtual                                AuditLogBaseSchemaType = "integration.updated.isVirtual"
	AuditLogBaseSchemaTypeIntegrationUpdatedMaintainers                              AuditLogBaseSchemaType = "integration.updated.maintainers"
	AuditLogBaseSchemaTypeIntegrationUpdatedName                                     AuditLogBaseSchemaType = "integration.updated.name"
	AuditLogBaseSchemaTypeIntegrationUpdatedNotifyAboutExternalPermissions           AuditLogBaseSchemaType = "integration.updated.notifyAboutExternalPermissions"
	AuditLogBaseSchemaTypeIntegrationUpdatedOwner                                    AuditLogBaseSchemaType = "integration.updated.owner"
	AuditLogBaseSchemaTypeIntegrationUpdatedReadonly                                 AuditLogBaseSchemaType = "integration.updated.readonly"
	AuditLogBaseSchemaTypeIntegrationUpdatedRestoreImage                             AuditLogBaseSchemaType = "integration.updated.restoreImage"
	AuditLogBaseSchemaTypePolicyCreated                                              AuditLogBaseSchemaType = "policy.created"
	AuditLogBaseSchemaTypePolicyDeleted                                              AuditLogBaseSchemaType = "policy.deleted"
	AuditLogBaseSchemaTypePolicyUpdatedData                                          AuditLogBaseSchemaType = "policy.updated.data"
	AuditLogBaseSchemaTypePolicyUpdatedSortOrder                                     AuditLogBaseSchemaType = "policy.updated.sortOrder"
	AuditLogBaseSchemaTypeTicketAutomaticApproval                                    AuditLogBaseSchemaType = "ticket.automaticApproval"
	AuditLogBaseSchemaTypeTicketCreated                                              AuditLogBaseSchemaType = "ticket.created"
	AuditLogBaseSchemaTypeTicketDeleted                                              AuditLogBaseSchemaType = "ticket.deleted"
	AuditLogBaseSchemaTypeTicketFailedGrant                                          AuditLogBaseSchemaType = "ticket.failed.grant"
	AuditLogBaseSchemaTypeTicketFailedRevoke                                         AuditLogBaseSchemaType = "ticket.failed.revoke"
	AuditLogBaseSchemaTypeTicketFinalApproved                                        AuditLogBaseSchemaType = "ticket.finalApproved"
	AuditLogBaseSchemaTypeTicketGranted                                              AuditLogBaseSchemaType = "ticket.granted"
	AuditLogBaseSchemaTypeTicketPassedStage                                          AuditLogBaseSchemaType = "ticket.passedStage"
	AuditLogBaseSchemaTypeTicketPermissionAlreadyExist                               AuditLogBaseSchemaType = "ticket.permissionAlreadyExist"
	AuditLogBaseSchemaTypeTicketPermissionReverted                                   AuditLogBaseSchemaType = "ticket.permissionReverted"
	AuditLogBaseSchemaTypeTicketPermissionWontRevoke                                 AuditLogBaseSchemaType = "ticket.permissionWontRevoke"
	AuditLogBaseSchemaTypeTicketRedirectEmptyGroup                                   AuditLogBaseSchemaType = "ticket.redirect.emptyGroup"
	AuditLogBaseSchemaTypeTicketRedirectForward                                      AuditLogBaseSchemaType = "ticket.redirect.forward"
	AuditLogBaseSchemaTypeTicketRedirectNoManagers                                   AuditLogBaseSchemaType = "ticket.redirect.noManagers"
	AuditLogBaseSchemaTypeTicketRedirectNoTeamMembers                                AuditLogBaseSchemaType = "ticket.redirect.noTeamMembers"
	AuditLogBaseSchemaTypeTicketRedirectToUser                                       AuditLogBaseSchemaType = "ticket.redirect.toUser"
	AuditLogBaseSchemaTypeTicketRetryGrant                                           AuditLogBaseSchemaType = "ticket.retry.grant"
	AuditLogBaseSchemaTypeTicketRetryRevoke                                          AuditLogBaseSchemaType = "ticket.retry.revoke"
	AuditLogBaseSchemaTypeTicketRevoked                                              AuditLogBaseSchemaType = "ticket.revoked"
	AuditLogBaseSchemaTypeTicketSentGrant                                            AuditLogBaseSchemaType = "ticket.sent.grant"
	AuditLogBaseSchemaTypeTicketSentRevert                                           AuditLogBaseSchemaType = "ticket.sent.revert"
	AuditLogBaseSchemaTypeTicketSentRevoke                                           AuditLogBaseSchemaType = "ticket.sent.revoke"
	AuditLogBaseSchemaTypeTicketStatusChanged                                        AuditLogBaseSchemaType = "ticket.statusChanged"
	AuditLogBaseSchemaTypeTicketTaskCreated                                          AuditLogBaseSchemaType = "ticket.taskCreated"
	AuditLogBaseSchemaTypeTicketUserApproved                                         AuditLogBaseSchemaType = "ticket.userApproved"
	AuditLogBaseSchemaTypeTicketUserDeclined                                         AuditLogBaseSchemaType = "ticket.userDeclined"
)

// Defines values for BundleAuditLogResponseSchemaType.
const (
	BundleAuditLogResponseSchemaTypeAccessReviewActivated                                      BundleAuditLogResponseSchemaType = "accessReview.activated"
	BundleAuditLogResponseSchemaTypeAccessReviewCreated                                        BundleAuditLogResponseSchemaType = "accessReview.created"
	BundleAuditLogResponseSchemaTypeAccessReviewDeleted                                        BundleAuditLogResponseSchemaType = "accessReview.deleted"
	BundleAuditLogResponseSchemaTypeAccessReviewDone                                           BundleAuditLogResponseSchemaType = "accessReview.done"
	BundleAuditLogResponseSchemaTypeAccessReviewUpdated                                        BundleAuditLogResponseSchemaType = "accessReview.updated"
	BundleAuditLogResponseSchemaTypeApprovalAlgorithmCreated                                   BundleAuditLogResponseSchemaType = "approvalAlgorithm.created"
	BundleAuditLogResponseSchemaTypeApprovalAlgorithmDeleted                                   BundleAuditLogResponseSchemaType = "approvalAlgorithm.deleted"
	BundleAuditLogResponseSchemaTypeApprovalAlgorithmUpdated                                   BundleAuditLogResponseSchemaType = "approvalAlgorithm.updated"
	BundleAuditLogResponseSchemaTypeBundleCreated                                              BundleAuditLogResponseSchemaType = "bundle.created"
	BundleAuditLogResponseSchemaTypeBundleDeleted                                              BundleAuditLogResponseSchemaType = "bundle.deleted"
	BundleAuditLogResponseSchemaTypeBundleUpdated                                              BundleAuditLogResponseSchemaType = "bundle.updated"
	BundleAuditLogResponseSchemaTypeCompanyFailedSyncDirectoriesGroups                         BundleAuditLogResponseSchemaType = "company.failed.sync.directories.groups"
	BundleAuditLogResponseSchemaTypeCompanyFailedSyncDirectoriesUsers                          BundleAuditLogResponseSchemaType = "company.failed.sync.directories.users"
	BundleAuditLogResponseSchemaTypeCompanyFailedSyncHrDirectManagers                          BundleAuditLogResponseSchemaType = "company.failed.sync.hr.directManagers"
	BundleAuditLogResponseSchemaTypeCompanyPolicyPermissionsUpdated                            BundleAuditLogResponseSchemaType = "company.policy.permissions.updated"
	BundleAuditLogResponseSchemaTypeCompanyPolicyUserMissingActors                             BundleAuditLogResponseSchemaType = "company.policy.user.missingActors"
	BundleAuditLogResponseSchemaTypeCompanySyncDirectoriesGroups                               BundleAuditLogResponseSchemaType = "company.sync.directories.groups"
	BundleAuditLogResponseSchemaTypeCompanySyncDirectoriesUsers                                BundleAuditLogResponseSchemaType = "company.sync.directories.users"
	BundleAuditLogResponseSchemaTypeCompanySyncHrDirectManagers                                BundleAuditLogResponseSchemaType = "company.sync.hr.directManagers"
	BundleAuditLogResponseSchemaTypeIntegrationCreated                                         BundleAuditLogResponseSchemaType = "integration.created"
	BundleAuditLogResponseSchemaTypeIntegrationDeleted                                         BundleAuditLogResponseSchemaType = "integration.deleted"
	BundleAuditLogResponseSchemaTypeIntegrationFailedAccessGive                                BundleAuditLogResponseSchemaType = "integration.failed.access.give"
	BundleAuditLogResponseSchemaTypeIntegrationFailedAccessRevoke                              BundleAuditLogResponseSchemaType = "integration.failed.access.revoke"
	BundleAuditLogResponseSchemaTypeIntegrationFailedSyncActors                                BundleAuditLogResponseSchemaType = "integration.failed.sync.actors"
	BundleAuditLogResponseSchemaTypeIntegrationFailedSyncAssets                                BundleAuditLogResponseSchemaType = "integration.failed.sync.assets"
	BundleAuditLogResponseSchemaTypeIntegrationFailedSyncPermissions                           BundleAuditLogResponseSchemaType = "integration.failed.sync.permissions"
	BundleAuditLogResponseSchemaTypeIntegrationResourceCreatedManually                         BundleAuditLogResponseSchemaType = "integrationResource.created.manually"
	BundleAuditLogResponseSchemaTypeIntegrationResourceDeletedManually                         BundleAuditLogResponseSchemaType = "integrationResource.deleted.manually"
	BundleAuditLogResponseSchemaTypeIntegrationResourceRoleCreatedManually                     BundleAuditLogResponseSchemaType = "integrationResourceRole.created.manually"
	BundleAuditLogResponseSchemaTypeIntegrationResourceRoleDeletedManually                     BundleAuditLogResponseSchemaType = "integrationResourceRole.deleted.manually"
	BundleAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedAllowedDurations             BundleAuditLogResponseSchemaType = "integrationResourceRole.updated.allowedDurations"
	BundleAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedAllowsRequests               BundleAuditLogResponseSchemaType = "integrationResourceRole.updated.allowsRequests"
	BundleAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedApprovalAlgorithm            BundleAuditLogResponseSchemaType = "integrationResourceRole.updated.approvalAlgorithm"
	BundleAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedName                         BundleAuditLogResponseSchemaType = "integrationResourceRole.updated.name"
	BundleAuditLogResponseSchemaTypeIntegrationResourceUpdatedAllowedDurations                 BundleAuditLogResponseSchemaType = "integrationResource.updated.allowedDurations"
	BundleAuditLogResponseSchemaTypeIntegrationResourceUpdatedAllowsRequests                   BundleAuditLogResponseSchemaType = "integrationResource.updated.allowsRequests"
	BundleAuditLogResponseSchemaTypeIntegrationResourceUpdatedApprovalAlgorithm                BundleAuditLogResponseSchemaType = "integrationResource.updated.approvalAlgorithm"
	BundleAuditLogResponseSchemaTypeIntegrationResourceUpdatedMaintainers                      BundleAuditLogResponseSchemaType = "integrationResource.updated.maintainers"
	BundleAuditLogResponseSchemaTypeIntegrationResourceUpdatedName                             BundleAuditLogResponseSchemaType = "integrationResource.updated.name"
	BundleAuditLogResponseSchemaTypeIntegrationResourceUpdatedOwner                            BundleAuditLogResponseSchemaType = "integrationResource.updated.owner"
	BundleAuditLogResponseSchemaTypeIntegrationResourceUpdatedUserDefinedDescription           BundleAuditLogResponseSchemaType = "integrationResource.updated.userDefinedDescription"
	BundleAuditLogResponseSchemaTypeIntegrationResourceUpdatedUserDefinedTags                  BundleAuditLogResponseSchemaType = "integrationResource.updated.userDefinedTags"
	BundleAuditLogResponseSchemaTypeIntegrationSyncActors                                      BundleAuditLogResponseSchemaType = "integration.sync.actors"
	BundleAuditLogResponseSchemaTypeIntegrationSyncAssets                                      BundleAuditLogResponseSchemaType = "integration.sync.assets"
	BundleAuditLogResponseSchemaTypeIntegrationSyncPermissions                                 BundleAuditLogResponseSchemaType = "integration.sync.permissions"
	BundleAuditLogResponseSchemaTypeIntegrationUpdatedAllowedDurations                         BundleAuditLogResponseSchemaType = "integration.updated.allowedDurations"
	BundleAuditLogResponseSchemaTypeIntegrationUpdatedAllowsRequests                           BundleAuditLogResponseSchemaType = "integration.updated.allowsRequests"
	BundleAuditLogResponseSchemaTypeIntegrationUpdatedApprovalAlgorithm                        BundleAuditLogResponseSchemaType = "integration.updated.approvalAlgorithm"
	BundleAuditLogResponseSchemaTypeIntegrationUpdatedAutoAssignRecommendedResourceMaintainers BundleAuditLogResponseSchemaType = "integration.updated.autoAssignRecommendedResourceMaintainers"
	BundleAuditLogResponseSchemaTypeIntegrationUpdatedAutoAssignRecommendedResourceOwner       BundleAuditLogResponseSchemaType = "integration.updated.autoAssignRecommendedResourceOwner"
	BundleAuditLogResponseSchemaTypeIntegrationUpdatedCanCreateActors                          BundleAuditLogResponseSchemaType = "integration.updated.canCreateActors"
	BundleAuditLogResponseSchemaTypeIntegrationUpdatedCanEditPermissions                       BundleAuditLogResponseSchemaType = "integration.updated.canEditPermissions"
	BundleAuditLogResponseSchemaTypeIntegrationUpdatedConfiguration                            BundleAuditLogResponseSchemaType = "integration.updated.configuration"
	BundleAuditLogResponseSchemaTypeIntegrationUpdatedDefaultAllowsRequests                    BundleAuditLogResponseSchemaType = "integration.updated.defaultAllowsRequests"
	BundleAuditLogResponseSchemaTypeIntegrationUpdatedIsVirtual                                BundleAuditLogResponseSchemaType = "integration.updated.isVirtual"
	BundleAuditLogResponseSchemaTypeIntegrationUpdatedMaintainers                              BundleAuditLogResponseSchemaType = "integration.updated.maintainers"
	BundleAuditLogResponseSchemaTypeIntegrationUpdatedName                                     BundleAuditLogResponseSchemaType = "integration.updated.name"
	BundleAuditLogResponseSchemaTypeIntegrationUpdatedNotifyAboutExternalPermissions           BundleAuditLogResponseSchemaType = "integration.updated.notifyAboutExternalPermissions"
	BundleAuditLogResponseSchemaTypeIntegrationUpdatedOwner                                    BundleAuditLogResponseSchemaType = "integration.updated.owner"
	BundleAuditLogResponseSchemaTypeIntegrationUpdatedReadonly                                 BundleAuditLogResponseSchemaType = "integration.updated.readonly"
	BundleAuditLogResponseSchemaTypeIntegrationUpdatedRestoreImage                             BundleAuditLogResponseSchemaType = "integration.updated.restoreImage"
	BundleAuditLogResponseSchemaTypePolicyCreated                                              BundleAuditLogResponseSchemaType = "policy.created"
	BundleAuditLogResponseSchemaTypePolicyDeleted                                              BundleAuditLogResponseSchemaType = "policy.deleted"
	BundleAuditLogResponseSchemaTypePolicyUpdatedData                                          BundleAuditLogResponseSchemaType = "policy.updated.data"
	BundleAuditLogResponseSchemaTypePolicyUpdatedSortOrder                                     BundleAuditLogResponseSchemaType = "policy.updated.sortOrder"
	BundleAuditLogResponseSchemaTypeTicketAutomaticApproval                                    BundleAuditLogResponseSchemaType = "ticket.automaticApproval"
	BundleAuditLogResponseSchemaTypeTicketCreated                                              BundleAuditLogResponseSchemaType = "ticket.created"
	BundleAuditLogResponseSchemaTypeTicketDeleted                                              BundleAuditLogResponseSchemaType = "ticket.deleted"
	BundleAuditLogResponseSchemaTypeTicketFailedGrant                                          BundleAuditLogResponseSchemaType = "ticket.failed.grant"
	BundleAuditLogResponseSchemaTypeTicketFailedRevoke                                         BundleAuditLogResponseSchemaType = "ticket.failed.revoke"
	BundleAuditLogResponseSchemaTypeTicketFinalApproved                                        BundleAuditLogResponseSchemaType = "ticket.finalApproved"
	BundleAuditLogResponseSchemaTypeTicketGranted                                              BundleAuditLogResponseSchemaType = "ticket.granted"
	BundleAuditLogResponseSchemaTypeTicketPassedStage                                          BundleAuditLogResponseSchemaType = "ticket.passedStage"
	BundleAuditLogResponseSchemaTypeTicketPermissionAlreadyExist                               BundleAuditLogResponseSchemaType = "ticket.permissionAlreadyExist"
	BundleAuditLogResponseSchemaTypeTicketPermissionReverted                                   BundleAuditLogResponseSchemaType = "ticket.permissionReverted"
	BundleAuditLogResponseSchemaTypeTicketPermissionWontRevoke                                 BundleAuditLogResponseSchemaType = "ticket.permissionWontRevoke"
	BundleAuditLogResponseSchemaTypeTicketRedirectEmptyGroup                                   BundleAuditLogResponseSchemaType = "ticket.redirect.emptyGroup"
	BundleAuditLogResponseSchemaTypeTicketRedirectForward                                      BundleAuditLogResponseSchemaType = "ticket.redirect.forward"
	BundleAuditLogResponseSchemaTypeTicketRedirectNoManagers                                   BundleAuditLogResponseSchemaType = "ticket.redirect.noManagers"
	BundleAuditLogResponseSchemaTypeTicketRedirectNoTeamMembers                                BundleAuditLogResponseSchemaType = "ticket.redirect.noTeamMembers"
	BundleAuditLogResponseSchemaTypeTicketRedirectToUser                                       BundleAuditLogResponseSchemaType = "ticket.redirect.toUser"
	BundleAuditLogResponseSchemaTypeTicketRetryGrant                                           BundleAuditLogResponseSchemaType = "ticket.retry.grant"
	BundleAuditLogResponseSchemaTypeTicketRetryRevoke                                          BundleAuditLogResponseSchemaType = "ticket.retry.revoke"
	BundleAuditLogResponseSchemaTypeTicketRevoked                                              BundleAuditLogResponseSchemaType = "ticket.revoked"
	BundleAuditLogResponseSchemaTypeTicketSentGrant                                            BundleAuditLogResponseSchemaType = "ticket.sent.grant"
	BundleAuditLogResponseSchemaTypeTicketSentRevert                                           BundleAuditLogResponseSchemaType = "ticket.sent.revert"
	BundleAuditLogResponseSchemaTypeTicketSentRevoke                                           BundleAuditLogResponseSchemaType = "ticket.sent.revoke"
	BundleAuditLogResponseSchemaTypeTicketStatusChanged                                        BundleAuditLogResponseSchemaType = "ticket.statusChanged"
	BundleAuditLogResponseSchemaTypeTicketTaskCreated                                          BundleAuditLogResponseSchemaType = "ticket.taskCreated"
	BundleAuditLogResponseSchemaTypeTicketUserApproved                                         BundleAuditLogResponseSchemaType = "ticket.userApproved"
	BundleAuditLogResponseSchemaTypeTicketUserDeclined                                         BundleAuditLogResponseSchemaType = "ticket.userDeclined"
)

// Defines values for EnumAllowedDurations.
const (
	Minus1    EnumAllowedDurations = -1
	N10800    EnumAllowedDurations = 10800
	N15768e07 EnumAllowedDurations = 1.5768e+07
	N1800     EnumAllowedDurations = 1800
	N21600    EnumAllowedDurations = 21600
	N259200   EnumAllowedDurations = 259200
	N2628e06  EnumAllowedDurations = 2.628e+06
	N31536e07 EnumAllowedDurations = 3.1536e+07
	N3600     EnumAllowedDurations = 3600
	N43200    EnumAllowedDurations = 43200
	N57600    EnumAllowedDurations = 57600
	N604800   EnumAllowedDurations = 604800
	N63072e07 EnumAllowedDurations = 6.3072e+07
	N7884e06  EnumAllowedDurations = 7.884e+06
	N86400    EnumAllowedDurations = 86400
)

// Defines values for EnumApprovalEntityGroupDirectoryGroup.
const (
	DirectoryGroup EnumApprovalEntityGroupDirectoryGroup = "DirectoryGroup"
)

// Defines values for EnumApprovalEntityScheduleOnCallIntegrationSchedule.
const (
	OnCallIntegrationSchedule EnumApprovalEntityScheduleOnCallIntegrationSchedule = "OnCallIntegrationSchedule"
)

// Defines values for EnumApprovalEntityUserUser.
const (
	EnumApprovalEntityUserUserUser EnumApprovalEntityUserUser = "User"
)

// Defines values for EnumApprovalEntityWithoutEntity.
const (
	EnumApprovalEntityWithoutEntityAutomatic             EnumApprovalEntityWithoutEntity = "Automatic"
	EnumApprovalEntityWithoutEntityDirectManager         EnumApprovalEntityWithoutEntity = "DirectManager"
	EnumApprovalEntityWithoutEntityIntegrationMaintainer EnumApprovalEntityWithoutEntity = "IntegrationMaintainer"
	EnumApprovalEntityWithoutEntityIntegrationOwner      EnumApprovalEntityWithoutEntity = "IntegrationOwner"
	EnumApprovalEntityWithoutEntityResourceMaintainer    EnumApprovalEntityWithoutEntity = "ResourceMaintainer"
	EnumApprovalEntityWithoutEntityResourceOwner         EnumApprovalEntityWithoutEntity = "ResourceOwner"
	EnumApprovalEntityWithoutEntityTeamMember            EnumApprovalEntityWithoutEntity = "TeamMember"
)

// Defines values for EnumApprovalFlowOperator.
const (
	EnumApprovalFlowOperatorAnd EnumApprovalFlowOperator = "and"
	EnumApprovalFlowOperatorOr  EnumApprovalFlowOperator = "or"
)

// Defines values for EnumApprovalFlowStepOperator.
const (
	EnumApprovalFlowStepOperatorAnd EnumApprovalFlowStepOperator = "and"
	EnumApprovalFlowStepOperatorOr  EnumApprovalFlowStepOperator = "or"
)

// Defines values for EnumAuditLogEventType.
const (
	EnumAuditLogEventTypeAccessReviewActivated                                      EnumAuditLogEventType = "accessReview.activated"
	EnumAuditLogEventTypeAccessReviewCreated                                        EnumAuditLogEventType = "accessReview.created"
	EnumAuditLogEventTypeAccessReviewDeleted                                        EnumAuditLogEventType = "accessReview.deleted"
	EnumAuditLogEventTypeAccessReviewDone                                           EnumAuditLogEventType = "accessReview.done"
	EnumAuditLogEventTypeAccessReviewUpdated                                        EnumAuditLogEventType = "accessReview.updated"
	EnumAuditLogEventTypeApprovalAlgorithmCreated                                   EnumAuditLogEventType = "approvalAlgorithm.created"
	EnumAuditLogEventTypeApprovalAlgorithmDeleted                                   EnumAuditLogEventType = "approvalAlgorithm.deleted"
	EnumAuditLogEventTypeApprovalAlgorithmUpdated                                   EnumAuditLogEventType = "approvalAlgorithm.updated"
	EnumAuditLogEventTypeBundleCreated                                              EnumAuditLogEventType = "bundle.created"
	EnumAuditLogEventTypeBundleDeleted                                              EnumAuditLogEventType = "bundle.deleted"
	EnumAuditLogEventTypeBundleUpdated                                              EnumAuditLogEventType = "bundle.updated"
	EnumAuditLogEventTypeCompanyFailedSyncDirectoriesGroups                         EnumAuditLogEventType = "company.failed.sync.directories.groups"
	EnumAuditLogEventTypeCompanyFailedSyncDirectoriesUsers                          EnumAuditLogEventType = "company.failed.sync.directories.users"
	EnumAuditLogEventTypeCompanyFailedSyncHrDirectManagers                          EnumAuditLogEventType = "company.failed.sync.hr.directManagers"
	EnumAuditLogEventTypeCompanyPolicyPermissionsUpdated                            EnumAuditLogEventType = "company.policy.permissions.updated"
	EnumAuditLogEventTypeCompanyPolicyUserMissingActors                             EnumAuditLogEventType = "company.policy.user.missingActors"
	EnumAuditLogEventTypeCompanySyncDirectoriesGroups                               EnumAuditLogEventType = "company.sync.directories.groups"
	EnumAuditLogEventTypeCompanySyncDirectoriesUsers                                EnumAuditLogEventType = "company.sync.directories.users"
	EnumAuditLogEventTypeCompanySyncHrDirectManagers                                EnumAuditLogEventType = "company.sync.hr.directManagers"
	EnumAuditLogEventTypeIntegrationCreated                                         EnumAuditLogEventType = "integration.created"
	EnumAuditLogEventTypeIntegrationDeleted                                         EnumAuditLogEventType = "integration.deleted"
	EnumAuditLogEventTypeIntegrationFailedAccessGive                                EnumAuditLogEventType = "integration.failed.access.give"
	EnumAuditLogEventTypeIntegrationFailedAccessRevoke                              EnumAuditLogEventType = "integration.failed.access.revoke"
	EnumAuditLogEventTypeIntegrationFailedSyncActors                                EnumAuditLogEventType = "integration.failed.sync.actors"
	EnumAuditLogEventTypeIntegrationFailedSyncAssets                                EnumAuditLogEventType = "integration.failed.sync.assets"
	EnumAuditLogEventTypeIntegrationFailedSyncPermissions                           EnumAuditLogEventType = "integration.failed.sync.permissions"
	EnumAuditLogEventTypeIntegrationResourceCreatedManually                         EnumAuditLogEventType = "integrationResource.created.manually"
	EnumAuditLogEventTypeIntegrationResourceDeletedManually                         EnumAuditLogEventType = "integrationResource.deleted.manually"
	EnumAuditLogEventTypeIntegrationResourceRoleCreatedManually                     EnumAuditLogEventType = "integrationResourceRole.created.manually"
	EnumAuditLogEventTypeIntegrationResourceRoleDeletedManually                     EnumAuditLogEventType = "integrationResourceRole.deleted.manually"
	EnumAuditLogEventTypeIntegrationResourceRoleUpdatedAllowedDurations             EnumAuditLogEventType = "integrationResourceRole.updated.allowedDurations"
	EnumAuditLogEventTypeIntegrationResourceRoleUpdatedAllowsRequests               EnumAuditLogEventType = "integrationResourceRole.updated.allowsRequests"
	EnumAuditLogEventTypeIntegrationResourceRoleUpdatedApprovalAlgorithm            EnumAuditLogEventType = "integrationResourceRole.updated.approvalAlgorithm"
	EnumAuditLogEventTypeIntegrationResourceRoleUpdatedName                         EnumAuditLogEventType = "integrationResourceRole.updated.name"
	EnumAuditLogEventTypeIntegrationResourceUpdatedAllowedDurations                 EnumAuditLogEventType = "integrationResource.updated.allowedDurations"
	EnumAuditLogEventTypeIntegrationResourceUpdatedAllowsRequests                   EnumAuditLogEventType = "integrationResource.updated.allowsRequests"
	EnumAuditLogEventTypeIntegrationResourceUpdatedApprovalAlgorithm                EnumAuditLogEventType = "integrationResource.updated.approvalAlgorithm"
	EnumAuditLogEventTypeIntegrationResourceUpdatedMaintainers                      EnumAuditLogEventType = "integrationResource.updated.maintainers"
	EnumAuditLogEventTypeIntegrationResourceUpdatedName                             EnumAuditLogEventType = "integrationResource.updated.name"
	EnumAuditLogEventTypeIntegrationResourceUpdatedOwner                            EnumAuditLogEventType = "integrationResource.updated.owner"
	EnumAuditLogEventTypeIntegrationResourceUpdatedUserDefinedDescription           EnumAuditLogEventType = "integrationResource.updated.userDefinedDescription"
	EnumAuditLogEventTypeIntegrationResourceUpdatedUserDefinedTags                  EnumAuditLogEventType = "integrationResource.updated.userDefinedTags"
	EnumAuditLogEventTypeIntegrationSyncActors                                      EnumAuditLogEventType = "integration.sync.actors"
	EnumAuditLogEventTypeIntegrationSyncAssets                                      EnumAuditLogEventType = "integration.sync.assets"
	EnumAuditLogEventTypeIntegrationSyncPermissions                                 EnumAuditLogEventType = "integration.sync.permissions"
	EnumAuditLogEventTypeIntegrationUpdatedAllowedDurations                         EnumAuditLogEventType = "integration.updated.allowedDurations"
	EnumAuditLogEventTypeIntegrationUpdatedAllowsRequests                           EnumAuditLogEventType = "integration.updated.allowsRequests"
	EnumAuditLogEventTypeIntegrationUpdatedApprovalAlgorithm                        EnumAuditLogEventType = "integration.updated.approvalAlgorithm"
	EnumAuditLogEventTypeIntegrationUpdatedAutoAssignRecommendedResourceMaintainers EnumAuditLogEventType = "integration.updated.autoAssignRecommendedResourceMaintainers"
	EnumAuditLogEventTypeIntegrationUpdatedAutoAssignRecommendedResourceOwner       EnumAuditLogEventType = "integration.updated.autoAssignRecommendedResourceOwner"
	EnumAuditLogEventTypeIntegrationUpdatedCanCreateActors                          EnumAuditLogEventType = "integration.updated.canCreateActors"
	EnumAuditLogEventTypeIntegrationUpdatedCanEditPermissions                       EnumAuditLogEventType = "integration.updated.canEditPermissions"
	EnumAuditLogEventTypeIntegrationUpdatedConfiguration                            EnumAuditLogEventType = "integration.updated.configuration"
	EnumAuditLogEventTypeIntegrationUpdatedDefaultAllowsRequests                    EnumAuditLogEventType = "integration.updated.defaultAllowsRequests"
	EnumAuditLogEventTypeIntegrationUpdatedIsVirtual                                EnumAuditLogEventType = "integration.updated.isVirtual"
	EnumAuditLogEventTypeIntegrationUpdatedMaintainers                              EnumAuditLogEventType = "integration.updated.maintainers"
	EnumAuditLogEventTypeIntegrationUpdatedName                                     EnumAuditLogEventType = "integration.updated.name"
	EnumAuditLogEventTypeIntegrationUpdatedNotifyAboutExternalPermissions           EnumAuditLogEventType = "integration.updated.notifyAboutExternalPermissions"
	EnumAuditLogEventTypeIntegrationUpdatedOwner                                    EnumAuditLogEventType = "integration.updated.owner"
	EnumAuditLogEventTypeIntegrationUpdatedReadonly                                 EnumAuditLogEventType = "integration.updated.readonly"
	EnumAuditLogEventTypeIntegrationUpdatedRestoreImage                             EnumAuditLogEventType = "integration.updated.restoreImage"
	EnumAuditLogEventTypePolicyCreated                                              EnumAuditLogEventType = "policy.created"
	EnumAuditLogEventTypePolicyDeleted                                              EnumAuditLogEventType = "policy.deleted"
	EnumAuditLogEventTypePolicyUpdatedData                                          EnumAuditLogEventType = "policy.updated.data"
	EnumAuditLogEventTypePolicyUpdatedSortOrder                                     EnumAuditLogEventType = "policy.updated.sortOrder"
	EnumAuditLogEventTypeTicketAutomaticApproval                                    EnumAuditLogEventType = "ticket.automaticApproval"
	EnumAuditLogEventTypeTicketCreated                                              EnumAuditLogEventType = "ticket.created"
	EnumAuditLogEventTypeTicketDeleted                                              EnumAuditLogEventType = "ticket.deleted"
	EnumAuditLogEventTypeTicketFailedGrant                                          EnumAuditLogEventType = "ticket.failed.grant"
	EnumAuditLogEventTypeTicketFailedRevoke                                         EnumAuditLogEventType = "ticket.failed.revoke"
	EnumAuditLogEventTypeTicketFinalApproved                                        EnumAuditLogEventType = "ticket.finalApproved"
	EnumAuditLogEventTypeTicketGranted                                              EnumAuditLogEventType = "ticket.granted"
	EnumAuditLogEventTypeTicketPassedStage                                          EnumAuditLogEventType = "ticket.passedStage"
	EnumAuditLogEventTypeTicketPermissionAlreadyExist                               EnumAuditLogEventType = "ticket.permissionAlreadyExist"
	EnumAuditLogEventTypeTicketPermissionReverted                                   EnumAuditLogEventType = "ticket.permissionReverted"
	EnumAuditLogEventTypeTicketPermissionWontRevoke                                 EnumAuditLogEventType = "ticket.permissionWontRevoke"
	EnumAuditLogEventTypeTicketRedirectEmptyGroup                                   EnumAuditLogEventType = "ticket.redirect.emptyGroup"
	EnumAuditLogEventTypeTicketRedirectForward                                      EnumAuditLogEventType = "ticket.redirect.forward"
	EnumAuditLogEventTypeTicketRedirectNoManagers                                   EnumAuditLogEventType = "ticket.redirect.noManagers"
	EnumAuditLogEventTypeTicketRedirectNoTeamMembers                                EnumAuditLogEventType = "ticket.redirect.noTeamMembers"
	EnumAuditLogEventTypeTicketRedirectToUser                                       EnumAuditLogEventType = "ticket.redirect.toUser"
	EnumAuditLogEventTypeTicketRetryGrant                                           EnumAuditLogEventType = "ticket.retry.grant"
	EnumAuditLogEventTypeTicketRetryRevoke                                          EnumAuditLogEventType = "ticket.retry.revoke"
	EnumAuditLogEventTypeTicketRevoked                                              EnumAuditLogEventType = "ticket.revoked"
	EnumAuditLogEventTypeTicketSentGrant                                            EnumAuditLogEventType = "ticket.sent.grant"
	EnumAuditLogEventTypeTicketSentRevert                                           EnumAuditLogEventType = "ticket.sent.revert"
	EnumAuditLogEventTypeTicketSentRevoke                                           EnumAuditLogEventType = "ticket.sent.revoke"
	EnumAuditLogEventTypeTicketStatusChanged                                        EnumAuditLogEventType = "ticket.statusChanged"
	EnumAuditLogEventTypeTicketTaskCreated                                          EnumAuditLogEventType = "ticket.taskCreated"
	EnumAuditLogEventTypeTicketUserApproved                                         EnumAuditLogEventType = "ticket.userApproved"
	EnumAuditLogEventTypeTicketUserDeclined                                         EnumAuditLogEventType = "ticket.userDeclined"
)

// Defines values for EnumMaintainerTypeGroup.
const (
	EnumMaintainerTypeGroupGroup EnumMaintainerTypeGroup = "group"
)

// Defines values for EnumMaintainerTypeUser.
const (
	EnumMaintainerTypeUserUser EnumMaintainerTypeUser = "user"
)

// Defines values for EnumNotifiedEntityWithoutEntity.
const (
	EnumNotifiedEntityWithoutEntityDirectManager         EnumNotifiedEntityWithoutEntity = "DirectManager"
	EnumNotifiedEntityWithoutEntityIntegrationMaintainer EnumNotifiedEntityWithoutEntity = "IntegrationMaintainer"
	EnumNotifiedEntityWithoutEntityIntegrationOwner      EnumNotifiedEntityWithoutEntity = "IntegrationOwner"
	EnumNotifiedEntityWithoutEntityResourceMaintainer    EnumNotifiedEntityWithoutEntity = "ResourceMaintainer"
	EnumNotifiedEntityWithoutEntityResourceOwner         EnumNotifiedEntityWithoutEntity = "ResourceOwner"
	EnumNotifiedEntityWithoutEntityTeamMember            EnumNotifiedEntityWithoutEntity = "TeamMember"
)

// Defines values for EnumPolicyGroupType.
const (
	EnumPolicyGroupTypeGroup    EnumPolicyGroupType = "group"
	EnumPolicyGroupTypeSchedule EnumPolicyGroupType = "schedule"
)

// Defines values for EnumPublicTicketStatus.
const (
	Approved             EnumPublicTicketStatus = "approved"
	Cancelled            EnumPublicTicketStatus = "cancelled"
	Failed               EnumPublicTicketStatus = "failed"
	Granted              EnumPublicTicketStatus = "granted"
	PermissionInProgress EnumPublicTicketStatus = "permissionInProgress"
	Rejected             EnumPublicTicketStatus = "rejected"
	Revoked              EnumPublicTicketStatus = "revoked"
	WaitingForApproval   EnumPublicTicketStatus = "waitingForApproval"
	WaitingForIT         EnumPublicTicketStatus = "waitingForIT"
)

// Defines values for EnumPublicTicketType.
const (
	Bundle EnumPublicTicketType = "bundle"
	Role   EnumPublicTicketType = "role"
)

// Defines values for IntegrationAuditLogResponseSchemaType.
const (
	IntegrationAuditLogResponseSchemaTypeAccessReviewActivated                                      IntegrationAuditLogResponseSchemaType = "accessReview.activated"
	IntegrationAuditLogResponseSchemaTypeAccessReviewCreated                                        IntegrationAuditLogResponseSchemaType = "accessReview.created"
	IntegrationAuditLogResponseSchemaTypeAccessReviewDeleted                                        IntegrationAuditLogResponseSchemaType = "accessReview.deleted"
	IntegrationAuditLogResponseSchemaTypeAccessReviewDone                                           IntegrationAuditLogResponseSchemaType = "accessReview.done"
	IntegrationAuditLogResponseSchemaTypeAccessReviewUpdated                                        IntegrationAuditLogResponseSchemaType = "accessReview.updated"
	IntegrationAuditLogResponseSchemaTypeApprovalAlgorithmCreated                                   IntegrationAuditLogResponseSchemaType = "approvalAlgorithm.created"
	IntegrationAuditLogResponseSchemaTypeApprovalAlgorithmDeleted                                   IntegrationAuditLogResponseSchemaType = "approvalAlgorithm.deleted"
	IntegrationAuditLogResponseSchemaTypeApprovalAlgorithmUpdated                                   IntegrationAuditLogResponseSchemaType = "approvalAlgorithm.updated"
	IntegrationAuditLogResponseSchemaTypeBundleCreated                                              IntegrationAuditLogResponseSchemaType = "bundle.created"
	IntegrationAuditLogResponseSchemaTypeBundleDeleted                                              IntegrationAuditLogResponseSchemaType = "bundle.deleted"
	IntegrationAuditLogResponseSchemaTypeBundleUpdated                                              IntegrationAuditLogResponseSchemaType = "bundle.updated"
	IntegrationAuditLogResponseSchemaTypeCompanyFailedSyncDirectoriesGroups                         IntegrationAuditLogResponseSchemaType = "company.failed.sync.directories.groups"
	IntegrationAuditLogResponseSchemaTypeCompanyFailedSyncDirectoriesUsers                          IntegrationAuditLogResponseSchemaType = "company.failed.sync.directories.users"
	IntegrationAuditLogResponseSchemaTypeCompanyFailedSyncHrDirectManagers                          IntegrationAuditLogResponseSchemaType = "company.failed.sync.hr.directManagers"
	IntegrationAuditLogResponseSchemaTypeCompanyPolicyPermissionsUpdated                            IntegrationAuditLogResponseSchemaType = "company.policy.permissions.updated"
	IntegrationAuditLogResponseSchemaTypeCompanyPolicyUserMissingActors                             IntegrationAuditLogResponseSchemaType = "company.policy.user.missingActors"
	IntegrationAuditLogResponseSchemaTypeCompanySyncDirectoriesGroups                               IntegrationAuditLogResponseSchemaType = "company.sync.directories.groups"
	IntegrationAuditLogResponseSchemaTypeCompanySyncDirectoriesUsers                                IntegrationAuditLogResponseSchemaType = "company.sync.directories.users"
	IntegrationAuditLogResponseSchemaTypeCompanySyncHrDirectManagers                                IntegrationAuditLogResponseSchemaType = "company.sync.hr.directManagers"
	IntegrationAuditLogResponseSchemaTypeIntegrationCreated                                         IntegrationAuditLogResponseSchemaType = "integration.created"
	IntegrationAuditLogResponseSchemaTypeIntegrationDeleted                                         IntegrationAuditLogResponseSchemaType = "integration.deleted"
	IntegrationAuditLogResponseSchemaTypeIntegrationFailedAccessGive                                IntegrationAuditLogResponseSchemaType = "integration.failed.access.give"
	IntegrationAuditLogResponseSchemaTypeIntegrationFailedAccessRevoke                              IntegrationAuditLogResponseSchemaType = "integration.failed.access.revoke"
	IntegrationAuditLogResponseSchemaTypeIntegrationFailedSyncActors                                IntegrationAuditLogResponseSchemaType = "integration.failed.sync.actors"
	IntegrationAuditLogResponseSchemaTypeIntegrationFailedSyncAssets                                IntegrationAuditLogResponseSchemaType = "integration.failed.sync.assets"
	IntegrationAuditLogResponseSchemaTypeIntegrationFailedSyncPermissions                           IntegrationAuditLogResponseSchemaType = "integration.failed.sync.permissions"
	IntegrationAuditLogResponseSchemaTypeIntegrationResourceCreatedManually                         IntegrationAuditLogResponseSchemaType = "integrationResource.created.manually"
	IntegrationAuditLogResponseSchemaTypeIntegrationResourceDeletedManually                         IntegrationAuditLogResponseSchemaType = "integrationResource.deleted.manually"
	IntegrationAuditLogResponseSchemaTypeIntegrationResourceRoleCreatedManually                     IntegrationAuditLogResponseSchemaType = "integrationResourceRole.created.manually"
	IntegrationAuditLogResponseSchemaTypeIntegrationResourceRoleDeletedManually                     IntegrationAuditLogResponseSchemaType = "integrationResourceRole.deleted.manually"
	IntegrationAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedAllowedDurations             IntegrationAuditLogResponseSchemaType = "integrationResourceRole.updated.allowedDurations"
	IntegrationAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedAllowsRequests               IntegrationAuditLogResponseSchemaType = "integrationResourceRole.updated.allowsRequests"
	IntegrationAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedApprovalAlgorithm            IntegrationAuditLogResponseSchemaType = "integrationResourceRole.updated.approvalAlgorithm"
	IntegrationAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedName                         IntegrationAuditLogResponseSchemaType = "integrationResourceRole.updated.name"
	IntegrationAuditLogResponseSchemaTypeIntegrationResourceUpdatedAllowedDurations                 IntegrationAuditLogResponseSchemaType = "integrationResource.updated.allowedDurations"
	IntegrationAuditLogResponseSchemaTypeIntegrationResourceUpdatedAllowsRequests                   IntegrationAuditLogResponseSchemaType = "integrationResource.updated.allowsRequests"
	IntegrationAuditLogResponseSchemaTypeIntegrationResourceUpdatedApprovalAlgorithm                IntegrationAuditLogResponseSchemaType = "integrationResource.updated.approvalAlgorithm"
	IntegrationAuditLogResponseSchemaTypeIntegrationResourceUpdatedMaintainers                      IntegrationAuditLogResponseSchemaType = "integrationResource.updated.maintainers"
	IntegrationAuditLogResponseSchemaTypeIntegrationResourceUpdatedName                             IntegrationAuditLogResponseSchemaType = "integrationResource.updated.name"
	IntegrationAuditLogResponseSchemaTypeIntegrationResourceUpdatedOwner                            IntegrationAuditLogResponseSchemaType = "integrationResource.updated.owner"
	IntegrationAuditLogResponseSchemaTypeIntegrationResourceUpdatedUserDefinedDescription           IntegrationAuditLogResponseSchemaType = "integrationResource.updated.userDefinedDescription"
	IntegrationAuditLogResponseSchemaTypeIntegrationResourceUpdatedUserDefinedTags                  IntegrationAuditLogResponseSchemaType = "integrationResource.updated.userDefinedTags"
	IntegrationAuditLogResponseSchemaTypeIntegrationSyncActors                                      IntegrationAuditLogResponseSchemaType = "integration.sync.actors"
	IntegrationAuditLogResponseSchemaTypeIntegrationSyncAssets                                      IntegrationAuditLogResponseSchemaType = "integration.sync.assets"
	IntegrationAuditLogResponseSchemaTypeIntegrationSyncPermissions                                 IntegrationAuditLogResponseSchemaType = "integration.sync.permissions"
	IntegrationAuditLogResponseSchemaTypeIntegrationUpdatedAllowedDurations                         IntegrationAuditLogResponseSchemaType = "integration.updated.allowedDurations"
	IntegrationAuditLogResponseSchemaTypeIntegrationUpdatedAllowsRequests                           IntegrationAuditLogResponseSchemaType = "integration.updated.allowsRequests"
	IntegrationAuditLogResponseSchemaTypeIntegrationUpdatedApprovalAlgorithm                        IntegrationAuditLogResponseSchemaType = "integration.updated.approvalAlgorithm"
	IntegrationAuditLogResponseSchemaTypeIntegrationUpdatedAutoAssignRecommendedResourceMaintainers IntegrationAuditLogResponseSchemaType = "integration.updated.autoAssignRecommendedResourceMaintainers"
	IntegrationAuditLogResponseSchemaTypeIntegrationUpdatedAutoAssignRecommendedResourceOwner       IntegrationAuditLogResponseSchemaType = "integration.updated.autoAssignRecommendedResourceOwner"
	IntegrationAuditLogResponseSchemaTypeIntegrationUpdatedCanCreateActors                          IntegrationAuditLogResponseSchemaType = "integration.updated.canCreateActors"
	IntegrationAuditLogResponseSchemaTypeIntegrationUpdatedCanEditPermissions                       IntegrationAuditLogResponseSchemaType = "integration.updated.canEditPermissions"
	IntegrationAuditLogResponseSchemaTypeIntegrationUpdatedConfiguration                            IntegrationAuditLogResponseSchemaType = "integration.updated.configuration"
	IntegrationAuditLogResponseSchemaTypeIntegrationUpdatedDefaultAllowsRequests                    IntegrationAuditLogResponseSchemaType = "integration.updated.defaultAllowsRequests"
	IntegrationAuditLogResponseSchemaTypeIntegrationUpdatedIsVirtual                                IntegrationAuditLogResponseSchemaType = "integration.updated.isVirtual"
	IntegrationAuditLogResponseSchemaTypeIntegrationUpdatedMaintainers                              IntegrationAuditLogResponseSchemaType = "integration.updated.maintainers"
	IntegrationAuditLogResponseSchemaTypeIntegrationUpdatedName                                     IntegrationAuditLogResponseSchemaType = "integration.updated.name"
	IntegrationAuditLogResponseSchemaTypeIntegrationUpdatedNotifyAboutExternalPermissions           IntegrationAuditLogResponseSchemaType = "integration.updated.notifyAboutExternalPermissions"
	IntegrationAuditLogResponseSchemaTypeIntegrationUpdatedOwner                                    IntegrationAuditLogResponseSchemaType = "integration.updated.owner"
	IntegrationAuditLogResponseSchemaTypeIntegrationUpdatedReadonly                                 IntegrationAuditLogResponseSchemaType = "integration.updated.readonly"
	IntegrationAuditLogResponseSchemaTypeIntegrationUpdatedRestoreImage                             IntegrationAuditLogResponseSchemaType = "integration.updated.restoreImage"
	IntegrationAuditLogResponseSchemaTypePolicyCreated                                              IntegrationAuditLogResponseSchemaType = "policy.created"
	IntegrationAuditLogResponseSchemaTypePolicyDeleted                                              IntegrationAuditLogResponseSchemaType = "policy.deleted"
	IntegrationAuditLogResponseSchemaTypePolicyUpdatedData                                          IntegrationAuditLogResponseSchemaType = "policy.updated.data"
	IntegrationAuditLogResponseSchemaTypePolicyUpdatedSortOrder                                     IntegrationAuditLogResponseSchemaType = "policy.updated.sortOrder"
	IntegrationAuditLogResponseSchemaTypeTicketAutomaticApproval                                    IntegrationAuditLogResponseSchemaType = "ticket.automaticApproval"
	IntegrationAuditLogResponseSchemaTypeTicketCreated                                              IntegrationAuditLogResponseSchemaType = "ticket.created"
	IntegrationAuditLogResponseSchemaTypeTicketDeleted                                              IntegrationAuditLogResponseSchemaType = "ticket.deleted"
	IntegrationAuditLogResponseSchemaTypeTicketFailedGrant                                          IntegrationAuditLogResponseSchemaType = "ticket.failed.grant"
	IntegrationAuditLogResponseSchemaTypeTicketFailedRevoke                                         IntegrationAuditLogResponseSchemaType = "ticket.failed.revoke"
	IntegrationAuditLogResponseSchemaTypeTicketFinalApproved                                        IntegrationAuditLogResponseSchemaType = "ticket.finalApproved"
	IntegrationAuditLogResponseSchemaTypeTicketGranted                                              IntegrationAuditLogResponseSchemaType = "ticket.granted"
	IntegrationAuditLogResponseSchemaTypeTicketPassedStage                                          IntegrationAuditLogResponseSchemaType = "ticket.passedStage"
	IntegrationAuditLogResponseSchemaTypeTicketPermissionAlreadyExist                               IntegrationAuditLogResponseSchemaType = "ticket.permissionAlreadyExist"
	IntegrationAuditLogResponseSchemaTypeTicketPermissionReverted                                   IntegrationAuditLogResponseSchemaType = "ticket.permissionReverted"
	IntegrationAuditLogResponseSchemaTypeTicketPermissionWontRevoke                                 IntegrationAuditLogResponseSchemaType = "ticket.permissionWontRevoke"
	IntegrationAuditLogResponseSchemaTypeTicketRedirectEmptyGroup                                   IntegrationAuditLogResponseSchemaType = "ticket.redirect.emptyGroup"
	IntegrationAuditLogResponseSchemaTypeTicketRedirectForward                                      IntegrationAuditLogResponseSchemaType = "ticket.redirect.forward"
	IntegrationAuditLogResponseSchemaTypeTicketRedirectNoManagers                                   IntegrationAuditLogResponseSchemaType = "ticket.redirect.noManagers"
	IntegrationAuditLogResponseSchemaTypeTicketRedirectNoTeamMembers                                IntegrationAuditLogResponseSchemaType = "ticket.redirect.noTeamMembers"
	IntegrationAuditLogResponseSchemaTypeTicketRedirectToUser                                       IntegrationAuditLogResponseSchemaType = "ticket.redirect.toUser"
	IntegrationAuditLogResponseSchemaTypeTicketRetryGrant                                           IntegrationAuditLogResponseSchemaType = "ticket.retry.grant"
	IntegrationAuditLogResponseSchemaTypeTicketRetryRevoke                                          IntegrationAuditLogResponseSchemaType = "ticket.retry.revoke"
	IntegrationAuditLogResponseSchemaTypeTicketRevoked                                              IntegrationAuditLogResponseSchemaType = "ticket.revoked"
	IntegrationAuditLogResponseSchemaTypeTicketSentGrant                                            IntegrationAuditLogResponseSchemaType = "ticket.sent.grant"
	IntegrationAuditLogResponseSchemaTypeTicketSentRevert                                           IntegrationAuditLogResponseSchemaType = "ticket.sent.revert"
	IntegrationAuditLogResponseSchemaTypeTicketSentRevoke                                           IntegrationAuditLogResponseSchemaType = "ticket.sent.revoke"
	IntegrationAuditLogResponseSchemaTypeTicketStatusChanged                                        IntegrationAuditLogResponseSchemaType = "ticket.statusChanged"
	IntegrationAuditLogResponseSchemaTypeTicketTaskCreated                                          IntegrationAuditLogResponseSchemaType = "ticket.taskCreated"
	IntegrationAuditLogResponseSchemaTypeTicketUserApproved                                         IntegrationAuditLogResponseSchemaType = "ticket.userApproved"
	IntegrationAuditLogResponseSchemaTypeTicketUserDeclined                                         IntegrationAuditLogResponseSchemaType = "ticket.userDeclined"
)

// Defines values for IntegrationResourceAuditLogResponseSchemaType.
const (
	IntegrationResourceAuditLogResponseSchemaTypeAccessReviewActivated                                      IntegrationResourceAuditLogResponseSchemaType = "accessReview.activated"
	IntegrationResourceAuditLogResponseSchemaTypeAccessReviewCreated                                        IntegrationResourceAuditLogResponseSchemaType = "accessReview.created"
	IntegrationResourceAuditLogResponseSchemaTypeAccessReviewDeleted                                        IntegrationResourceAuditLogResponseSchemaType = "accessReview.deleted"
	IntegrationResourceAuditLogResponseSchemaTypeAccessReviewDone                                           IntegrationResourceAuditLogResponseSchemaType = "accessReview.done"
	IntegrationResourceAuditLogResponseSchemaTypeAccessReviewUpdated                                        IntegrationResourceAuditLogResponseSchemaType = "accessReview.updated"
	IntegrationResourceAuditLogResponseSchemaTypeApprovalAlgorithmCreated                                   IntegrationResourceAuditLogResponseSchemaType = "approvalAlgorithm.created"
	IntegrationResourceAuditLogResponseSchemaTypeApprovalAlgorithmDeleted                                   IntegrationResourceAuditLogResponseSchemaType = "approvalAlgorithm.deleted"
	IntegrationResourceAuditLogResponseSchemaTypeApprovalAlgorithmUpdated                                   IntegrationResourceAuditLogResponseSchemaType = "approvalAlgorithm.updated"
	IntegrationResourceAuditLogResponseSchemaTypeBundleCreated                                              IntegrationResourceAuditLogResponseSchemaType = "bundle.created"
	IntegrationResourceAuditLogResponseSchemaTypeBundleDeleted                                              IntegrationResourceAuditLogResponseSchemaType = "bundle.deleted"
	IntegrationResourceAuditLogResponseSchemaTypeBundleUpdated                                              IntegrationResourceAuditLogResponseSchemaType = "bundle.updated"
	IntegrationResourceAuditLogResponseSchemaTypeCompanyFailedSyncDirectoriesGroups                         IntegrationResourceAuditLogResponseSchemaType = "company.failed.sync.directories.groups"
	IntegrationResourceAuditLogResponseSchemaTypeCompanyFailedSyncDirectoriesUsers                          IntegrationResourceAuditLogResponseSchemaType = "company.failed.sync.directories.users"
	IntegrationResourceAuditLogResponseSchemaTypeCompanyFailedSyncHrDirectManagers                          IntegrationResourceAuditLogResponseSchemaType = "company.failed.sync.hr.directManagers"
	IntegrationResourceAuditLogResponseSchemaTypeCompanyPolicyPermissionsUpdated                            IntegrationResourceAuditLogResponseSchemaType = "company.policy.permissions.updated"
	IntegrationResourceAuditLogResponseSchemaTypeCompanyPolicyUserMissingActors                             IntegrationResourceAuditLogResponseSchemaType = "company.policy.user.missingActors"
	IntegrationResourceAuditLogResponseSchemaTypeCompanySyncDirectoriesGroups                               IntegrationResourceAuditLogResponseSchemaType = "company.sync.directories.groups"
	IntegrationResourceAuditLogResponseSchemaTypeCompanySyncDirectoriesUsers                                IntegrationResourceAuditLogResponseSchemaType = "company.sync.directories.users"
	IntegrationResourceAuditLogResponseSchemaTypeCompanySyncHrDirectManagers                                IntegrationResourceAuditLogResponseSchemaType = "company.sync.hr.directManagers"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationCreated                                         IntegrationResourceAuditLogResponseSchemaType = "integration.created"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationDeleted                                         IntegrationResourceAuditLogResponseSchemaType = "integration.deleted"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationFailedAccessGive                                IntegrationResourceAuditLogResponseSchemaType = "integration.failed.access.give"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationFailedAccessRevoke                              IntegrationResourceAuditLogResponseSchemaType = "integration.failed.access.revoke"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationFailedSyncActors                                IntegrationResourceAuditLogResponseSchemaType = "integration.failed.sync.actors"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationFailedSyncAssets                                IntegrationResourceAuditLogResponseSchemaType = "integration.failed.sync.assets"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationFailedSyncPermissions                           IntegrationResourceAuditLogResponseSchemaType = "integration.failed.sync.permissions"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationResourceCreatedManually                         IntegrationResourceAuditLogResponseSchemaType = "integrationResource.created.manually"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationResourceDeletedManually                         IntegrationResourceAuditLogResponseSchemaType = "integrationResource.deleted.manually"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationResourceRoleCreatedManually                     IntegrationResourceAuditLogResponseSchemaType = "integrationResourceRole.created.manually"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationResourceRoleDeletedManually                     IntegrationResourceAuditLogResponseSchemaType = "integrationResourceRole.deleted.manually"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedAllowedDurations             IntegrationResourceAuditLogResponseSchemaType = "integrationResourceRole.updated.allowedDurations"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedAllowsRequests               IntegrationResourceAuditLogResponseSchemaType = "integrationResourceRole.updated.allowsRequests"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedApprovalAlgorithm            IntegrationResourceAuditLogResponseSchemaType = "integrationResourceRole.updated.approvalAlgorithm"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedName                         IntegrationResourceAuditLogResponseSchemaType = "integrationResourceRole.updated.name"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationResourceUpdatedAllowedDurations                 IntegrationResourceAuditLogResponseSchemaType = "integrationResource.updated.allowedDurations"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationResourceUpdatedAllowsRequests                   IntegrationResourceAuditLogResponseSchemaType = "integrationResource.updated.allowsRequests"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationResourceUpdatedApprovalAlgorithm                IntegrationResourceAuditLogResponseSchemaType = "integrationResource.updated.approvalAlgorithm"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationResourceUpdatedMaintainers                      IntegrationResourceAuditLogResponseSchemaType = "integrationResource.updated.maintainers"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationResourceUpdatedName                             IntegrationResourceAuditLogResponseSchemaType = "integrationResource.updated.name"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationResourceUpdatedOwner                            IntegrationResourceAuditLogResponseSchemaType = "integrationResource.updated.owner"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationResourceUpdatedUserDefinedDescription           IntegrationResourceAuditLogResponseSchemaType = "integrationResource.updated.userDefinedDescription"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationResourceUpdatedUserDefinedTags                  IntegrationResourceAuditLogResponseSchemaType = "integrationResource.updated.userDefinedTags"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationSyncActors                                      IntegrationResourceAuditLogResponseSchemaType = "integration.sync.actors"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationSyncAssets                                      IntegrationResourceAuditLogResponseSchemaType = "integration.sync.assets"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationSyncPermissions                                 IntegrationResourceAuditLogResponseSchemaType = "integration.sync.permissions"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationUpdatedAllowedDurations                         IntegrationResourceAuditLogResponseSchemaType = "integration.updated.allowedDurations"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationUpdatedAllowsRequests                           IntegrationResourceAuditLogResponseSchemaType = "integration.updated.allowsRequests"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationUpdatedApprovalAlgorithm                        IntegrationResourceAuditLogResponseSchemaType = "integration.updated.approvalAlgorithm"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationUpdatedAutoAssignRecommendedResourceMaintainers IntegrationResourceAuditLogResponseSchemaType = "integration.updated.autoAssignRecommendedResourceMaintainers"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationUpdatedAutoAssignRecommendedResourceOwner       IntegrationResourceAuditLogResponseSchemaType = "integration.updated.autoAssignRecommendedResourceOwner"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationUpdatedCanCreateActors                          IntegrationResourceAuditLogResponseSchemaType = "integration.updated.canCreateActors"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationUpdatedCanEditPermissions                       IntegrationResourceAuditLogResponseSchemaType = "integration.updated.canEditPermissions"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationUpdatedConfiguration                            IntegrationResourceAuditLogResponseSchemaType = "integration.updated.configuration"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationUpdatedDefaultAllowsRequests                    IntegrationResourceAuditLogResponseSchemaType = "integration.updated.defaultAllowsRequests"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationUpdatedIsVirtual                                IntegrationResourceAuditLogResponseSchemaType = "integration.updated.isVirtual"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationUpdatedMaintainers                              IntegrationResourceAuditLogResponseSchemaType = "integration.updated.maintainers"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationUpdatedName                                     IntegrationResourceAuditLogResponseSchemaType = "integration.updated.name"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationUpdatedNotifyAboutExternalPermissions           IntegrationResourceAuditLogResponseSchemaType = "integration.updated.notifyAboutExternalPermissions"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationUpdatedOwner                                    IntegrationResourceAuditLogResponseSchemaType = "integration.updated.owner"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationUpdatedReadonly                                 IntegrationResourceAuditLogResponseSchemaType = "integration.updated.readonly"
	IntegrationResourceAuditLogResponseSchemaTypeIntegrationUpdatedRestoreImage                             IntegrationResourceAuditLogResponseSchemaType = "integration.updated.restoreImage"
	IntegrationResourceAuditLogResponseSchemaTypePolicyCreated                                              IntegrationResourceAuditLogResponseSchemaType = "policy.created"
	IntegrationResourceAuditLogResponseSchemaTypePolicyDeleted                                              IntegrationResourceAuditLogResponseSchemaType = "policy.deleted"
	IntegrationResourceAuditLogResponseSchemaTypePolicyUpdatedData                                          IntegrationResourceAuditLogResponseSchemaType = "policy.updated.data"
	IntegrationResourceAuditLogResponseSchemaTypePolicyUpdatedSortOrder                                     IntegrationResourceAuditLogResponseSchemaType = "policy.updated.sortOrder"
	IntegrationResourceAuditLogResponseSchemaTypeTicketAutomaticApproval                                    IntegrationResourceAuditLogResponseSchemaType = "ticket.automaticApproval"
	IntegrationResourceAuditLogResponseSchemaTypeTicketCreated                                              IntegrationResourceAuditLogResponseSchemaType = "ticket.created"
	IntegrationResourceAuditLogResponseSchemaTypeTicketDeleted                                              IntegrationResourceAuditLogResponseSchemaType = "ticket.deleted"
	IntegrationResourceAuditLogResponseSchemaTypeTicketFailedGrant                                          IntegrationResourceAuditLogResponseSchemaType = "ticket.failed.grant"
	IntegrationResourceAuditLogResponseSchemaTypeTicketFailedRevoke                                         IntegrationResourceAuditLogResponseSchemaType = "ticket.failed.revoke"
	IntegrationResourceAuditLogResponseSchemaTypeTicketFinalApproved                                        IntegrationResourceAuditLogResponseSchemaType = "ticket.finalApproved"
	IntegrationResourceAuditLogResponseSchemaTypeTicketGranted                                              IntegrationResourceAuditLogResponseSchemaType = "ticket.granted"
	IntegrationResourceAuditLogResponseSchemaTypeTicketPassedStage                                          IntegrationResourceAuditLogResponseSchemaType = "ticket.passedStage"
	IntegrationResourceAuditLogResponseSchemaTypeTicketPermissionAlreadyExist                               IntegrationResourceAuditLogResponseSchemaType = "ticket.permissionAlreadyExist"
	IntegrationResourceAuditLogResponseSchemaTypeTicketPermissionReverted                                   IntegrationResourceAuditLogResponseSchemaType = "ticket.permissionReverted"
	IntegrationResourceAuditLogResponseSchemaTypeTicketPermissionWontRevoke                                 IntegrationResourceAuditLogResponseSchemaType = "ticket.permissionWontRevoke"
	IntegrationResourceAuditLogResponseSchemaTypeTicketRedirectEmptyGroup                                   IntegrationResourceAuditLogResponseSchemaType = "ticket.redirect.emptyGroup"
	IntegrationResourceAuditLogResponseSchemaTypeTicketRedirectForward                                      IntegrationResourceAuditLogResponseSchemaType = "ticket.redirect.forward"
	IntegrationResourceAuditLogResponseSchemaTypeTicketRedirectNoManagers                                   IntegrationResourceAuditLogResponseSchemaType = "ticket.redirect.noManagers"
	IntegrationResourceAuditLogResponseSchemaTypeTicketRedirectNoTeamMembers                                IntegrationResourceAuditLogResponseSchemaType = "ticket.redirect.noTeamMembers"
	IntegrationResourceAuditLogResponseSchemaTypeTicketRedirectToUser                                       IntegrationResourceAuditLogResponseSchemaType = "ticket.redirect.toUser"
	IntegrationResourceAuditLogResponseSchemaTypeTicketRetryGrant                                           IntegrationResourceAuditLogResponseSchemaType = "ticket.retry.grant"
	IntegrationResourceAuditLogResponseSchemaTypeTicketRetryRevoke                                          IntegrationResourceAuditLogResponseSchemaType = "ticket.retry.revoke"
	IntegrationResourceAuditLogResponseSchemaTypeTicketRevoked                                              IntegrationResourceAuditLogResponseSchemaType = "ticket.revoked"
	IntegrationResourceAuditLogResponseSchemaTypeTicketSentGrant                                            IntegrationResourceAuditLogResponseSchemaType = "ticket.sent.grant"
	IntegrationResourceAuditLogResponseSchemaTypeTicketSentRevert                                           IntegrationResourceAuditLogResponseSchemaType = "ticket.sent.revert"
	IntegrationResourceAuditLogResponseSchemaTypeTicketSentRevoke                                           IntegrationResourceAuditLogResponseSchemaType = "ticket.sent.revoke"
	IntegrationResourceAuditLogResponseSchemaTypeTicketStatusChanged                                        IntegrationResourceAuditLogResponseSchemaType = "ticket.statusChanged"
	IntegrationResourceAuditLogResponseSchemaTypeTicketTaskCreated                                          IntegrationResourceAuditLogResponseSchemaType = "ticket.taskCreated"
	IntegrationResourceAuditLogResponseSchemaTypeTicketUserApproved                                         IntegrationResourceAuditLogResponseSchemaType = "ticket.userApproved"
	IntegrationResourceAuditLogResponseSchemaTypeTicketUserDeclined                                         IntegrationResourceAuditLogResponseSchemaType = "ticket.userDeclined"
)

// Defines values for IntegrationResourceRoleAuditLogResponseSchemaType.
const (
	IntegrationResourceRoleAuditLogResponseSchemaTypeAccessReviewActivated                                      IntegrationResourceRoleAuditLogResponseSchemaType = "accessReview.activated"
	IntegrationResourceRoleAuditLogResponseSchemaTypeAccessReviewCreated                                        IntegrationResourceRoleAuditLogResponseSchemaType = "accessReview.created"
	IntegrationResourceRoleAuditLogResponseSchemaTypeAccessReviewDeleted                                        IntegrationResourceRoleAuditLogResponseSchemaType = "accessReview.deleted"
	IntegrationResourceRoleAuditLogResponseSchemaTypeAccessReviewDone                                           IntegrationResourceRoleAuditLogResponseSchemaType = "accessReview.done"
	IntegrationResourceRoleAuditLogResponseSchemaTypeAccessReviewUpdated                                        IntegrationResourceRoleAuditLogResponseSchemaType = "accessReview.updated"
	IntegrationResourceRoleAuditLogResponseSchemaTypeApprovalAlgorithmCreated                                   IntegrationResourceRoleAuditLogResponseSchemaType = "approvalAlgorithm.created"
	IntegrationResourceRoleAuditLogResponseSchemaTypeApprovalAlgorithmDeleted                                   IntegrationResourceRoleAuditLogResponseSchemaType = "approvalAlgorithm.deleted"
	IntegrationResourceRoleAuditLogResponseSchemaTypeApprovalAlgorithmUpdated                                   IntegrationResourceRoleAuditLogResponseSchemaType = "approvalAlgorithm.updated"
	IntegrationResourceRoleAuditLogResponseSchemaTypeBundleCreated                                              IntegrationResourceRoleAuditLogResponseSchemaType = "bundle.created"
	IntegrationResourceRoleAuditLogResponseSchemaTypeBundleDeleted                                              IntegrationResourceRoleAuditLogResponseSchemaType = "bundle.deleted"
	IntegrationResourceRoleAuditLogResponseSchemaTypeBundleUpdated                                              IntegrationResourceRoleAuditLogResponseSchemaType = "bundle.updated"
	IntegrationResourceRoleAuditLogResponseSchemaTypeCompanyFailedSyncDirectoriesGroups                         IntegrationResourceRoleAuditLogResponseSchemaType = "company.failed.sync.directories.groups"
	IntegrationResourceRoleAuditLogResponseSchemaTypeCompanyFailedSyncDirectoriesUsers                          IntegrationResourceRoleAuditLogResponseSchemaType = "company.failed.sync.directories.users"
	IntegrationResourceRoleAuditLogResponseSchemaTypeCompanyFailedSyncHrDirectManagers                          IntegrationResourceRoleAuditLogResponseSchemaType = "company.failed.sync.hr.directManagers"
	IntegrationResourceRoleAuditLogResponseSchemaTypeCompanyPolicyPermissionsUpdated                            IntegrationResourceRoleAuditLogResponseSchemaType = "company.policy.permissions.updated"
	IntegrationResourceRoleAuditLogResponseSchemaTypeCompanyPolicyUserMissingActors                             IntegrationResourceRoleAuditLogResponseSchemaType = "company.policy.user.missingActors"
	IntegrationResourceRoleAuditLogResponseSchemaTypeCompanySyncDirectoriesGroups                               IntegrationResourceRoleAuditLogResponseSchemaType = "company.sync.directories.groups"
	IntegrationResourceRoleAuditLogResponseSchemaTypeCompanySyncDirectoriesUsers                                IntegrationResourceRoleAuditLogResponseSchemaType = "company.sync.directories.users"
	IntegrationResourceRoleAuditLogResponseSchemaTypeCompanySyncHrDirectManagers                                IntegrationResourceRoleAuditLogResponseSchemaType = "company.sync.hr.directManagers"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationCreated                                         IntegrationResourceRoleAuditLogResponseSchemaType = "integration.created"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationDeleted                                         IntegrationResourceRoleAuditLogResponseSchemaType = "integration.deleted"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationFailedAccessGive                                IntegrationResourceRoleAuditLogResponseSchemaType = "integration.failed.access.give"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationFailedAccessRevoke                              IntegrationResourceRoleAuditLogResponseSchemaType = "integration.failed.access.revoke"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationFailedSyncActors                                IntegrationResourceRoleAuditLogResponseSchemaType = "integration.failed.sync.actors"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationFailedSyncAssets                                IntegrationResourceRoleAuditLogResponseSchemaType = "integration.failed.sync.assets"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationFailedSyncPermissions                           IntegrationResourceRoleAuditLogResponseSchemaType = "integration.failed.sync.permissions"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationResourceCreatedManually                         IntegrationResourceRoleAuditLogResponseSchemaType = "integrationResource.created.manually"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationResourceDeletedManually                         IntegrationResourceRoleAuditLogResponseSchemaType = "integrationResource.deleted.manually"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationResourceRoleCreatedManually                     IntegrationResourceRoleAuditLogResponseSchemaType = "integrationResourceRole.created.manually"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationResourceRoleDeletedManually                     IntegrationResourceRoleAuditLogResponseSchemaType = "integrationResourceRole.deleted.manually"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedAllowedDurations             IntegrationResourceRoleAuditLogResponseSchemaType = "integrationResourceRole.updated.allowedDurations"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedAllowsRequests               IntegrationResourceRoleAuditLogResponseSchemaType = "integrationResourceRole.updated.allowsRequests"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedApprovalAlgorithm            IntegrationResourceRoleAuditLogResponseSchemaType = "integrationResourceRole.updated.approvalAlgorithm"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedName                         IntegrationResourceRoleAuditLogResponseSchemaType = "integrationResourceRole.updated.name"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationResourceUpdatedAllowedDurations                 IntegrationResourceRoleAuditLogResponseSchemaType = "integrationResource.updated.allowedDurations"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationResourceUpdatedAllowsRequests                   IntegrationResourceRoleAuditLogResponseSchemaType = "integrationResource.updated.allowsRequests"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationResourceUpdatedApprovalAlgorithm                IntegrationResourceRoleAuditLogResponseSchemaType = "integrationResource.updated.approvalAlgorithm"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationResourceUpdatedMaintainers                      IntegrationResourceRoleAuditLogResponseSchemaType = "integrationResource.updated.maintainers"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationResourceUpdatedName                             IntegrationResourceRoleAuditLogResponseSchemaType = "integrationResource.updated.name"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationResourceUpdatedOwner                            IntegrationResourceRoleAuditLogResponseSchemaType = "integrationResource.updated.owner"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationResourceUpdatedUserDefinedDescription           IntegrationResourceRoleAuditLogResponseSchemaType = "integrationResource.updated.userDefinedDescription"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationResourceUpdatedUserDefinedTags                  IntegrationResourceRoleAuditLogResponseSchemaType = "integrationResource.updated.userDefinedTags"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationSyncActors                                      IntegrationResourceRoleAuditLogResponseSchemaType = "integration.sync.actors"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationSyncAssets                                      IntegrationResourceRoleAuditLogResponseSchemaType = "integration.sync.assets"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationSyncPermissions                                 IntegrationResourceRoleAuditLogResponseSchemaType = "integration.sync.permissions"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationUpdatedAllowedDurations                         IntegrationResourceRoleAuditLogResponseSchemaType = "integration.updated.allowedDurations"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationUpdatedAllowsRequests                           IntegrationResourceRoleAuditLogResponseSchemaType = "integration.updated.allowsRequests"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationUpdatedApprovalAlgorithm                        IntegrationResourceRoleAuditLogResponseSchemaType = "integration.updated.approvalAlgorithm"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationUpdatedAutoAssignRecommendedResourceMaintainers IntegrationResourceRoleAuditLogResponseSchemaType = "integration.updated.autoAssignRecommendedResourceMaintainers"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationUpdatedAutoAssignRecommendedResourceOwner       IntegrationResourceRoleAuditLogResponseSchemaType = "integration.updated.autoAssignRecommendedResourceOwner"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationUpdatedCanCreateActors                          IntegrationResourceRoleAuditLogResponseSchemaType = "integration.updated.canCreateActors"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationUpdatedCanEditPermissions                       IntegrationResourceRoleAuditLogResponseSchemaType = "integration.updated.canEditPermissions"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationUpdatedConfiguration                            IntegrationResourceRoleAuditLogResponseSchemaType = "integration.updated.configuration"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationUpdatedDefaultAllowsRequests                    IntegrationResourceRoleAuditLogResponseSchemaType = "integration.updated.defaultAllowsRequests"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationUpdatedIsVirtual                                IntegrationResourceRoleAuditLogResponseSchemaType = "integration.updated.isVirtual"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationUpdatedMaintainers                              IntegrationResourceRoleAuditLogResponseSchemaType = "integration.updated.maintainers"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationUpdatedName                                     IntegrationResourceRoleAuditLogResponseSchemaType = "integration.updated.name"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationUpdatedNotifyAboutExternalPermissions           IntegrationResourceRoleAuditLogResponseSchemaType = "integration.updated.notifyAboutExternalPermissions"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationUpdatedOwner                                    IntegrationResourceRoleAuditLogResponseSchemaType = "integration.updated.owner"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationUpdatedReadonly                                 IntegrationResourceRoleAuditLogResponseSchemaType = "integration.updated.readonly"
	IntegrationResourceRoleAuditLogResponseSchemaTypeIntegrationUpdatedRestoreImage                             IntegrationResourceRoleAuditLogResponseSchemaType = "integration.updated.restoreImage"
	IntegrationResourceRoleAuditLogResponseSchemaTypePolicyCreated                                              IntegrationResourceRoleAuditLogResponseSchemaType = "policy.created"
	IntegrationResourceRoleAuditLogResponseSchemaTypePolicyDeleted                                              IntegrationResourceRoleAuditLogResponseSchemaType = "policy.deleted"
	IntegrationResourceRoleAuditLogResponseSchemaTypePolicyUpdatedData                                          IntegrationResourceRoleAuditLogResponseSchemaType = "policy.updated.data"
	IntegrationResourceRoleAuditLogResponseSchemaTypePolicyUpdatedSortOrder                                     IntegrationResourceRoleAuditLogResponseSchemaType = "policy.updated.sortOrder"
	IntegrationResourceRoleAuditLogResponseSchemaTypeTicketAutomaticApproval                                    IntegrationResourceRoleAuditLogResponseSchemaType = "ticket.automaticApproval"
	IntegrationResourceRoleAuditLogResponseSchemaTypeTicketCreated                                              IntegrationResourceRoleAuditLogResponseSchemaType = "ticket.created"
	IntegrationResourceRoleAuditLogResponseSchemaTypeTicketDeleted                                              IntegrationResourceRoleAuditLogResponseSchemaType = "ticket.deleted"
	IntegrationResourceRoleAuditLogResponseSchemaTypeTicketFailedGrant                                          IntegrationResourceRoleAuditLogResponseSchemaType = "ticket.failed.grant"
	IntegrationResourceRoleAuditLogResponseSchemaTypeTicketFailedRevoke                                         IntegrationResourceRoleAuditLogResponseSchemaType = "ticket.failed.revoke"
	IntegrationResourceRoleAuditLogResponseSchemaTypeTicketFinalApproved                                        IntegrationResourceRoleAuditLogResponseSchemaType = "ticket.finalApproved"
	IntegrationResourceRoleAuditLogResponseSchemaTypeTicketGranted                                              IntegrationResourceRoleAuditLogResponseSchemaType = "ticket.granted"
	IntegrationResourceRoleAuditLogResponseSchemaTypeTicketPassedStage                                          IntegrationResourceRoleAuditLogResponseSchemaType = "ticket.passedStage"
	IntegrationResourceRoleAuditLogResponseSchemaTypeTicketPermissionAlreadyExist                               IntegrationResourceRoleAuditLogResponseSchemaType = "ticket.permissionAlreadyExist"
	IntegrationResourceRoleAuditLogResponseSchemaTypeTicketPermissionReverted                                   IntegrationResourceRoleAuditLogResponseSchemaType = "ticket.permissionReverted"
	IntegrationResourceRoleAuditLogResponseSchemaTypeTicketPermissionWontRevoke                                 IntegrationResourceRoleAuditLogResponseSchemaType = "ticket.permissionWontRevoke"
	IntegrationResourceRoleAuditLogResponseSchemaTypeTicketRedirectEmptyGroup                                   IntegrationResourceRoleAuditLogResponseSchemaType = "ticket.redirect.emptyGroup"
	IntegrationResourceRoleAuditLogResponseSchemaTypeTicketRedirectForward                                      IntegrationResourceRoleAuditLogResponseSchemaType = "ticket.redirect.forward"
	IntegrationResourceRoleAuditLogResponseSchemaTypeTicketRedirectNoManagers                                   IntegrationResourceRoleAuditLogResponseSchemaType = "ticket.redirect.noManagers"
	IntegrationResourceRoleAuditLogResponseSchemaTypeTicketRedirectNoTeamMembers                                IntegrationResourceRoleAuditLogResponseSchemaType = "ticket.redirect.noTeamMembers"
	IntegrationResourceRoleAuditLogResponseSchemaTypeTicketRedirectToUser                                       IntegrationResourceRoleAuditLogResponseSchemaType = "ticket.redirect.toUser"
	IntegrationResourceRoleAuditLogResponseSchemaTypeTicketRetryGrant                                           IntegrationResourceRoleAuditLogResponseSchemaType = "ticket.retry.grant"
	IntegrationResourceRoleAuditLogResponseSchemaTypeTicketRetryRevoke                                          IntegrationResourceRoleAuditLogResponseSchemaType = "ticket.retry.revoke"
	IntegrationResourceRoleAuditLogResponseSchemaTypeTicketRevoked                                              IntegrationResourceRoleAuditLogResponseSchemaType = "ticket.revoked"
	IntegrationResourceRoleAuditLogResponseSchemaTypeTicketSentGrant                                            IntegrationResourceRoleAuditLogResponseSchemaType = "ticket.sent.grant"
	IntegrationResourceRoleAuditLogResponseSchemaTypeTicketSentRevert                                           IntegrationResourceRoleAuditLogResponseSchemaType = "ticket.sent.revert"
	IntegrationResourceRoleAuditLogResponseSchemaTypeTicketSentRevoke                                           IntegrationResourceRoleAuditLogResponseSchemaType = "ticket.sent.revoke"
	IntegrationResourceRoleAuditLogResponseSchemaTypeTicketStatusChanged                                        IntegrationResourceRoleAuditLogResponseSchemaType = "ticket.statusChanged"
	IntegrationResourceRoleAuditLogResponseSchemaTypeTicketTaskCreated                                          IntegrationResourceRoleAuditLogResponseSchemaType = "ticket.taskCreated"
	IntegrationResourceRoleAuditLogResponseSchemaTypeTicketUserApproved                                         IntegrationResourceRoleAuditLogResponseSchemaType = "ticket.userApproved"
	IntegrationResourceRoleAuditLogResponseSchemaTypeTicketUserDeclined                                         IntegrationResourceRoleAuditLogResponseSchemaType = "ticket.userDeclined"
)

// Defines values for PolicyAuditLogResponseSchemaType.
const (
	PolicyAuditLogResponseSchemaTypeAccessReviewActivated                                      PolicyAuditLogResponseSchemaType = "accessReview.activated"
	PolicyAuditLogResponseSchemaTypeAccessReviewCreated                                        PolicyAuditLogResponseSchemaType = "accessReview.created"
	PolicyAuditLogResponseSchemaTypeAccessReviewDeleted                                        PolicyAuditLogResponseSchemaType = "accessReview.deleted"
	PolicyAuditLogResponseSchemaTypeAccessReviewDone                                           PolicyAuditLogResponseSchemaType = "accessReview.done"
	PolicyAuditLogResponseSchemaTypeAccessReviewUpdated                                        PolicyAuditLogResponseSchemaType = "accessReview.updated"
	PolicyAuditLogResponseSchemaTypeApprovalAlgorithmCreated                                   PolicyAuditLogResponseSchemaType = "approvalAlgorithm.created"
	PolicyAuditLogResponseSchemaTypeApprovalAlgorithmDeleted                                   PolicyAuditLogResponseSchemaType = "approvalAlgorithm.deleted"
	PolicyAuditLogResponseSchemaTypeApprovalAlgorithmUpdated                                   PolicyAuditLogResponseSchemaType = "approvalAlgorithm.updated"
	PolicyAuditLogResponseSchemaTypeBundleCreated                                              PolicyAuditLogResponseSchemaType = "bundle.created"
	PolicyAuditLogResponseSchemaTypeBundleDeleted                                              PolicyAuditLogResponseSchemaType = "bundle.deleted"
	PolicyAuditLogResponseSchemaTypeBundleUpdated                                              PolicyAuditLogResponseSchemaType = "bundle.updated"
	PolicyAuditLogResponseSchemaTypeCompanyFailedSyncDirectoriesGroups                         PolicyAuditLogResponseSchemaType = "company.failed.sync.directories.groups"
	PolicyAuditLogResponseSchemaTypeCompanyFailedSyncDirectoriesUsers                          PolicyAuditLogResponseSchemaType = "company.failed.sync.directories.users"
	PolicyAuditLogResponseSchemaTypeCompanyFailedSyncHrDirectManagers                          PolicyAuditLogResponseSchemaType = "company.failed.sync.hr.directManagers"
	PolicyAuditLogResponseSchemaTypeCompanyPolicyPermissionsUpdated                            PolicyAuditLogResponseSchemaType = "company.policy.permissions.updated"
	PolicyAuditLogResponseSchemaTypeCompanyPolicyUserMissingActors                             PolicyAuditLogResponseSchemaType = "company.policy.user.missingActors"
	PolicyAuditLogResponseSchemaTypeCompanySyncDirectoriesGroups                               PolicyAuditLogResponseSchemaType = "company.sync.directories.groups"
	PolicyAuditLogResponseSchemaTypeCompanySyncDirectoriesUsers                                PolicyAuditLogResponseSchemaType = "company.sync.directories.users"
	PolicyAuditLogResponseSchemaTypeCompanySyncHrDirectManagers                                PolicyAuditLogResponseSchemaType = "company.sync.hr.directManagers"
	PolicyAuditLogResponseSchemaTypeIntegrationCreated                                         PolicyAuditLogResponseSchemaType = "integration.created"
	PolicyAuditLogResponseSchemaTypeIntegrationDeleted                                         PolicyAuditLogResponseSchemaType = "integration.deleted"
	PolicyAuditLogResponseSchemaTypeIntegrationFailedAccessGive                                PolicyAuditLogResponseSchemaType = "integration.failed.access.give"
	PolicyAuditLogResponseSchemaTypeIntegrationFailedAccessRevoke                              PolicyAuditLogResponseSchemaType = "integration.failed.access.revoke"
	PolicyAuditLogResponseSchemaTypeIntegrationFailedSyncActors                                PolicyAuditLogResponseSchemaType = "integration.failed.sync.actors"
	PolicyAuditLogResponseSchemaTypeIntegrationFailedSyncAssets                                PolicyAuditLogResponseSchemaType = "integration.failed.sync.assets"
	PolicyAuditLogResponseSchemaTypeIntegrationFailedSyncPermissions                           PolicyAuditLogResponseSchemaType = "integration.failed.sync.permissions"
	PolicyAuditLogResponseSchemaTypeIntegrationResourceCreatedManually                         PolicyAuditLogResponseSchemaType = "integrationResource.created.manually"
	PolicyAuditLogResponseSchemaTypeIntegrationResourceDeletedManually                         PolicyAuditLogResponseSchemaType = "integrationResource.deleted.manually"
	PolicyAuditLogResponseSchemaTypeIntegrationResourceRoleCreatedManually                     PolicyAuditLogResponseSchemaType = "integrationResourceRole.created.manually"
	PolicyAuditLogResponseSchemaTypeIntegrationResourceRoleDeletedManually                     PolicyAuditLogResponseSchemaType = "integrationResourceRole.deleted.manually"
	PolicyAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedAllowedDurations             PolicyAuditLogResponseSchemaType = "integrationResourceRole.updated.allowedDurations"
	PolicyAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedAllowsRequests               PolicyAuditLogResponseSchemaType = "integrationResourceRole.updated.allowsRequests"
	PolicyAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedApprovalAlgorithm            PolicyAuditLogResponseSchemaType = "integrationResourceRole.updated.approvalAlgorithm"
	PolicyAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedName                         PolicyAuditLogResponseSchemaType = "integrationResourceRole.updated.name"
	PolicyAuditLogResponseSchemaTypeIntegrationResourceUpdatedAllowedDurations                 PolicyAuditLogResponseSchemaType = "integrationResource.updated.allowedDurations"
	PolicyAuditLogResponseSchemaTypeIntegrationResourceUpdatedAllowsRequests                   PolicyAuditLogResponseSchemaType = "integrationResource.updated.allowsRequests"
	PolicyAuditLogResponseSchemaTypeIntegrationResourceUpdatedApprovalAlgorithm                PolicyAuditLogResponseSchemaType = "integrationResource.updated.approvalAlgorithm"
	PolicyAuditLogResponseSchemaTypeIntegrationResourceUpdatedMaintainers                      PolicyAuditLogResponseSchemaType = "integrationResource.updated.maintainers"
	PolicyAuditLogResponseSchemaTypeIntegrationResourceUpdatedName                             PolicyAuditLogResponseSchemaType = "integrationResource.updated.name"
	PolicyAuditLogResponseSchemaTypeIntegrationResourceUpdatedOwner                            PolicyAuditLogResponseSchemaType = "integrationResource.updated.owner"
	PolicyAuditLogResponseSchemaTypeIntegrationResourceUpdatedUserDefinedDescription           PolicyAuditLogResponseSchemaType = "integrationResource.updated.userDefinedDescription"
	PolicyAuditLogResponseSchemaTypeIntegrationResourceUpdatedUserDefinedTags                  PolicyAuditLogResponseSchemaType = "integrationResource.updated.userDefinedTags"
	PolicyAuditLogResponseSchemaTypeIntegrationSyncActors                                      PolicyAuditLogResponseSchemaType = "integration.sync.actors"
	PolicyAuditLogResponseSchemaTypeIntegrationSyncAssets                                      PolicyAuditLogResponseSchemaType = "integration.sync.assets"
	PolicyAuditLogResponseSchemaTypeIntegrationSyncPermissions                                 PolicyAuditLogResponseSchemaType = "integration.sync.permissions"
	PolicyAuditLogResponseSchemaTypeIntegrationUpdatedAllowedDurations                         PolicyAuditLogResponseSchemaType = "integration.updated.allowedDurations"
	PolicyAuditLogResponseSchemaTypeIntegrationUpdatedAllowsRequests                           PolicyAuditLogResponseSchemaType = "integration.updated.allowsRequests"
	PolicyAuditLogResponseSchemaTypeIntegrationUpdatedApprovalAlgorithm                        PolicyAuditLogResponseSchemaType = "integration.updated.approvalAlgorithm"
	PolicyAuditLogResponseSchemaTypeIntegrationUpdatedAutoAssignRecommendedResourceMaintainers PolicyAuditLogResponseSchemaType = "integration.updated.autoAssignRecommendedResourceMaintainers"
	PolicyAuditLogResponseSchemaTypeIntegrationUpdatedAutoAssignRecommendedResourceOwner       PolicyAuditLogResponseSchemaType = "integration.updated.autoAssignRecommendedResourceOwner"
	PolicyAuditLogResponseSchemaTypeIntegrationUpdatedCanCreateActors                          PolicyAuditLogResponseSchemaType = "integration.updated.canCreateActors"
	PolicyAuditLogResponseSchemaTypeIntegrationUpdatedCanEditPermissions                       PolicyAuditLogResponseSchemaType = "integration.updated.canEditPermissions"
	PolicyAuditLogResponseSchemaTypeIntegrationUpdatedConfiguration                            PolicyAuditLogResponseSchemaType = "integration.updated.configuration"
	PolicyAuditLogResponseSchemaTypeIntegrationUpdatedDefaultAllowsRequests                    PolicyAuditLogResponseSchemaType = "integration.updated.defaultAllowsRequests"
	PolicyAuditLogResponseSchemaTypeIntegrationUpdatedIsVirtual                                PolicyAuditLogResponseSchemaType = "integration.updated.isVirtual"
	PolicyAuditLogResponseSchemaTypeIntegrationUpdatedMaintainers                              PolicyAuditLogResponseSchemaType = "integration.updated.maintainers"
	PolicyAuditLogResponseSchemaTypeIntegrationUpdatedName                                     PolicyAuditLogResponseSchemaType = "integration.updated.name"
	PolicyAuditLogResponseSchemaTypeIntegrationUpdatedNotifyAboutExternalPermissions           PolicyAuditLogResponseSchemaType = "integration.updated.notifyAboutExternalPermissions"
	PolicyAuditLogResponseSchemaTypeIntegrationUpdatedOwner                                    PolicyAuditLogResponseSchemaType = "integration.updated.owner"
	PolicyAuditLogResponseSchemaTypeIntegrationUpdatedReadonly                                 PolicyAuditLogResponseSchemaType = "integration.updated.readonly"
	PolicyAuditLogResponseSchemaTypeIntegrationUpdatedRestoreImage                             PolicyAuditLogResponseSchemaType = "integration.updated.restoreImage"
	PolicyAuditLogResponseSchemaTypePolicyCreated                                              PolicyAuditLogResponseSchemaType = "policy.created"
	PolicyAuditLogResponseSchemaTypePolicyDeleted                                              PolicyAuditLogResponseSchemaType = "policy.deleted"
	PolicyAuditLogResponseSchemaTypePolicyUpdatedData                                          PolicyAuditLogResponseSchemaType = "policy.updated.data"
	PolicyAuditLogResponseSchemaTypePolicyUpdatedSortOrder                                     PolicyAuditLogResponseSchemaType = "policy.updated.sortOrder"
	PolicyAuditLogResponseSchemaTypeTicketAutomaticApproval                                    PolicyAuditLogResponseSchemaType = "ticket.automaticApproval"
	PolicyAuditLogResponseSchemaTypeTicketCreated                                              PolicyAuditLogResponseSchemaType = "ticket.created"
	PolicyAuditLogResponseSchemaTypeTicketDeleted                                              PolicyAuditLogResponseSchemaType = "ticket.deleted"
	PolicyAuditLogResponseSchemaTypeTicketFailedGrant                                          PolicyAuditLogResponseSchemaType = "ticket.failed.grant"
	PolicyAuditLogResponseSchemaTypeTicketFailedRevoke                                         PolicyAuditLogResponseSchemaType = "ticket.failed.revoke"
	PolicyAuditLogResponseSchemaTypeTicketFinalApproved                                        PolicyAuditLogResponseSchemaType = "ticket.finalApproved"
	PolicyAuditLogResponseSchemaTypeTicketGranted                                              PolicyAuditLogResponseSchemaType = "ticket.granted"
	PolicyAuditLogResponseSchemaTypeTicketPassedStage                                          PolicyAuditLogResponseSchemaType = "ticket.passedStage"
	PolicyAuditLogResponseSchemaTypeTicketPermissionAlreadyExist                               PolicyAuditLogResponseSchemaType = "ticket.permissionAlreadyExist"
	PolicyAuditLogResponseSchemaTypeTicketPermissionReverted                                   PolicyAuditLogResponseSchemaType = "ticket.permissionReverted"
	PolicyAuditLogResponseSchemaTypeTicketPermissionWontRevoke                                 PolicyAuditLogResponseSchemaType = "ticket.permissionWontRevoke"
	PolicyAuditLogResponseSchemaTypeTicketRedirectEmptyGroup                                   PolicyAuditLogResponseSchemaType = "ticket.redirect.emptyGroup"
	PolicyAuditLogResponseSchemaTypeTicketRedirectForward                                      PolicyAuditLogResponseSchemaType = "ticket.redirect.forward"
	PolicyAuditLogResponseSchemaTypeTicketRedirectNoManagers                                   PolicyAuditLogResponseSchemaType = "ticket.redirect.noManagers"
	PolicyAuditLogResponseSchemaTypeTicketRedirectNoTeamMembers                                PolicyAuditLogResponseSchemaType = "ticket.redirect.noTeamMembers"
	PolicyAuditLogResponseSchemaTypeTicketRedirectToUser                                       PolicyAuditLogResponseSchemaType = "ticket.redirect.toUser"
	PolicyAuditLogResponseSchemaTypeTicketRetryGrant                                           PolicyAuditLogResponseSchemaType = "ticket.retry.grant"
	PolicyAuditLogResponseSchemaTypeTicketRetryRevoke                                          PolicyAuditLogResponseSchemaType = "ticket.retry.revoke"
	PolicyAuditLogResponseSchemaTypeTicketRevoked                                              PolicyAuditLogResponseSchemaType = "ticket.revoked"
	PolicyAuditLogResponseSchemaTypeTicketSentGrant                                            PolicyAuditLogResponseSchemaType = "ticket.sent.grant"
	PolicyAuditLogResponseSchemaTypeTicketSentRevert                                           PolicyAuditLogResponseSchemaType = "ticket.sent.revert"
	PolicyAuditLogResponseSchemaTypeTicketSentRevoke                                           PolicyAuditLogResponseSchemaType = "ticket.sent.revoke"
	PolicyAuditLogResponseSchemaTypeTicketStatusChanged                                        PolicyAuditLogResponseSchemaType = "ticket.statusChanged"
	PolicyAuditLogResponseSchemaTypeTicketTaskCreated                                          PolicyAuditLogResponseSchemaType = "ticket.taskCreated"
	PolicyAuditLogResponseSchemaTypeTicketUserApproved                                         PolicyAuditLogResponseSchemaType = "ticket.userApproved"
	PolicyAuditLogResponseSchemaTypeTicketUserDeclined                                         PolicyAuditLogResponseSchemaType = "ticket.userDeclined"
)

// Defines values for TicketAuditLogResponseSchemaType.
const (
	TicketAuditLogResponseSchemaTypeAccessReviewActivated                                      TicketAuditLogResponseSchemaType = "accessReview.activated"
	TicketAuditLogResponseSchemaTypeAccessReviewCreated                                        TicketAuditLogResponseSchemaType = "accessReview.created"
	TicketAuditLogResponseSchemaTypeAccessReviewDeleted                                        TicketAuditLogResponseSchemaType = "accessReview.deleted"
	TicketAuditLogResponseSchemaTypeAccessReviewDone                                           TicketAuditLogResponseSchemaType = "accessReview.done"
	TicketAuditLogResponseSchemaTypeAccessReviewUpdated                                        TicketAuditLogResponseSchemaType = "accessReview.updated"
	TicketAuditLogResponseSchemaTypeApprovalAlgorithmCreated                                   TicketAuditLogResponseSchemaType = "approvalAlgorithm.created"
	TicketAuditLogResponseSchemaTypeApprovalAlgorithmDeleted                                   TicketAuditLogResponseSchemaType = "approvalAlgorithm.deleted"
	TicketAuditLogResponseSchemaTypeApprovalAlgorithmUpdated                                   TicketAuditLogResponseSchemaType = "approvalAlgorithm.updated"
	TicketAuditLogResponseSchemaTypeBundleCreated                                              TicketAuditLogResponseSchemaType = "bundle.created"
	TicketAuditLogResponseSchemaTypeBundleDeleted                                              TicketAuditLogResponseSchemaType = "bundle.deleted"
	TicketAuditLogResponseSchemaTypeBundleUpdated                                              TicketAuditLogResponseSchemaType = "bundle.updated"
	TicketAuditLogResponseSchemaTypeCompanyFailedSyncDirectoriesGroups                         TicketAuditLogResponseSchemaType = "company.failed.sync.directories.groups"
	TicketAuditLogResponseSchemaTypeCompanyFailedSyncDirectoriesUsers                          TicketAuditLogResponseSchemaType = "company.failed.sync.directories.users"
	TicketAuditLogResponseSchemaTypeCompanyFailedSyncHrDirectManagers                          TicketAuditLogResponseSchemaType = "company.failed.sync.hr.directManagers"
	TicketAuditLogResponseSchemaTypeCompanyPolicyPermissionsUpdated                            TicketAuditLogResponseSchemaType = "company.policy.permissions.updated"
	TicketAuditLogResponseSchemaTypeCompanyPolicyUserMissingActors                             TicketAuditLogResponseSchemaType = "company.policy.user.missingActors"
	TicketAuditLogResponseSchemaTypeCompanySyncDirectoriesGroups                               TicketAuditLogResponseSchemaType = "company.sync.directories.groups"
	TicketAuditLogResponseSchemaTypeCompanySyncDirectoriesUsers                                TicketAuditLogResponseSchemaType = "company.sync.directories.users"
	TicketAuditLogResponseSchemaTypeCompanySyncHrDirectManagers                                TicketAuditLogResponseSchemaType = "company.sync.hr.directManagers"
	TicketAuditLogResponseSchemaTypeIntegrationCreated                                         TicketAuditLogResponseSchemaType = "integration.created"
	TicketAuditLogResponseSchemaTypeIntegrationDeleted                                         TicketAuditLogResponseSchemaType = "integration.deleted"
	TicketAuditLogResponseSchemaTypeIntegrationFailedAccessGive                                TicketAuditLogResponseSchemaType = "integration.failed.access.give"
	TicketAuditLogResponseSchemaTypeIntegrationFailedAccessRevoke                              TicketAuditLogResponseSchemaType = "integration.failed.access.revoke"
	TicketAuditLogResponseSchemaTypeIntegrationFailedSyncActors                                TicketAuditLogResponseSchemaType = "integration.failed.sync.actors"
	TicketAuditLogResponseSchemaTypeIntegrationFailedSyncAssets                                TicketAuditLogResponseSchemaType = "integration.failed.sync.assets"
	TicketAuditLogResponseSchemaTypeIntegrationFailedSyncPermissions                           TicketAuditLogResponseSchemaType = "integration.failed.sync.permissions"
	TicketAuditLogResponseSchemaTypeIntegrationResourceCreatedManually                         TicketAuditLogResponseSchemaType = "integrationResource.created.manually"
	TicketAuditLogResponseSchemaTypeIntegrationResourceDeletedManually                         TicketAuditLogResponseSchemaType = "integrationResource.deleted.manually"
	TicketAuditLogResponseSchemaTypeIntegrationResourceRoleCreatedManually                     TicketAuditLogResponseSchemaType = "integrationResourceRole.created.manually"
	TicketAuditLogResponseSchemaTypeIntegrationResourceRoleDeletedManually                     TicketAuditLogResponseSchemaType = "integrationResourceRole.deleted.manually"
	TicketAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedAllowedDurations             TicketAuditLogResponseSchemaType = "integrationResourceRole.updated.allowedDurations"
	TicketAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedAllowsRequests               TicketAuditLogResponseSchemaType = "integrationResourceRole.updated.allowsRequests"
	TicketAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedApprovalAlgorithm            TicketAuditLogResponseSchemaType = "integrationResourceRole.updated.approvalAlgorithm"
	TicketAuditLogResponseSchemaTypeIntegrationResourceRoleUpdatedName                         TicketAuditLogResponseSchemaType = "integrationResourceRole.updated.name"
	TicketAuditLogResponseSchemaTypeIntegrationResourceUpdatedAllowedDurations                 TicketAuditLogResponseSchemaType = "integrationResource.updated.allowedDurations"
	TicketAuditLogResponseSchemaTypeIntegrationResourceUpdatedAllowsRequests                   TicketAuditLogResponseSchemaType = "integrationResource.updated.allowsRequests"
	TicketAuditLogResponseSchemaTypeIntegrationResourceUpdatedApprovalAlgorithm                TicketAuditLogResponseSchemaType = "integrationResource.updated.approvalAlgorithm"
	TicketAuditLogResponseSchemaTypeIntegrationResourceUpdatedMaintainers                      TicketAuditLogResponseSchemaType = "integrationResource.updated.maintainers"
	TicketAuditLogResponseSchemaTypeIntegrationResourceUpdatedName                             TicketAuditLogResponseSchemaType = "integrationResource.updated.name"
	TicketAuditLogResponseSchemaTypeIntegrationResourceUpdatedOwner                            TicketAuditLogResponseSchemaType = "integrationResource.updated.owner"
	TicketAuditLogResponseSchemaTypeIntegrationResourceUpdatedUserDefinedDescription           TicketAuditLogResponseSchemaType = "integrationResource.updated.userDefinedDescription"
	TicketAuditLogResponseSchemaTypeIntegrationResourceUpdatedUserDefinedTags                  TicketAuditLogResponseSchemaType = "integrationResource.updated.userDefinedTags"
	TicketAuditLogResponseSchemaTypeIntegrationSyncActors                                      TicketAuditLogResponseSchemaType = "integration.sync.actors"
	TicketAuditLogResponseSchemaTypeIntegrationSyncAssets                                      TicketAuditLogResponseSchemaType = "integration.sync.assets"
	TicketAuditLogResponseSchemaTypeIntegrationSyncPermissions                                 TicketAuditLogResponseSchemaType = "integration.sync.permissions"
	TicketAuditLogResponseSchemaTypeIntegrationUpdatedAllowedDurations                         TicketAuditLogResponseSchemaType = "integration.updated.allowedDurations"
	TicketAuditLogResponseSchemaTypeIntegrationUpdatedAllowsRequests                           TicketAuditLogResponseSchemaType = "integration.updated.allowsRequests"
	TicketAuditLogResponseSchemaTypeIntegrationUpdatedApprovalAlgorithm                        TicketAuditLogResponseSchemaType = "integration.updated.approvalAlgorithm"
	TicketAuditLogResponseSchemaTypeIntegrationUpdatedAutoAssignRecommendedResourceMaintainers TicketAuditLogResponseSchemaType = "integration.updated.autoAssignRecommendedResourceMaintainers"
	TicketAuditLogResponseSchemaTypeIntegrationUpdatedAutoAssignRecommendedResourceOwner       TicketAuditLogResponseSchemaType = "integration.updated.autoAssignRecommendedResourceOwner"
	TicketAuditLogResponseSchemaTypeIntegrationUpdatedCanCreateActors                          TicketAuditLogResponseSchemaType = "integration.updated.canCreateActors"
	TicketAuditLogResponseSchemaTypeIntegrationUpdatedCanEditPermissions                       TicketAuditLogResponseSchemaType = "integration.updated.canEditPermissions"
	TicketAuditLogResponseSchemaTypeIntegrationUpdatedConfiguration                            TicketAuditLogResponseSchemaType = "integration.updated.configuration"
	TicketAuditLogResponseSchemaTypeIntegrationUpdatedDefaultAllowsRequests                    TicketAuditLogResponseSchemaType = "integration.updated.defaultAllowsRequests"
	TicketAuditLogResponseSchemaTypeIntegrationUpdatedIsVirtual                                TicketAuditLogResponseSchemaType = "integration.updated.isVirtual"
	TicketAuditLogResponseSchemaTypeIntegrationUpdatedMaintainers                              TicketAuditLogResponseSchemaType = "integration.updated.maintainers"
	TicketAuditLogResponseSchemaTypeIntegrationUpdatedName                                     TicketAuditLogResponseSchemaType = "integration.updated.name"
	TicketAuditLogResponseSchemaTypeIntegrationUpdatedNotifyAboutExternalPermissions           TicketAuditLogResponseSchemaType = "integration.updated.notifyAboutExternalPermissions"
	TicketAuditLogResponseSchemaTypeIntegrationUpdatedOwner                                    TicketAuditLogResponseSchemaType = "integration.updated.owner"
	TicketAuditLogResponseSchemaTypeIntegrationUpdatedReadonly                                 TicketAuditLogResponseSchemaType = "integration.updated.readonly"
	TicketAuditLogResponseSchemaTypeIntegrationUpdatedRestoreImage                             TicketAuditLogResponseSchemaType = "integration.updated.restoreImage"
	TicketAuditLogResponseSchemaTypePolicyCreated                                              TicketAuditLogResponseSchemaType = "policy.created"
	TicketAuditLogResponseSchemaTypePolicyDeleted                                              TicketAuditLogResponseSchemaType = "policy.deleted"
	TicketAuditLogResponseSchemaTypePolicyUpdatedData                                          TicketAuditLogResponseSchemaType = "policy.updated.data"
	TicketAuditLogResponseSchemaTypePolicyUpdatedSortOrder                                     TicketAuditLogResponseSchemaType = "policy.updated.sortOrder"
	TicketAuditLogResponseSchemaTypeTicketAutomaticApproval                                    TicketAuditLogResponseSchemaType = "ticket.automaticApproval"
	TicketAuditLogResponseSchemaTypeTicketCreated                                              TicketAuditLogResponseSchemaType = "ticket.created"
	TicketAuditLogResponseSchemaTypeTicketDeleted                                              TicketAuditLogResponseSchemaType = "ticket.deleted"
	TicketAuditLogResponseSchemaTypeTicketFailedGrant                                          TicketAuditLogResponseSchemaType = "ticket.failed.grant"
	TicketAuditLogResponseSchemaTypeTicketFailedRevoke                                         TicketAuditLogResponseSchemaType = "ticket.failed.revoke"
	TicketAuditLogResponseSchemaTypeTicketFinalApproved                                        TicketAuditLogResponseSchemaType = "ticket.finalApproved"
	TicketAuditLogResponseSchemaTypeTicketGranted                                              TicketAuditLogResponseSchemaType = "ticket.granted"
	TicketAuditLogResponseSchemaTypeTicketPassedStage                                          TicketAuditLogResponseSchemaType = "ticket.passedStage"
	TicketAuditLogResponseSchemaTypeTicketPermissionAlreadyExist                               TicketAuditLogResponseSchemaType = "ticket.permissionAlreadyExist"
	TicketAuditLogResponseSchemaTypeTicketPermissionReverted                                   TicketAuditLogResponseSchemaType = "ticket.permissionReverted"
	TicketAuditLogResponseSchemaTypeTicketPermissionWontRevoke                                 TicketAuditLogResponseSchemaType = "ticket.permissionWontRevoke"
	TicketAuditLogResponseSchemaTypeTicketRedirectEmptyGroup                                   TicketAuditLogResponseSchemaType = "ticket.redirect.emptyGroup"
	TicketAuditLogResponseSchemaTypeTicketRedirectForward                                      TicketAuditLogResponseSchemaType = "ticket.redirect.forward"
	TicketAuditLogResponseSchemaTypeTicketRedirectNoManagers                                   TicketAuditLogResponseSchemaType = "ticket.redirect.noManagers"
	TicketAuditLogResponseSchemaTypeTicketRedirectNoTeamMembers                                TicketAuditLogResponseSchemaType = "ticket.redirect.noTeamMembers"
	TicketAuditLogResponseSchemaTypeTicketRedirectToUser                                       TicketAuditLogResponseSchemaType = "ticket.redirect.toUser"
	TicketAuditLogResponseSchemaTypeTicketRetryGrant                                           TicketAuditLogResponseSchemaType = "ticket.retry.grant"
	TicketAuditLogResponseSchemaTypeTicketRetryRevoke                                          TicketAuditLogResponseSchemaType = "ticket.retry.revoke"
	TicketAuditLogResponseSchemaTypeTicketRevoked                                              TicketAuditLogResponseSchemaType = "ticket.revoked"
	TicketAuditLogResponseSchemaTypeTicketSentGrant                                            TicketAuditLogResponseSchemaType = "ticket.sent.grant"
	TicketAuditLogResponseSchemaTypeTicketSentRevert                                           TicketAuditLogResponseSchemaType = "ticket.sent.revert"
	TicketAuditLogResponseSchemaTypeTicketSentRevoke                                           TicketAuditLogResponseSchemaType = "ticket.sent.revoke"
	TicketAuditLogResponseSchemaTypeTicketStatusChanged                                        TicketAuditLogResponseSchemaType = "ticket.statusChanged"
	TicketAuditLogResponseSchemaTypeTicketTaskCreated                                          TicketAuditLogResponseSchemaType = "ticket.taskCreated"
	TicketAuditLogResponseSchemaTypeTicketUserApproved                                         TicketAuditLogResponseSchemaType = "ticket.userApproved"
	TicketAuditLogResponseSchemaTypeTicketUserDeclined                                         TicketAuditLogResponseSchemaType = "ticket.userDeclined"
)

// Defines values for DirectoryGroupsIndexParamsSortOrder.
const (
	DirectoryGroupsIndexParamsSortOrderASC  DirectoryGroupsIndexParamsSortOrder = "ASC"
	DirectoryGroupsIndexParamsSortOrderAsc  DirectoryGroupsIndexParamsSortOrder = "asc"
	DirectoryGroupsIndexParamsSortOrderDESC DirectoryGroupsIndexParamsSortOrder = "DESC"
	DirectoryGroupsIndexParamsSortOrderDesc DirectoryGroupsIndexParamsSortOrder = "desc"
)

// Defines values for PermissionsIndexParamsSortOrder.
const (
	PermissionsIndexParamsSortOrderASC  PermissionsIndexParamsSortOrder = "ASC"
	PermissionsIndexParamsSortOrderAsc  PermissionsIndexParamsSortOrder = "asc"
	PermissionsIndexParamsSortOrderDESC PermissionsIndexParamsSortOrder = "DESC"
	PermissionsIndexParamsSortOrderDesc PermissionsIndexParamsSortOrder = "desc"
)

// AccessRequestApplicationResponseSchema defines model for AccessRequestApplicationResponseSchema.
type AccessRequestApplicationResponseSchema struct {
	// Name The application's name
	Name string `json:"name"`
}

// AccessRequestBaseTargetResponseSchema defines model for AccessRequestBaseTargetResponseSchema.
type AccessRequestBaseTargetResponseSchema struct {
	// Type The target's type
	Type EnumPublicTicketType `json:"type"`
}

// AccessRequestBundleCreateSchema defines model for AccessRequestBundleCreateSchema.
type AccessRequestBundleCreateSchema struct {
	// Id The target bundle's id
	Id string `json:"id"`
}

// AccessRequestBundleTargetCreateSchema defines model for AccessRequestBundleTargetCreateSchema.
type AccessRequestBundleTargetCreateSchema struct {
	// Bundle The target's bundle
	Bundle AccessRequestBundleCreateSchema `json:"bundle"`

	// Type The target's type
	Type EnumPublicTicketType `json:"type"`
}

// AccessRequestBundleTargetResponseSchema defines model for AccessRequestBundleTargetResponseSchema.
type AccessRequestBundleTargetResponseSchema struct {
	// Bundle The target bundle
	Bundle AccessRequestBundleTargetSchema `json:"bundle"`

	// Type The target's type
	Type EnumPublicTicketType `json:"type"`
}

// AccessRequestBundleTargetSchema defines model for AccessRequestBundleTargetSchema.
type AccessRequestBundleTargetSchema struct {
	// Id The bundle's id
	Id string `json:"id"`

	// Name The bundle's name
	Name string `json:"name"`
}

// AccessRequestCreateBodySchema defines model for AccessRequestCreateBodySchema.
type AccessRequestCreateBodySchema struct {
	BehalfOf *UserEntitySchema `json:"behalfOf,omitempty"`

	// Duration The duration of the access requested
	Duration float32 `json:"duration"`

	// Justification The justification for the access request
	Justification string `json:"justification"`

	// Target The target of the access request
	Target AccessRequestCreateBodySchema_Target `json:"target"`
}

// AccessRequestCreateBodySchema_Target The target of the access request
type AccessRequestCreateBodySchema_Target struct {
	union json.RawMessage
}

// AccessRequestIntegrationResponseSchema defines model for AccessRequestIntegrationResponseSchema.
type AccessRequestIntegrationResponseSchema struct {
	// Application The integration's application
	Application AccessRequestApplicationResponseSchema `json:"application"`

	// Id The integration's id
	Id string `json:"id"`

	// Name The integration's name
	Name string `json:"name"`
}

// AccessRequestPublicResultSchema defines model for AccessRequestPublicResultSchema.
type AccessRequestPublicResultSchema struct {
	// BehalfOf The user the access was requested for
	BehalfOf EntityResponseSchema `json:"behalfOf"`

	// Duration The requested duration in seconds (-1 means forever)
	Duration float32 `json:"duration"`

	// Id The access request's id
	Id string `json:"id"`

	// Justification The justification for the access request
	Justification string `json:"justification"`

	// Number The access request's number
	Number float32 `json:"number"`

	// Roles The access request's roles to receive
	Roles []AccessRequestRoleResponseSchema `json:"roles"`

	// Status The access request's status
	Status EnumPublicTicketStatus `json:"status"`

	// Target The access request's target
	Target AccessRequestBaseTargetResponseSchema `json:"target"`

	// User The access request's creator
	User EntityResponseSchema `json:"user"`
}

// AccessRequestResourceResponseSchema defines model for AccessRequestResourceResponseSchema.
type AccessRequestResourceResponseSchema struct {
	// Id The resource's id
	Id string `json:"id"`

	// Integration The resource's integration
	Integration AccessRequestIntegrationResponseSchema `json:"integration"`

	// Name The resource's name
	Name string `json:"name"`
}

// AccessRequestResponseSchema defines model for AccessRequestResponseSchema.
type AccessRequestResponseSchema struct {
	Result []AccessRequestPublicResultSchema `json:"result"`
}

// AccessRequestRoleCreateSchema defines model for AccessRequestRoleCreateSchema.
type AccessRequestRoleCreateSchema struct {
	// Id The target role's id
	Id string `json:"id"`
}

// AccessRequestRoleResponseSchema defines model for AccessRequestRoleResponseSchema.
type AccessRequestRoleResponseSchema struct {
	// Id The role's id
	Id string `json:"id"`

	// IsPrerequisite Was the role added because it is a prerequisite
	IsPrerequisite bool `json:"isPrerequisite"`

	// Name The role's name
	Name string `json:"name"`

	// Resource The role's resource
	Resource AccessRequestResourceResponseSchema `json:"resource"`
}

// AccessRequestRoleTargetCreateSchema defines model for AccessRequestRoleTargetCreateSchema.
type AccessRequestRoleTargetCreateSchema struct {
	// Role The target's role
	Role AccessRequestRoleCreateSchema `json:"role"`

	// Type The target's type
	Type EnumPublicTicketType `json:"type"`
}

// AccessRequestRoleTargetResponseSchema defines model for AccessRequestRoleTargetResponseSchema.
type AccessRequestRoleTargetResponseSchema struct {
	// Role The target role
	Role AccessRequestRoleTargetSchema `json:"role"`

	// Type The target's type
	Type EnumPublicTicketType `json:"type"`
}

// AccessRequestRoleTargetSchema defines model for AccessRequestRoleTargetSchema.
type AccessRequestRoleTargetSchema struct {
	// Id The role's id
	Id string `json:"id"`

	// Name The role's name
	Name string `json:"name"`
}

// AccessReviewAuditLogResponseSchema defines model for AccessReviewAuditLogResponseSchema.
type AccessReviewAuditLogResponseSchema struct {
	// AccessReview Name of the access review
	AccessReview *string `json:"accessReview,omitempty"`

	// CreatedAt Date of the audit log
	CreatedAt time.Time `json:"createdAt"`

	// Type Type of the audit log
	Type AccessReviewAuditLogResponseSchemaType `json:"type"`

	// User User who performed the action
	User *string `json:"user,omitempty"`
}

// AccessReviewAuditLogResponseSchemaType Type of the audit log
type AccessReviewAuditLogResponseSchemaType string

// AccountsApplicationResultSchema defines model for AccountsApplicationResultSchema.
type AccountsApplicationResultSchema struct {
	Name string `json:"name"`
}

// AccountsIntegrationResultSchema defines model for AccountsIntegrationResultSchema.
type AccountsIntegrationResultSchema struct {
	Application AccountsApplicationResultSchema `json:"application"`
	Id          openapi_types.UUID              `json:"id"`
	Name        string                          `json:"name"`
}

// AccountsResultSchema defines model for AccountsResultSchema.
type AccountsResultSchema struct {
	CreatedAt   time.Time                       `json:"createdAt"`
	Email       string                          `json:"email"`
	Euid        string                          `json:"euid"`
	Id          openapi_types.UUID              `json:"id"`
	Integration AccountsIntegrationResultSchema `json:"integration"`
	Name        string                          `json:"name"`
}

// ActorSchema defines model for ActorSchema.
type ActorSchema struct {
	// Name Actor's display name
	Name string `json:"name"`

	// Users Users associated with the actor
	Users []UserSchema `json:"users"`
}

// AgentTokenCreateBodySchema defines model for AgentTokenCreateBodySchema.
type AgentTokenCreateBodySchema struct {
	Name string `json:"name"`
}

// AgentTokenCreateResponseSchema defines model for AgentTokenCreateResponseSchema.
type AgentTokenCreateResponseSchema struct {
	Id    openapi_types.UUID `json:"id"`
	Name  string             `json:"name"`
	Token string             `json:"token"`
}

// AgentTokenDeleteResponseSchema defines model for AgentTokenDeleteResponseSchema.
type AgentTokenDeleteResponseSchema struct {
	Ok bool `json:"ok"`
}

// AgentTokenResponseSchema defines model for AgentTokenResponseSchema.
type AgentTokenResponseSchema struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// AgentTokensListResponseSchema defines model for AgentTokensListResponseSchema.
type AgentTokensListResponseSchema struct {
	Pagination PaginationResponseSchema   `json:"pagination"`
	Result     []AgentTokenResponseSchema `json:"result"`
}

// ApplicationResponseSchema defines model for ApplicationResponseSchema.
type ApplicationResponseSchema struct {
	Name string `json:"name"`
}

// ApprovalAlgorithmAuditLogResponseSchema defines model for ApprovalAlgorithmAuditLogResponseSchema.
type ApprovalAlgorithmAuditLogResponseSchema struct {
	// ApprovalAlgorithm Name of the approval algorithm
	ApprovalAlgorithm *string `json:"approvalAlgorithm,omitempty"`

	// CreatedAt Date of the audit log
	CreatedAt time.Time `json:"createdAt"`

	// Type Type of the audit log
	Type ApprovalAlgorithmAuditLogResponseSchemaType `json:"type"`

	// User User who performed the action
	User *string `json:"user,omitempty"`
}

// ApprovalAlgorithmAuditLogResponseSchemaType Type of the audit log
type ApprovalAlgorithmAuditLogResponseSchemaType string

// ApprovalEntityGroupResponseSchema defines model for ApprovalEntityGroupResponseSchema.
type ApprovalEntityGroupResponseSchema struct {
	Entity GroupEntityResponseSchema             `json:"entity"`
	Type   EnumApprovalEntityGroupDirectoryGroup `json:"type"`
}

// ApprovalEntityGroupSchema defines model for ApprovalEntityGroupSchema.
type ApprovalEntityGroupSchema struct {
	Entity GroupEntitySchema                     `json:"entity"`
	Type   EnumApprovalEntityGroupDirectoryGroup `json:"type"`
}

// ApprovalEntityNullResponseSchema defines model for ApprovalEntityNullResponseSchema.
type ApprovalEntityNullResponseSchema struct {
	Entity *string                         `json:"entity"`
	Type   EnumApprovalEntityWithoutEntity `json:"type"`
}

// ApprovalEntityNullSchema defines model for ApprovalEntityNullSchema.
type ApprovalEntityNullSchema struct {
	Entity *string                         `json:"entity"`
	Type   EnumApprovalEntityWithoutEntity `json:"type"`
}

// ApprovalEntityScheduleResponseSchema defines model for ApprovalEntityScheduleResponseSchema.
type ApprovalEntityScheduleResponseSchema struct {
	Entity GroupEntityResponseSchema                           `json:"entity"`
	Type   EnumApprovalEntityScheduleOnCallIntegrationSchedule `json:"type"`
}

// ApprovalEntityScheduleSchema defines model for ApprovalEntityScheduleSchema.
type ApprovalEntityScheduleSchema struct {
	Entity ScheduleEntitySchema                                `json:"entity"`
	Type   EnumApprovalEntityScheduleOnCallIntegrationSchedule `json:"type"`
}

// ApprovalEntityUserResponseSchema defines model for ApprovalEntityUserResponseSchema.
type ApprovalEntityUserResponseSchema struct {
	Entity UserEntityResponseSchema   `json:"entity"`
	Type   EnumApprovalEntityUserUser `json:"type"`
}

// ApprovalEntityUserSchema defines model for ApprovalEntityUserSchema.
type ApprovalEntityUserSchema struct {
	Entity UserEntitySchema           `json:"entity"`
	Type   EnumApprovalEntityUserUser `json:"type"`
}

// ApprovalFlowSchema defines model for ApprovalFlowSchema.
type ApprovalFlowSchema struct {
	ApprovalEntities []ApprovalFlowSchema_ApprovalEntities_Item `json:"approvalEntities"`
	NotifiedEntities []ApprovalFlowSchema_NotifiedEntities_Item `json:"notifiedEntities"`
	Operator         EnumApprovalFlowOperator                   `json:"operator"`
	SortOrder        float32                                    `json:"sortOrder"`
}

// ApprovalFlowSchema_ApprovalEntities_Item defines model for ApprovalFlowSchema.approvalEntities.Item.
type ApprovalFlowSchema_ApprovalEntities_Item struct {
	union json.RawMessage
}

// ApprovalFlowSchema_NotifiedEntities_Item defines model for ApprovalFlowSchema.notifiedEntities.Item.
type ApprovalFlowSchema_NotifiedEntities_Item struct {
	union json.RawMessage
}

// ApprovalFlowStepResponseSchema defines model for ApprovalFlowStepResponseSchema.
type ApprovalFlowStepResponseSchema struct {
	ApprovalEntities []ApprovalFlowStepResponseSchema_ApprovalEntities_Item `json:"approvalEntities"`
	NotifiedEntities []ApprovalFlowStepResponseSchema_NotifiedEntities_Item `json:"notifiedEntities"`
	Operator         EnumApprovalFlowStepOperator                           `json:"operator"`
	SortOrder        float32                                                `json:"sortOrder"`
}

// ApprovalFlowStepResponseSchema_ApprovalEntities_Item defines model for ApprovalFlowStepResponseSchema.approvalEntities.Item.
type ApprovalFlowStepResponseSchema_ApprovalEntities_Item struct {
	union json.RawMessage
}

// ApprovalFlowStepResponseSchema_NotifiedEntities_Item defines model for ApprovalFlowStepResponseSchema.notifiedEntities.Item.
type ApprovalFlowStepResponseSchema_NotifiedEntities_Item struct {
	union json.RawMessage
}

// AuditLogBaseSchema defines model for AuditLogBaseSchema.
type AuditLogBaseSchema struct {
	// CreatedAt Date of the audit log
	CreatedAt time.Time `json:"createdAt"`

	// Type Type of the audit log
	Type AuditLogBaseSchemaType `json:"type"`

	// User User who performed the action
	User *string `json:"user,omitempty"`
}

// AuditLogBaseSchemaType Type of the audit log
type AuditLogBaseSchemaType string

// AuditLogResponseSchema defines model for AuditLogResponseSchema.
type AuditLogResponseSchema struct {
	Result []AuditLogResponseSchema_Result_Item `json:"result"`
}

// AuditLogResponseSchema_Result_Item defines model for AuditLogResponseSchema.result.Item.
type AuditLogResponseSchema_Result_Item struct {
	union json.RawMessage
}

// AuditLogsBodySchema defines model for AuditLogsBodySchema.
type AuditLogsBodySchema struct {
	MaxDate *openapi_types.Date      `json:"maxDate,omitempty"`
	MinDate openapi_types.Date       `json:"minDate"`
	Type    *[]EnumAuditLogEventType `json:"type,omitempty"`
}

// BundleAuditLogResponseSchema defines model for BundleAuditLogResponseSchema.
type BundleAuditLogResponseSchema struct {
	// Bundle Name of the bundle
	Bundle *string `json:"bundle,omitempty"`

	// CreatedAt Date of the audit log
	CreatedAt time.Time `json:"createdAt"`

	// Type Type of the audit log
	Type BundleAuditLogResponseSchemaType `json:"type"`

	// User User who performed the action
	User *string `json:"user,omitempty"`
}

// BundleAuditLogResponseSchemaType Type of the audit log
type BundleAuditLogResponseSchemaType string

// BundleDestroyResponseSchema defines model for BundleDestroyResponseSchema.
type BundleDestroyResponseSchema struct {
	Ok bool `json:"ok"`
}

// BundleIndexResultResponseSchema defines model for BundleIndexResultResponseSchema.
type BundleIndexResultResponseSchema struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// BundleItemResponseSchema defines model for BundleItemResponseSchema.
type BundleItemResponseSchema struct {
	Id       openapi_types.UUID     `json:"id"`
	Name     string                 `json:"name"`
	Resource ResourceResponseSchema `json:"resource"`
}

// BundleUpdatedBodySchema defines model for BundleUpdatedBodySchema.
type BundleUpdatedBodySchema struct {
	AllowedDurations *[]EnumAllowedDurations `json:"allowedDurations"`
	Category         *string                 `json:"category"`
	Description      *string                 `json:"description"`
	Name             *string                 `json:"name,omitempty"`
	Roles            *[]IdParamsSchema       `json:"roles,omitempty"`
	Tags             *[]string               `json:"tags"`
	Workflow         *IdParamsSchema         `json:"workflow,omitempty"`
}

// BundlesIndexResponseSchema defines model for BundlesIndexResponseSchema.
type BundlesIndexResponseSchema struct {
	Pagination PaginationResponseSchema          `json:"pagination"`
	Result     []BundleIndexResultResponseSchema `json:"result"`
}

// CreateUserAccountAccountSchema defines model for CreateUserAccountAccountSchema.
type CreateUserAccountAccountSchema struct {
	Id string `json:"id"`
}

// CreateUserAccountBodySchema defines model for CreateUserAccountBodySchema.
type CreateUserAccountBodySchema struct {
	Account CreateUserAccountAccountSchema `json:"account"`
	User    CreateUserAccountUserSchema    `json:"user"`
}

// CreateUserAccountUserSchema defines model for CreateUserAccountUserSchema.
type CreateUserAccountUserSchema struct {
	Id string `json:"id"`
}

// DeleteUserAccountResponseSchema defines model for DeleteUserAccountResponseSchema.
type DeleteUserAccountResponseSchema struct {
	Ok bool `json:"ok"`
}

// DirectoryGroupIndexResponseSchema defines model for DirectoryGroupIndexResponseSchema.
type DirectoryGroupIndexResponseSchema struct {
	Pagination PaginationResponseSchema       `json:"pagination"`
	Result     []DirectoryGroupResponseSchema `json:"result"`
}

// DirectoryGroupResponseSchema defines model for DirectoryGroupResponseSchema.
type DirectoryGroupResponseSchema struct {
	Email  string             `json:"email"`
	Id     openapi_types.UUID `json:"id"`
	Name   string             `json:"name"`
	Origin string             `json:"origin"`
}

// EntityResponseSchema defines model for EntityResponseSchema.
type EntityResponseSchema struct {
	Email openapi_types.Email `json:"email"`
	Id    openapi_types.UUID  `json:"id"`
}

// EntitySchema defines model for EntitySchema.
type EntitySchema struct {
	// Name Entity name
	Name string `json:"name"`
}

// EnumAllowedDurations defines model for EnumAllowedDurations.
type EnumAllowedDurations float32

// EnumApprovalEntityGroupDirectoryGroup defines model for EnumApprovalEntityGroup_DirectoryGroup.
type EnumApprovalEntityGroupDirectoryGroup string

// EnumApprovalEntityScheduleOnCallIntegrationSchedule defines model for EnumApprovalEntitySchedule_OnCallIntegrationSchedule.
type EnumApprovalEntityScheduleOnCallIntegrationSchedule string

// EnumApprovalEntityUserUser defines model for EnumApprovalEntityUser_User.
type EnumApprovalEntityUserUser string

// EnumApprovalEntityWithoutEntity defines model for EnumApprovalEntityWithoutEntity.
type EnumApprovalEntityWithoutEntity string

// EnumApprovalFlowOperator defines model for EnumApprovalFlowOperator.
type EnumApprovalFlowOperator string

// EnumApprovalFlowStepOperator defines model for EnumApprovalFlowStepOperator.
type EnumApprovalFlowStepOperator string

// EnumAuditLogEventType Audit log types to search
type EnumAuditLogEventType string

// EnumMaintainerTypeGroup defines model for EnumMaintainerType_Group.
type EnumMaintainerTypeGroup string

// EnumMaintainerTypeUser defines model for EnumMaintainerType_User.
type EnumMaintainerTypeUser string

// EnumNotifiedEntityWithoutEntity defines model for EnumNotifiedEntityWithoutEntity.
type EnumNotifiedEntityWithoutEntity string

// EnumPolicyGroupType defines model for EnumPolicyGroupType.
type EnumPolicyGroupType string

// EnumPublicTicketStatus The access request's status
type EnumPublicTicketStatus string

// EnumPublicTicketType The target's type
type EnumPublicTicketType string

// ForwardCreateSchema defines model for ForwardCreateSchema.
type ForwardCreateSchema struct {
	// Forwarder The origin user
	Forwarder UserEntitySchema `json:"forwarder"`

	// Target The target user
	Target UserEntitySchema `json:"target"`
}

// ForwardDestroyResponseSchema defines model for ForwardDestroyResponseSchema.
type ForwardDestroyResponseSchema struct {
	Ok bool `json:"ok"`
}

// ForwardPublicResponseSchema defines model for ForwardPublicResponseSchema.
type ForwardPublicResponseSchema struct {
	Result []ForwardResponseSchema `json:"result"`
}

// ForwardResponseSchema defines model for ForwardResponseSchema.
type ForwardResponseSchema struct {
	// Forwarder The origin user
	Forwarder EntityResponseSchema `json:"forwarder"`
	Id        openapi_types.UUID   `json:"id"`

	// Target The target user
	Target EntityResponseSchema `json:"target"`
}

// FullBundleResponseSchema defines model for FullBundleResponseSchema.
type FullBundleResponseSchema struct {
	Result []FullBundleResultResponseSchema `json:"result"`
}

// FullBundleResultResponseSchema defines model for FullBundleResultResponseSchema.
type FullBundleResultResponseSchema struct {
	AllowedDurations []EnumAllowedDurations     `json:"allowedDurations"`
	Category         *string                    `json:"category"`
	Description      *string                    `json:"description"`
	Id               openapi_types.UUID         `json:"id"`
	Name             string                     `json:"name"`
	Roles            []BundleItemResponseSchema `json:"roles"`
	Tags             *[]string                  `json:"tags"`
	Workflow         WorkflowResponseSchema     `json:"workflow"`
}

// FullPolicyResponseSchema defines model for FullPolicyResponseSchema.
type FullPolicyResponseSchema struct {
	Result []FullPolicyResultResponseSchema `json:"result"`
}

// FullPolicyResultResponseSchema defines model for FullPolicyResultResponseSchema.
type FullPolicyResultResponseSchema struct {
	Bundles   []PolicyBundleResponseSchema `json:"bundles"`
	Id        openapi_types.UUID           `json:"id"`
	InGroups  []PolicyGroupResponseSchema  `json:"inGroups"`
	Number    float32                      `json:"number"`
	Roles     []PolicyRoleResponseSchema   `json:"roles"`
	SortOrder float32                      `json:"sortOrder"`
}

// FullWorkflowResponseSchema defines model for FullWorkflowResponseSchema.
type FullWorkflowResponseSchema struct {
	Result FullWorkflowResultResponseSchema `json:"result"`
}

// FullWorkflowResultResponseSchema defines model for FullWorkflowResultResponseSchema.
type FullWorkflowResultResponseSchema struct {
	Id    openapi_types.UUID           `json:"id"`
	Name  string                       `json:"name"`
	Rules []WorkflowRuleResponseSchema `json:"rules"`
}

// GetAccountsResponseSchema defines model for GetAccountsResponseSchema.
type GetAccountsResponseSchema struct {
	Pagination PaginationResponseSchema `json:"pagination"`
	Result     []AccountsResultSchema   `json:"result"`
}

// GetUsersAccountsResponseSchema defines model for GetUsersAccountsResponseSchema.
type GetUsersAccountsResponseSchema struct {
	Pagination PaginationResponseSchema  `json:"pagination"`
	Result     []UserAccountResultSchema `json:"result"`
}

// GetUsersResponseSchema defines model for GetUsersResponseSchema.
type GetUsersResponseSchema struct {
	Pagination PaginationResponseSchema `json:"pagination"`
	Result     []UserResultSchema       `json:"result"`
}

// GroupEntityResponseSchema defines model for GroupEntityResponseSchema.
type GroupEntityResponseSchema struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// GroupEntitySchema defines model for GroupEntitySchema.
type GroupEntitySchema struct {
	// Id A unique identifier/email of the group
	Id string `json:"id"`
}

// GroupMaintainerSchema defines model for GroupMaintainerSchema.
type GroupMaintainerSchema struct {
	// Group If type is group, this field is required with a unique id/email
	Group GroupEntitySchema       `json:"group"`
	Type  EnumMaintainerTypeGroup `json:"type"`
}

// IdParamsSchema defines model for IdParamsSchema.
type IdParamsSchema struct {
	Id openapi_types.UUID `json:"id"`
}

// InGroupSchema defines model for InGroupSchema.
type InGroupSchema struct {
	// Id A unique identifier/email of the group
	Id   string              `json:"id"`
	Type EnumPolicyGroupType `json:"type"`
}

// IntegrationAuditLogResponseSchema defines model for IntegrationAuditLogResponseSchema.
type IntegrationAuditLogResponseSchema struct {
	// CreatedAt Date of the audit log
	CreatedAt time.Time `json:"createdAt"`

	// Integration Name of the integration
	Integration *string `json:"integration,omitempty"`

	// Type Type of the audit log
	Type IntegrationAuditLogResponseSchemaType `json:"type"`

	// User User who performed the action
	User *string `json:"user,omitempty"`
}

// IntegrationAuditLogResponseSchemaType Type of the audit log
type IntegrationAuditLogResponseSchemaType string

// IntegrationBaseResponseSchema defines model for IntegrationBaseResponseSchema.
type IntegrationBaseResponseSchema struct {
	Application ApplicationResponseSchema `json:"application"`
	Id          openapi_types.UUID        `json:"id"`
	Name        string                    `json:"name"`
}

// IntegrationCreateBodySchema defines model for IntegrationCreateBodySchema.
type IntegrationCreateBodySchema struct {
	AgentToken                      *NameSchema `json:"agentToken,omitempty"`
	AllowActorsSelfMapping          *bool       `json:"allowActorsSelfMapping,omitempty"`
	AllowChangingAccountPermissions bool        `json:"allowChangingAccountPermissions"`
	AllowCreatingAccounts           bool        `json:"allowCreatingAccounts"`

	// AllowRequests You must provide either requestable & requestableByDefault OR allowRequests & allowRequestsByDefault.
	AllowRequests *bool `json:"allowRequests,omitempty"`

	// AllowRequestsByDefault You must provide either requestable & requestableByDefault OR allowRequests & allowRequestsByDefault.
	AllowRequestsByDefault               *bool                                                         `json:"allowRequestsByDefault,omitempty"`
	AllowedDurations                     *[]EnumAllowedDurations                                       `json:"allowedDurations"`
	Application                          NameSchema                                                    `json:"application"`
	AutoAssignRecommendedMaintainers     bool                                                          `json:"autoAssignRecommendedMaintainers"`
	AutoAssignRecommendedOwners          bool                                                          `json:"autoAssignRecommendedOwners"`
	ConnectionJson                       *map[string]interface{}                                       `json:"connectionJson"`
	DummyRequestableOrAllowsRequests     bool                                                          `json:"dummyRequestableOrAllowsRequests"`
	Maintainers                          *[]IntegrationCreateBodySchema_Maintainers_Item               `json:"maintainers,omitempty"`
	Name                                 string                                                        `json:"name"`
	NotifyAboutExternalPermissionChanges bool                                                          `json:"notifyAboutExternalPermissionChanges"`
	Owner                                UserEntitySchema                                              `json:"owner"`
	PrerequisitePermissions              *[][]IntegrationCreateBodySchema_PrerequisitePermissions_Item `json:"prerequisitePermissions"`
	Readonly                             bool                                                          `json:"readonly"`

	// Requestable You must provide either requestable & requestableByDefault OR allowRequests & allowRequestsByDefault.
	Requestable *bool `json:"requestable,omitempty"`

	// RequestableByDefault You must provide either requestable & requestableByDefault OR allowRequests & allowRequestsByDefault.
	RequestableByDefault *bool          `json:"requestableByDefault,omitempty"`
	Workflow             IdParamsSchema `json:"workflow"`
}

// IntegrationCreateBodySchema_Maintainers_Item defines model for IntegrationCreateBodySchema.maintainers.Item.
type IntegrationCreateBodySchema_Maintainers_Item struct {
	union json.RawMessage
}

// IntegrationCreateBodySchema_PrerequisitePermissions_Item defines model for IntegrationCreateBodySchema.prerequisitePermissions.Item.
type IntegrationCreateBodySchema_PrerequisitePermissions_Item struct {
	union json.RawMessage
}

// IntegrationDestroyResponseSchema defines model for IntegrationDestroyResponseSchema.
type IntegrationDestroyResponseSchema struct {
	Ok bool `json:"ok"`
}

// IntegrationResourceAuditLogResponseSchema defines model for IntegrationResourceAuditLogResponseSchema.
type IntegrationResourceAuditLogResponseSchema struct {
	// CreatedAt Date of the audit log
	CreatedAt time.Time `json:"createdAt"`

	// IntegrationResource Name of the resource
	IntegrationResource *string `json:"integrationResource,omitempty"`

	// Type Type of the audit log
	Type IntegrationResourceAuditLogResponseSchemaType `json:"type"`

	// User User who performed the action
	User *string `json:"user,omitempty"`
}

// IntegrationResourceAuditLogResponseSchemaType Type of the audit log
type IntegrationResourceAuditLogResponseSchemaType string

// IntegrationResourceDestroyResponseSchema defines model for IntegrationResourceDestroyResponseSchema.
type IntegrationResourceDestroyResponseSchema struct {
	Ok bool `json:"ok"`
}

// IntegrationResourceListItemResponseSchema defines model for IntegrationResourceListItemResponseSchema.
type IntegrationResourceListItemResponseSchema struct {
	Id          openapi_types.UUID            `json:"id"`
	Integration IntegrationBaseResponseSchema `json:"integration"`
	Name        string                        `json:"name"`
}

// IntegrationResourceResponseSchema defines model for IntegrationResourceResponseSchema.
type IntegrationResourceResponseSchema struct {
	Result IntegrationResourceResultSchema `json:"result"`
}

// IntegrationResourceResultSchema defines model for IntegrationResourceResultSchema.
type IntegrationResourceResultSchema struct {
	AllowedDurations        []EnumAllowedDurations                                            `json:"allowedDurations"`
	Description             *string                                                           `json:"description"`
	Id                      openapi_types.UUID                                                `json:"id"`
	Integration             IntegrationBaseResponseSchema                                     `json:"integration"`
	Maintainers             []IntegrationResourceResultSchema_Maintainers_Item                `json:"maintainers"`
	Name                    string                                                            `json:"name"`
	Owner                   *EntityResponseSchema                                             `json:"owner"`
	PrerequisitePermissions *[][]IntegrationResourceResultSchema_PrerequisitePermissions_Item `json:"prerequisitePermissions,omitempty"`
	Requestable             bool                                                              `json:"requestable"`
	Tags                    *[]string                                                         `json:"tags"`
	UserDefinedDescription  *string                                                           `json:"userDefinedDescription"`
	UserDefinedTags         *[]string                                                         `json:"userDefinedTags"`
	Workflow                *WorkflowSchema                                                   `json:"workflow"`
}

// IntegrationResourceResultSchema_Maintainers_Item defines model for IntegrationResourceResultSchema.maintainers.Item.
type IntegrationResourceResultSchema_Maintainers_Item struct {
	union json.RawMessage
}

// IntegrationResourceResultSchema_PrerequisitePermissions_Item defines model for IntegrationResourceResultSchema.prerequisitePermissions.Item.
type IntegrationResourceResultSchema_PrerequisitePermissions_Item struct {
	union json.RawMessage
}

// IntegrationResourceRoleAuditLogResponseSchema defines model for IntegrationResourceRoleAuditLogResponseSchema.
type IntegrationResourceRoleAuditLogResponseSchema struct {
	// CreatedAt Date of the audit log
	CreatedAt time.Time `json:"createdAt"`

	// IntegrationResourceRole Name of the role
	IntegrationResourceRole *string `json:"integrationResourceRole,omitempty"`

	// Type Type of the audit log
	Type IntegrationResourceRoleAuditLogResponseSchemaType `json:"type"`

	// User User who performed the action
	User *string `json:"user,omitempty"`
}

// IntegrationResourceRoleAuditLogResponseSchemaType Type of the audit log
type IntegrationResourceRoleAuditLogResponseSchemaType string

// IntegrationResourceRoleCreateBodySchema defines model for IntegrationResourceRoleCreateBodySchema.
type IntegrationResourceRoleCreateBodySchema struct {
	AllowedDurations        *[]EnumAllowedDurations                                                   `json:"allowedDurations"`
	Name                    *string                                                                   `json:"name"`
	PrerequisitePermissions *[][]IntegrationResourceRoleCreateBodySchema_PrerequisitePermissions_Item `json:"prerequisitePermissions"`
	Requestable             bool                                                                      `json:"requestable"`
	Resource                IdParamsSchema                                                            `json:"resource"`
	VirtualizedRole         IdParamsSchema                                                            `json:"virtualizedRole"`
	Workflow                *IdParamsSchema                                                           `json:"workflow"`
}

// IntegrationResourceRoleCreateBodySchema_PrerequisitePermissions_Item defines model for IntegrationResourceRoleCreateBodySchema.prerequisitePermissions.Item.
type IntegrationResourceRoleCreateBodySchema_PrerequisitePermissions_Item struct {
	union json.RawMessage
}

// IntegrationResourceRoleCreateSchema defines model for IntegrationResourceRoleCreateSchema.
type IntegrationResourceRoleCreateSchema struct {
	Name              string              `json:"name"`
	VirtualizedRoleId *openapi_types.UUID `json:"virtualizedRoleId,omitempty"`
}

// IntegrationResourceRoleDestroyResponseSchema defines model for IntegrationResourceRoleDestroyResponseSchema.
type IntegrationResourceRoleDestroyResponseSchema struct {
	Ok bool `json:"ok"`
}

// IntegrationResourceRoleListItemResponseSchema defines model for IntegrationResourceRoleListItemResponseSchema.
type IntegrationResourceRoleListItemResponseSchema struct {
	Id       openapi_types.UUID                        `json:"id"`
	Name     string                                    `json:"name"`
	Resource IntegrationResourceListItemResponseSchema `json:"resource"`
}

// IntegrationResourceRoleResponseSchema defines model for IntegrationResourceRoleResponseSchema.
type IntegrationResourceRoleResponseSchema struct {
	Result []IntegrationResourceRoleResultSchema `json:"result"`
}

// IntegrationResourceRoleResultSchema defines model for IntegrationResourceRoleResultSchema.
type IntegrationResourceRoleResultSchema struct {
	AllowedDurations        []EnumAllowedDurations                                                `json:"allowedDurations"`
	Id                      openapi_types.UUID                                                    `json:"id"`
	Name                    string                                                                `json:"name"`
	PrerequisitePermissions *[][]IntegrationResourceRoleResultSchema_PrerequisitePermissions_Item `json:"prerequisitePermissions,omitempty"`
	Requestable             bool                                                                  `json:"requestable"`
	Resource                IntegrationResourceListItemResponseSchema                             `json:"resource"`
	VirtualizedRole         *IntegrationResourceRoleListItemResponseSchema                        `json:"virtualizedRole,omitempty"`
	Workflow                *WorkflowSchema                                                       `json:"workflow"`
}

// IntegrationResourceRoleResultSchema_PrerequisitePermissions_Item defines model for IntegrationResourceRoleResultSchema.prerequisitePermissions.Item.
type IntegrationResourceRoleResultSchema_PrerequisitePermissions_Item struct {
	union json.RawMessage
}

// IntegrationResourceRolesListResponseSchema defines model for IntegrationResourceRolesListResponseSchema.
type IntegrationResourceRolesListResponseSchema struct {
	Pagination PaginationResponseSchema                        `json:"pagination"`
	Result     []IntegrationResourceRoleListItemResponseSchema `json:"result"`
}

// IntegrationResourceRolesUpdateBodySchema defines model for IntegrationResourceRolesUpdateBodySchema.
type IntegrationResourceRolesUpdateBodySchema struct {
	AllowedDurations        *[]EnumAllowedDurations                                                    `json:"allowedDurations"`
	PrerequisitePermissions *[][]IntegrationResourceRolesUpdateBodySchema_PrerequisitePermissions_Item `json:"prerequisitePermissions"`
	Requestable             *bool                                                                      `json:"requestable,omitempty"`
	Workflow                *IdParamsSchema                                                            `json:"workflow"`
}

// IntegrationResourceRolesUpdateBodySchema_PrerequisitePermissions_Item defines model for IntegrationResourceRolesUpdateBodySchema.prerequisitePermissions.Item.
type IntegrationResourceRolesUpdateBodySchema_PrerequisitePermissions_Item struct {
	union json.RawMessage
}

// IntegrationResourcesCreateBodySchema defines model for IntegrationResourcesCreateBodySchema.
type IntegrationResourcesCreateBodySchema struct {
	AllowedDurations        *[]EnumAllowedDurations                                                `json:"allowedDurations"`
	Integration             IdParamsSchema                                                         `json:"integration"`
	Maintainers             *[]IntegrationResourcesCreateBodySchema_Maintainers_Item               `json:"maintainers"`
	Multirole               bool                                                                   `json:"multirole"`
	Name                    string                                                                 `json:"name"`
	Owner                   *UserEntitySchema                                                      `json:"owner"`
	PrerequisitePermissions *[][]IntegrationResourcesCreateBodySchema_PrerequisitePermissions_Item `json:"prerequisitePermissions"`
	Requestable             bool                                                                   `json:"requestable"`
	Roles                   *[]IntegrationResourceRoleCreateSchema                                 `json:"roles,omitempty"`
	Type                    *string                                                                `json:"type,omitempty"`
	UserDefinedDescription  *string                                                                `json:"userDefinedDescription,omitempty"`
	UserDefinedTags         *[]string                                                              `json:"userDefinedTags,omitempty"`
	Workflow                *IdParamsSchema                                                        `json:"workflow"`
}

// IntegrationResourcesCreateBodySchema_Maintainers_Item defines model for IntegrationResourcesCreateBodySchema.maintainers.Item.
type IntegrationResourcesCreateBodySchema_Maintainers_Item struct {
	union json.RawMessage
}

// IntegrationResourcesCreateBodySchema_PrerequisitePermissions_Item defines model for IntegrationResourcesCreateBodySchema.prerequisitePermissions.Item.
type IntegrationResourcesCreateBodySchema_PrerequisitePermissions_Item struct {
	union json.RawMessage
}

// IntegrationResourcesListResponseSchema defines model for IntegrationResourcesListResponseSchema.
type IntegrationResourcesListResponseSchema struct {
	Pagination PaginationResponseSchema                    `json:"pagination"`
	Result     []IntegrationResourceListItemResponseSchema `json:"result"`
}

// IntegrationResourcesUpdateBodySchema defines model for IntegrationResourcesUpdateBodySchema.
type IntegrationResourcesUpdateBodySchema struct {
	AllowedDurations        *[]EnumAllowedDurations                                                `json:"allowedDurations"`
	Maintainers             *[]IntegrationResourcesUpdateBodySchema_Maintainers_Item               `json:"maintainers"`
	Owner                   *UserEntitySchema                                                      `json:"owner"`
	PrerequisitePermissions *[][]IntegrationResourcesUpdateBodySchema_PrerequisitePermissions_Item `json:"prerequisitePermissions"`
	Requestable             *bool                                                                  `json:"requestable,omitempty"`
	UserDefinedDescription  *string                                                                `json:"userDefinedDescription,omitempty"`
	UserDefinedTags         *[]string                                                              `json:"userDefinedTags,omitempty"`
	Workflow                *IdParamsSchema                                                        `json:"workflow"`
}

// IntegrationResourcesUpdateBodySchema_Maintainers_Item defines model for IntegrationResourcesUpdateBodySchema.maintainers.Item.
type IntegrationResourcesUpdateBodySchema_Maintainers_Item struct {
	union json.RawMessage
}

// IntegrationResourcesUpdateBodySchema_PrerequisitePermissions_Item defines model for IntegrationResourcesUpdateBodySchema.prerequisitePermissions.Item.
type IntegrationResourcesUpdateBodySchema_PrerequisitePermissions_Item struct {
	union json.RawMessage
}

// IntegrationResponseSchema defines model for IntegrationResponseSchema.
type IntegrationResponseSchema struct {
	Result IntegrationResultSchema `json:"result"`
}

// IntegrationResultSchema defines model for IntegrationResultSchema.
type IntegrationResultSchema struct {
	AllowChangingAccountPermissions      bool                                                      `json:"allowChangingAccountPermissions"`
	AllowCreatingAccounts                bool                                                      `json:"allowCreatingAccounts"`
	AllowedDurations                     []EnumAllowedDurations                                    `json:"allowedDurations"`
	Application                          ApplicationResponseSchema                                 `json:"application"`
	AutoAssignRecommendedMaintainers     bool                                                      `json:"autoAssignRecommendedMaintainers"`
	AutoAssignRecommendedOwners          bool                                                      `json:"autoAssignRecommendedOwners"`
	Id                                   openapi_types.UUID                                        `json:"id"`
	Maintainers                          []IntegrationResultSchema_Maintainers_Item                `json:"maintainers"`
	Name                                 string                                                    `json:"name"`
	NotifyAboutExternalPermissionChanges bool                                                      `json:"notifyAboutExternalPermissionChanges"`
	Owner                                EntityResponseSchema                                      `json:"owner"`
	PrerequisitePermissions              *[][]IntegrationResultSchema_PrerequisitePermissions_Item `json:"prerequisitePermissions,omitempty"`
	Readonly                             bool                                                      `json:"readonly"`
	Requestable                          bool                                                      `json:"requestable"`
	RequestableByDefault                 bool                                                      `json:"requestableByDefault"`
	Workflow                             WorkflowResponseSchema                                    `json:"workflow"`
}

// IntegrationResultSchema_Maintainers_Item defines model for IntegrationResultSchema.maintainers.Item.
type IntegrationResultSchema_Maintainers_Item struct {
	union json.RawMessage
}

// IntegrationResultSchema_PrerequisitePermissions_Item defines model for IntegrationResultSchema.prerequisitePermissions.Item.
type IntegrationResultSchema_PrerequisitePermissions_Item struct {
	union json.RawMessage
}

// IntegrationsListResponseSchema defines model for IntegrationsListResponseSchema.
type IntegrationsListResponseSchema struct {
	Pagination PaginationResponseSchema        `json:"pagination"`
	Result     []IntegrationBaseResponseSchema `json:"result"`
}

// IntegrationsUpdateBodySchema defines model for IntegrationsUpdateBodySchema.
type IntegrationsUpdateBodySchema struct {
	AllowActorsSelfMapping *bool `json:"allowActorsSelfMapping,omitempty"`

	// AllowRequests You must provide either requestable & requestableByDefault OR allowRequests & allowRequestsByDefault.
	AllowRequests *bool `json:"allowRequests,omitempty"`

	// AllowRequestsByDefault You must provide either requestable & requestableByDefault OR allowRequests & allowRequestsByDefault.
	AllowRequestsByDefault               *bool                                                          `json:"allowRequestsByDefault,omitempty"`
	AllowedDurations                     *[]EnumAllowedDurations                                        `json:"allowedDurations"`
	AutoAssignRecommendedMaintainers     *bool                                                          `json:"autoAssignRecommendedMaintainers,omitempty"`
	AutoAssignRecommendedOwners          *bool                                                          `json:"autoAssignRecommendedOwners,omitempty"`
	ConnectionJson                       *map[string]interface{}                                        `json:"connectionJson,omitempty"`
	DummyRequestableOrAllowsRequests     *bool                                                          `json:"dummyRequestableOrAllowsRequests,omitempty"`
	Maintainers                          *[]IntegrationsUpdateBodySchema_Maintainers_Item               `json:"maintainers,omitempty"`
	Name                                 *string                                                        `json:"name,omitempty"`
	NotifyAboutExternalPermissionChanges *bool                                                          `json:"notifyAboutExternalPermissionChanges,omitempty"`
	Owner                                *UserEntitySchema                                              `json:"owner,omitempty"`
	PrerequisitePermissions              *[][]IntegrationsUpdateBodySchema_PrerequisitePermissions_Item `json:"prerequisitePermissions"`

	// Requestable You must provide either requestable & requestableByDefault OR allowRequests & allowRequestsByDefault.
	Requestable *bool `json:"requestable,omitempty"`

	// RequestableByDefault You must provide either requestable & requestableByDefault OR allowRequests & allowRequestsByDefault.
	RequestableByDefault *bool           `json:"requestableByDefault,omitempty"`
	Workflow             *IdParamsSchema `json:"workflow,omitempty"`
}

// IntegrationsUpdateBodySchema_Maintainers_Item defines model for IntegrationsUpdateBodySchema.maintainers.Item.
type IntegrationsUpdateBodySchema_Maintainers_Item struct {
	union json.RawMessage
}

// IntegrationsUpdateBodySchema_PrerequisitePermissions_Item defines model for IntegrationsUpdateBodySchema.prerequisitePermissions.Item.
type IntegrationsUpdateBodySchema_PrerequisitePermissions_Item struct {
	union json.RawMessage
}

// MaintainerGroupResponseSchema defines model for MaintainerGroupResponseSchema.
type MaintainerGroupResponseSchema struct {
	Group EntityResponseSchema    `json:"group"`
	Type  EnumMaintainerTypeGroup `json:"type"`
}

// MaintainerUserResponseSchema defines model for MaintainerUserResponseSchema.
type MaintainerUserResponseSchema struct {
	Type EnumMaintainerTypeUser `json:"type"`
	User EntityResponseSchema   `json:"user"`
}

// NameSchema defines model for NameSchema.
type NameSchema struct {
	Name string `json:"name"`
}

// NotifiedApprovalEntityWithoutEntitySchema defines model for NotifiedApprovalEntityWithoutEntitySchema.
type NotifiedApprovalEntityWithoutEntitySchema struct {
	Entity *string                         `json:"entity"`
	Type   EnumNotifiedEntityWithoutEntity `json:"type"`
}

// NotifiedEntityNullResponseSchema defines model for NotifiedEntityNullResponseSchema.
type NotifiedEntityNullResponseSchema struct {
	Entity *string                         `json:"entity"`
	Type   EnumNotifiedEntityWithoutEntity `json:"type"`
}

// PaginatedForwardResponseSchema defines model for PaginatedForwardResponseSchema.
type PaginatedForwardResponseSchema struct {
	Pagination PaginationResponseSchema `json:"pagination"`
	Result     []ForwardResponseSchema  `json:"result"`
}

// PaginationResponseSchema defines model for PaginationResponseSchema.
type PaginationResponseSchema struct {
	// Page Current page
	Page float32 `json:"page"`

	// PerPage Number of results per page
	PerPage float32 `json:"perPage"`

	// TotalPages Total number of pages
	TotalPages float32 `json:"totalPages"`

	// TotalResults Total number of results
	TotalResults float32 `json:"totalResults"`
}

// PermissionResponseSchema defines model for PermissionResponseSchema.
type PermissionResponseSchema struct {
	Pagination PaginationResponseSchema `json:"pagination"`
	Result     []PermissionSchema       `json:"result"`
}

// PermissionSchema defines model for PermissionSchema.
type PermissionSchema struct {
	// Actor Permission's actor
	Actor ActorSchema `json:"actor"`

	// CreatedAt Date of the permission creation
	CreatedAt time.Time `json:"createdAt"`

	// DeprecatedAt Date of the permission deprecation
	DeprecatedAt *time.Time `json:"deprecatedAt"`

	// Integration Permission's integration
	Integration EntitySchema `json:"integration"`

	// Resource Permission's resource
	Resource EntitySchema `json:"resource"`

	// Role Permission's role
	Role EntitySchema `json:"role"`
}

// PolicyApplicationResponseSchema defines model for PolicyApplicationResponseSchema.
type PolicyApplicationResponseSchema struct {
	Name string `json:"name"`
}

// PolicyAuditLogResponseSchema defines model for PolicyAuditLogResponseSchema.
type PolicyAuditLogResponseSchema struct {
	// CreatedAt Date of the audit log
	CreatedAt time.Time `json:"createdAt"`

	// Policy Number of the policy
	Policy *float32 `json:"policy,omitempty"`

	// Type Type of the audit log
	Type PolicyAuditLogResponseSchemaType `json:"type"`

	// User User who performed the action
	User *string `json:"user,omitempty"`
}

// PolicyAuditLogResponseSchemaType Type of the audit log
type PolicyAuditLogResponseSchemaType string

// PolicyBundleResponseSchema defines model for PolicyBundleResponseSchema.
type PolicyBundleResponseSchema struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// PolicyCreateSchema defines model for PolicyCreateSchema.
type PolicyCreateSchema struct {
	Bundles   []IdParamsSchema `json:"bundles"`
	InGroups  []InGroupSchema  `json:"inGroups"`
	Roles     []IdParamsSchema `json:"roles"`
	SortOrder *float32         `json:"sortOrder,omitempty"`
}

// PolicyDestroyResponseSchema defines model for PolicyDestroyResponseSchema.
type PolicyDestroyResponseSchema struct {
	Ok bool `json:"ok"`
}

// PolicyGroupResponseSchema defines model for PolicyGroupResponseSchema.
type PolicyGroupResponseSchema struct {
	Id   openapi_types.UUID  `json:"id"`
	Name string              `json:"name"`
	Type EnumPolicyGroupType `json:"type"`
}

// PolicyIndexResponseSchema defines model for PolicyIndexResponseSchema.
type PolicyIndexResponseSchema struct {
	Pagination PaginationResponseSchema          `json:"pagination"`
	Result     []PolicyIndexResultResponseSchema `json:"result"`
}

// PolicyIndexResultResponseSchema defines model for PolicyIndexResultResponseSchema.
type PolicyIndexResultResponseSchema struct {
	Id        openapi_types.UUID `json:"id"`
	Number    float32            `json:"number"`
	SortOrder float32            `json:"sortOrder"`
}

// PolicyIntegrationResponseSchema defines model for PolicyIntegrationResponseSchema.
type PolicyIntegrationResponseSchema struct {
	Application PolicyApplicationResponseSchema `json:"application"`
	Id          openapi_types.UUID              `json:"id"`
	Name        string                          `json:"name"`
}

// PolicyResourceResponseSchema defines model for PolicyResourceResponseSchema.
type PolicyResourceResponseSchema struct {
	Id          openapi_types.UUID              `json:"id"`
	Integration PolicyIntegrationResponseSchema `json:"integration"`
	Name        string                          `json:"name"`
}

// PolicyRoleResponseSchema defines model for PolicyRoleResponseSchema.
type PolicyRoleResponseSchema struct {
	Id       openapi_types.UUID           `json:"id"`
	Name     string                       `json:"name"`
	Resource PolicyResourceResponseSchema `json:"resource"`
}

// PolicyUpdateSchema defines model for PolicyUpdateSchema.
type PolicyUpdateSchema struct {
	Bundles   *[]IdParamsSchema `json:"bundles,omitempty"`
	InGroups  *[]InGroupSchema  `json:"inGroups,omitempty"`
	Roles     *[]IdParamsSchema `json:"roles,omitempty"`
	SortOrder *float32          `json:"sortOrder,omitempty"`
}

// PostUsersAccountsResponseSchema defines model for PostUsersAccountsResponseSchema.
type PostUsersAccountsResponseSchema struct {
	Result UserAccountResultSchema `json:"result"`
}

// PrerequisitePermissionCreateBodySchema defines model for PrerequisitePermissionCreateBodySchema.
type PrerequisitePermissionCreateBodySchema struct {
	Default bool                   `json:"default"`
	Role    map[string]interface{} `json:"role"`
}

// PrerequisiteRolePermissionResponseSchema defines model for PrerequisiteRolePermissionResponseSchema.
type PrerequisiteRolePermissionResponseSchema struct {
	Default bool                                          `json:"default"`
	Role    IntegrationResourceRoleListItemResponseSchema `json:"role"`
}

// PublicBundleCreateBodySchema defines model for PublicBundleCreateBodySchema.
type PublicBundleCreateBodySchema struct {
	AllowedDurations *[]EnumAllowedDurations `json:"allowedDurations"`
	Category         *string                 `json:"category"`
	Description      *string                 `json:"description"`
	Name             string                  `json:"name"`
	Roles            []IdParamsSchema        `json:"roles"`
	Tags             *[]string               `json:"tags"`
	Workflow         IdParamsSchema          `json:"workflow"`
}

// ResourceResponseSchema defines model for ResourceResponseSchema.
type ResourceResponseSchema struct {
	Id          openapi_types.UUID            `json:"id"`
	Integration IntegrationBaseResponseSchema `json:"integration"`
	Name        string                        `json:"name"`
}

// ScheduleEntitySchema defines model for ScheduleEntitySchema.
type ScheduleEntitySchema struct {
	// Id A unique identifier of the schedule
	Id string `json:"id"`
}

// TicketAuditLogResponseSchema defines model for TicketAuditLogResponseSchema.
type TicketAuditLogResponseSchema struct {
	// CreatedAt Date of the audit log
	CreatedAt time.Time `json:"createdAt"`

	// Ticket Number of the ticket
	Ticket *float32 `json:"ticket,omitempty"`

	// Type Type of the audit log
	Type TicketAuditLogResponseSchemaType `json:"type"`

	// User User who performed the action
	User *string `json:"user,omitempty"`
}

// TicketAuditLogResponseSchemaType Type of the audit log
type TicketAuditLogResponseSchemaType string

// UserAccountAccountEntityResultSchema defines model for UserAccountAccountEntityResultSchema.
type UserAccountAccountEntityResultSchema struct {
	CreatedAt time.Time `json:"createdAt"`
	Email     string    `json:"email"`
	Euid      string    `json:"euid"`
	Id        string    `json:"id"`
}

// UserAccountBaseEntityResultSchema defines model for UserAccountBaseEntityResultSchema.
type UserAccountBaseEntityResultSchema struct {
	CreatedAt time.Time `json:"createdAt"`
	Email     string    `json:"email"`
	Id        string    `json:"id"`
}

// UserAccountResultSchema defines model for UserAccountResultSchema.
type UserAccountResultSchema struct {
	Account   UserAccountAccountEntityResultSchema `json:"account"`
	CreatedAt time.Time                            `json:"createdAt"`
	Id        openapi_types.UUID                   `json:"id"`
	User      UserAccountBaseEntityResultSchema    `json:"user"`
}

// UserEntityResponseSchema defines model for UserEntityResponseSchema.
type UserEntityResponseSchema struct {
	Email openapi_types.Email `json:"email"`
	Id    openapi_types.UUID  `json:"id"`
}

// UserEntitySchema defines model for UserEntitySchema.
type UserEntitySchema struct {
	// Id A unique identifier/email of the user
	Id string `json:"id"`
}

// UserMaintainerSchema defines model for UserMaintainerSchema.
type UserMaintainerSchema struct {
	Type EnumMaintainerTypeUser `json:"type"`

	// User If type is user, this field is required with a unique id/email
	User UserEntitySchema `json:"user"`
}

// UserResultSchema defines model for UserResultSchema.
type UserResultSchema struct {
	CreatedAt  time.Time          `json:"createdAt"`
	Email      string             `json:"email"`
	FamilyName string             `json:"familyName"`
	GivenName  string             `json:"givenName"`
	Id         openapi_types.UUID `json:"id"`
}

// UserSchema defines model for UserSchema.
type UserSchema struct {
	// Email User's email
	Email string `json:"email"`

	// Name Entity name
	Name string `json:"name"`
}

// WorkflowApprovalFlowResponseSchema defines model for WorkflowApprovalFlowResponseSchema.
type WorkflowApprovalFlowResponseSchema struct {
	Steps []ApprovalFlowStepResponseSchema `json:"steps"`
}

// WorkflowApprovalFlowSchema defines model for WorkflowApprovalFlowSchema.
type WorkflowApprovalFlowSchema struct {
	Steps []ApprovalFlowSchema `json:"steps"`
}

// WorkflowCreateBodySchema defines model for WorkflowCreateBodySchema.
type WorkflowCreateBodySchema struct {
	Name  string               `json:"name"`
	Rules []WorkflowRuleSchema `json:"rules"`
}

// WorkflowDestroyResponseSchema defines model for WorkflowDestroyResponseSchema.
type WorkflowDestroyResponseSchema struct {
	Ok bool `json:"ok"`
}

// WorkflowGroupResponseSchema defines model for WorkflowGroupResponseSchema.
type WorkflowGroupResponseSchema struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// WorkflowIndexResponseSchema defines model for WorkflowIndexResponseSchema.
type WorkflowIndexResponseSchema struct {
	Pagination PaginationResponseSchema            `json:"pagination"`
	Result     []WorkflowIndexResultResponseSchema `json:"result"`
}

// WorkflowIndexResultResponseSchema defines model for WorkflowIndexResultResponseSchema.
type WorkflowIndexResultResponseSchema struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// WorkflowResponseSchema defines model for WorkflowResponseSchema.
type WorkflowResponseSchema struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// WorkflowRuleResponseSchema defines model for WorkflowRuleResponseSchema.
type WorkflowRuleResponseSchema struct {
	AnySchedule   bool                               `json:"anySchedule"`
	ApprovalFlow  WorkflowApprovalFlowResponseSchema `json:"approvalFlow"`
	InGroups      []WorkflowGroupResponseSchema      `json:"inGroups"`
	InSchedules   []WorkflowGroupResponseSchema      `json:"inSchedules"`
	SortOrder     float32                            `json:"sortOrder"`
	UnderDuration EnumAllowedDurations               `json:"underDuration"`
}

// WorkflowRuleSchema defines model for WorkflowRuleSchema.
type WorkflowRuleSchema struct {
	AnySchedule   bool                       `json:"anySchedule"`
	ApprovalFlow  WorkflowApprovalFlowSchema `json:"approvalFlow"`
	InGroups      []GroupEntitySchema        `json:"inGroups"`
	InSchedules   []ScheduleEntitySchema     `json:"inSchedules"`
	SortOrder     float32                    `json:"sortOrder"`
	UnderDuration EnumAllowedDurations       `json:"underDuration"`
}

// WorkflowSchema defines model for WorkflowSchema.
type WorkflowSchema struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// WorkflowUpdatedBodySchema defines model for WorkflowUpdatedBodySchema.
type WorkflowUpdatedBodySchema struct {
	Name  *string               `json:"name,omitempty"`
	Rules *[]WorkflowRuleSchema `json:"rules,omitempty"`
}

// AccessRequestForwardsIndexParams defines parameters for AccessRequestForwardsIndex.
type AccessRequestForwardsIndexParams struct {
	Page    *float32 `form:"page,omitempty" json:"page,omitempty"`
	PerPage *float32 `form:"perPage,omitempty" json:"perPage,omitempty"`
}

// AccessReviewForwardsIndexParams defines parameters for AccessReviewForwardsIndex.
type AccessReviewForwardsIndexParams struct {
	Page    *float32 `form:"page,omitempty" json:"page,omitempty"`
	PerPage *float32 `form:"perPage,omitempty" json:"perPage,omitempty"`
}

// AccountsIndexParams defines parameters for AccountsIndex.
type AccountsIndexParams struct {
	Page          *float32 `form:"page,omitempty" json:"page,omitempty"`
	PerPage       *float32 `form:"perPage,omitempty" json:"perPage,omitempty"`
	IntegrationId string   `form:"integrationId" json:"integrationId"`
	Search        *string  `form:"search,omitempty" json:"search,omitempty"`
}

// AgentTokensIndexParams defines parameters for AgentTokensIndex.
type AgentTokensIndexParams struct {
	Page    *float32 `form:"page,omitempty" json:"page,omitempty"`
	PerPage *float32 `form:"perPage,omitempty" json:"perPage,omitempty"`
}

// BundlesIndexParams defines parameters for BundlesIndex.
type BundlesIndexParams struct {
	Page    *float32 `form:"page,omitempty" json:"page,omitempty"`
	PerPage *float32 `form:"perPage,omitempty" json:"perPage,omitempty"`
}

// DirectoryGroupsIndexParams defines parameters for DirectoryGroupsIndex.
type DirectoryGroupsIndexParams struct {
	SortOrder  *DirectoryGroupsIndexParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`
	Page       *float32                             `form:"page,omitempty" json:"page,omitempty"`
	PerPage    *float32                             `form:"perPage,omitempty" json:"perPage,omitempty"`
	SortFields *[]string                            `form:"sortFields,omitempty" json:"sortFields,omitempty"`
	Search     *string                              `form:"search,omitempty" json:"search,omitempty"`
}

// DirectoryGroupsIndexParamsSortOrder defines parameters for DirectoryGroupsIndex.
type DirectoryGroupsIndexParamsSortOrder string

// IntegrationsIndexParams defines parameters for IntegrationsIndex.
type IntegrationsIndexParams struct {
	Page    *float32 `form:"page,omitempty" json:"page,omitempty"`
	PerPage *float32 `form:"perPage,omitempty" json:"perPage,omitempty"`
}

// PermissionsIndexParams defines parameters for PermissionsIndex.
type PermissionsIndexParams struct {
	SortOrder *PermissionsIndexParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// Date Filter permissions up to a certain point in time
	Date    *openapi_types.Date `form:"date,omitempty" json:"date,omitempty"`
	Page    *float32            `form:"page,omitempty" json:"page,omitempty"`
	PerPage *float32            `form:"perPage,omitempty" json:"perPage,omitempty"`
}

// PermissionsIndexParamsSortOrder defines parameters for PermissionsIndex.
type PermissionsIndexParamsSortOrder string

// PoliciesIndexParams defines parameters for PoliciesIndex.
type PoliciesIndexParams struct {
	Page    *float32 `form:"page,omitempty" json:"page,omitempty"`
	PerPage *float32 `form:"perPage,omitempty" json:"perPage,omitempty"`
}

// ResourcesIndexParams defines parameters for ResourcesIndex.
type ResourcesIndexParams struct {
	Page          *float32 `form:"page,omitempty" json:"page,omitempty"`
	PerPage       *float32 `form:"perPage,omitempty" json:"perPage,omitempty"`
	Search        *string  `form:"search,omitempty" json:"search,omitempty"`
	IntegrationId string   `form:"integrationId" json:"integrationId"`
}

// RolesIndexParams defines parameters for RolesIndex.
type RolesIndexParams struct {
	Page       *float32           `form:"page,omitempty" json:"page,omitempty"`
	PerPage    *float32           `form:"perPage,omitempty" json:"perPage,omitempty"`
	ResourceId openapi_types.UUID `form:"resourceId" json:"resourceId"`
	Search     *string            `form:"search,omitempty" json:"search,omitempty"`
}

// UsersIndexParams defines parameters for UsersIndex.
type UsersIndexParams struct {
	Page    *float32 `form:"page,omitempty" json:"page,omitempty"`
	PerPage *float32 `form:"perPage,omitempty" json:"perPage,omitempty"`
	Search  *string  `form:"search,omitempty" json:"search,omitempty"`
}

// UsersAccountsIndexParams defines parameters for UsersAccountsIndex.
type UsersAccountsIndexParams struct {
	Page      *float32 `form:"page,omitempty" json:"page,omitempty"`
	PerPage   *float32 `form:"perPage,omitempty" json:"perPage,omitempty"`
	UserId    *string  `form:"userId,omitempty" json:"userId,omitempty"`
	AccountId *string  `form:"accountId,omitempty" json:"accountId,omitempty"`
}

// WorkflowsIndexParams defines parameters for WorkflowsIndex.
type WorkflowsIndexParams struct {
	Page    *float32 `form:"page,omitempty" json:"page,omitempty"`
	PerPage *float32 `form:"perPage,omitempty" json:"perPage,omitempty"`
}

// AccessRequestForwardsCreateJSONRequestBody defines body for AccessRequestForwardsCreate for application/json ContentType.
type AccessRequestForwardsCreateJSONRequestBody = ForwardCreateSchema

// AccessRequestsCreateJSONRequestBody defines body for AccessRequestsCreate for application/json ContentType.
type AccessRequestsCreateJSONRequestBody = AccessRequestCreateBodySchema

// AccessReviewForwardsCreateJSONRequestBody defines body for AccessReviewForwardsCreate for application/json ContentType.
type AccessReviewForwardsCreateJSONRequestBody = ForwardCreateSchema

// AgentTokensCreateJSONRequestBody defines body for AgentTokensCreate for application/json ContentType.
type AgentTokensCreateJSONRequestBody = AgentTokenCreateBodySchema

// AgentTokensUpdateJSONRequestBody defines body for AgentTokensUpdate for application/json ContentType.
type AgentTokensUpdateJSONRequestBody = AgentTokenCreateBodySchema

// AuditLogsSearchJSONRequestBody defines body for AuditLogsSearch for application/json ContentType.
type AuditLogsSearchJSONRequestBody = AuditLogsBodySchema

// BundlesCreateJSONRequestBody defines body for BundlesCreate for application/json ContentType.
type BundlesCreateJSONRequestBody = PublicBundleCreateBodySchema

// BundlesUpdateJSONRequestBody defines body for BundlesUpdate for application/json ContentType.
type BundlesUpdateJSONRequestBody = BundleUpdatedBodySchema

// IntegrationsCreateJSONRequestBody defines body for IntegrationsCreate for application/json ContentType.
type IntegrationsCreateJSONRequestBody = IntegrationCreateBodySchema

// IntegrationsUpdateJSONRequestBody defines body for IntegrationsUpdate for application/json ContentType.
type IntegrationsUpdateJSONRequestBody = IntegrationsUpdateBodySchema

// PoliciesCreateJSONRequestBody defines body for PoliciesCreate for application/json ContentType.
type PoliciesCreateJSONRequestBody = PolicyCreateSchema

// PoliciesUpdateJSONRequestBody defines body for PoliciesUpdate for application/json ContentType.
type PoliciesUpdateJSONRequestBody = PolicyUpdateSchema

// ResourcesCreateJSONRequestBody defines body for ResourcesCreate for application/json ContentType.
type ResourcesCreateJSONRequestBody = IntegrationResourcesCreateBodySchema

// ResourcesUpdateJSONRequestBody defines body for ResourcesUpdate for application/json ContentType.
type ResourcesUpdateJSONRequestBody = IntegrationResourcesUpdateBodySchema

// RolesCreateJSONRequestBody defines body for RolesCreate for application/json ContentType.
type RolesCreateJSONRequestBody = IntegrationResourceRoleCreateBodySchema

// RolesUpdateJSONRequestBody defines body for RolesUpdate for application/json ContentType.
type RolesUpdateJSONRequestBody = IntegrationResourceRolesUpdateBodySchema

// UsersAccountsCreateJSONRequestBody defines body for UsersAccountsCreate for application/json ContentType.
type UsersAccountsCreateJSONRequestBody = CreateUserAccountBodySchema

// WorkflowsCreateJSONRequestBody defines body for WorkflowsCreate for application/json ContentType.
type WorkflowsCreateJSONRequestBody = WorkflowCreateBodySchema

// WorkflowsUpdateJSONRequestBody defines body for WorkflowsUpdate for application/json ContentType.
type WorkflowsUpdateJSONRequestBody = WorkflowUpdatedBodySchema

// AsAccessRequestBundleTargetCreateSchema returns the union data inside the AccessRequestCreateBodySchema_Target as a AccessRequestBundleTargetCreateSchema
func (t AccessRequestCreateBodySchema_Target) AsAccessRequestBundleTargetCreateSchema() (AccessRequestBundleTargetCreateSchema, error) {
	var body AccessRequestBundleTargetCreateSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAccessRequestBundleTargetCreateSchema overwrites any union data inside the AccessRequestCreateBodySchema_Target as the provided AccessRequestBundleTargetCreateSchema
func (t *AccessRequestCreateBodySchema_Target) FromAccessRequestBundleTargetCreateSchema(v AccessRequestBundleTargetCreateSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAccessRequestBundleTargetCreateSchema performs a merge with any union data inside the AccessRequestCreateBodySchema_Target, using the provided AccessRequestBundleTargetCreateSchema
func (t *AccessRequestCreateBodySchema_Target) MergeAccessRequestBundleTargetCreateSchema(v AccessRequestBundleTargetCreateSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAccessRequestRoleTargetCreateSchema returns the union data inside the AccessRequestCreateBodySchema_Target as a AccessRequestRoleTargetCreateSchema
func (t AccessRequestCreateBodySchema_Target) AsAccessRequestRoleTargetCreateSchema() (AccessRequestRoleTargetCreateSchema, error) {
	var body AccessRequestRoleTargetCreateSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAccessRequestRoleTargetCreateSchema overwrites any union data inside the AccessRequestCreateBodySchema_Target as the provided AccessRequestRoleTargetCreateSchema
func (t *AccessRequestCreateBodySchema_Target) FromAccessRequestRoleTargetCreateSchema(v AccessRequestRoleTargetCreateSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAccessRequestRoleTargetCreateSchema performs a merge with any union data inside the AccessRequestCreateBodySchema_Target, using the provided AccessRequestRoleTargetCreateSchema
func (t *AccessRequestCreateBodySchema_Target) MergeAccessRequestRoleTargetCreateSchema(v AccessRequestRoleTargetCreateSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AccessRequestCreateBodySchema_Target) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AccessRequestCreateBodySchema_Target) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsApprovalEntityGroupSchema returns the union data inside the ApprovalFlowSchema_ApprovalEntities_Item as a ApprovalEntityGroupSchema
func (t ApprovalFlowSchema_ApprovalEntities_Item) AsApprovalEntityGroupSchema() (ApprovalEntityGroupSchema, error) {
	var body ApprovalEntityGroupSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApprovalEntityGroupSchema overwrites any union data inside the ApprovalFlowSchema_ApprovalEntities_Item as the provided ApprovalEntityGroupSchema
func (t *ApprovalFlowSchema_ApprovalEntities_Item) FromApprovalEntityGroupSchema(v ApprovalEntityGroupSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApprovalEntityGroupSchema performs a merge with any union data inside the ApprovalFlowSchema_ApprovalEntities_Item, using the provided ApprovalEntityGroupSchema
func (t *ApprovalFlowSchema_ApprovalEntities_Item) MergeApprovalEntityGroupSchema(v ApprovalEntityGroupSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsApprovalEntityScheduleSchema returns the union data inside the ApprovalFlowSchema_ApprovalEntities_Item as a ApprovalEntityScheduleSchema
func (t ApprovalFlowSchema_ApprovalEntities_Item) AsApprovalEntityScheduleSchema() (ApprovalEntityScheduleSchema, error) {
	var body ApprovalEntityScheduleSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApprovalEntityScheduleSchema overwrites any union data inside the ApprovalFlowSchema_ApprovalEntities_Item as the provided ApprovalEntityScheduleSchema
func (t *ApprovalFlowSchema_ApprovalEntities_Item) FromApprovalEntityScheduleSchema(v ApprovalEntityScheduleSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApprovalEntityScheduleSchema performs a merge with any union data inside the ApprovalFlowSchema_ApprovalEntities_Item, using the provided ApprovalEntityScheduleSchema
func (t *ApprovalFlowSchema_ApprovalEntities_Item) MergeApprovalEntityScheduleSchema(v ApprovalEntityScheduleSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsApprovalEntityUserSchema returns the union data inside the ApprovalFlowSchema_ApprovalEntities_Item as a ApprovalEntityUserSchema
func (t ApprovalFlowSchema_ApprovalEntities_Item) AsApprovalEntityUserSchema() (ApprovalEntityUserSchema, error) {
	var body ApprovalEntityUserSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApprovalEntityUserSchema overwrites any union data inside the ApprovalFlowSchema_ApprovalEntities_Item as the provided ApprovalEntityUserSchema
func (t *ApprovalFlowSchema_ApprovalEntities_Item) FromApprovalEntityUserSchema(v ApprovalEntityUserSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApprovalEntityUserSchema performs a merge with any union data inside the ApprovalFlowSchema_ApprovalEntities_Item, using the provided ApprovalEntityUserSchema
func (t *ApprovalFlowSchema_ApprovalEntities_Item) MergeApprovalEntityUserSchema(v ApprovalEntityUserSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsApprovalEntityNullSchema returns the union data inside the ApprovalFlowSchema_ApprovalEntities_Item as a ApprovalEntityNullSchema
func (t ApprovalFlowSchema_ApprovalEntities_Item) AsApprovalEntityNullSchema() (ApprovalEntityNullSchema, error) {
	var body ApprovalEntityNullSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApprovalEntityNullSchema overwrites any union data inside the ApprovalFlowSchema_ApprovalEntities_Item as the provided ApprovalEntityNullSchema
func (t *ApprovalFlowSchema_ApprovalEntities_Item) FromApprovalEntityNullSchema(v ApprovalEntityNullSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApprovalEntityNullSchema performs a merge with any union data inside the ApprovalFlowSchema_ApprovalEntities_Item, using the provided ApprovalEntityNullSchema
func (t *ApprovalFlowSchema_ApprovalEntities_Item) MergeApprovalEntityNullSchema(v ApprovalEntityNullSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ApprovalFlowSchema_ApprovalEntities_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ApprovalFlowSchema_ApprovalEntities_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsApprovalEntityGroupSchema returns the union data inside the ApprovalFlowSchema_NotifiedEntities_Item as a ApprovalEntityGroupSchema
func (t ApprovalFlowSchema_NotifiedEntities_Item) AsApprovalEntityGroupSchema() (ApprovalEntityGroupSchema, error) {
	var body ApprovalEntityGroupSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApprovalEntityGroupSchema overwrites any union data inside the ApprovalFlowSchema_NotifiedEntities_Item as the provided ApprovalEntityGroupSchema
func (t *ApprovalFlowSchema_NotifiedEntities_Item) FromApprovalEntityGroupSchema(v ApprovalEntityGroupSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApprovalEntityGroupSchema performs a merge with any union data inside the ApprovalFlowSchema_NotifiedEntities_Item, using the provided ApprovalEntityGroupSchema
func (t *ApprovalFlowSchema_NotifiedEntities_Item) MergeApprovalEntityGroupSchema(v ApprovalEntityGroupSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsApprovalEntityScheduleSchema returns the union data inside the ApprovalFlowSchema_NotifiedEntities_Item as a ApprovalEntityScheduleSchema
func (t ApprovalFlowSchema_NotifiedEntities_Item) AsApprovalEntityScheduleSchema() (ApprovalEntityScheduleSchema, error) {
	var body ApprovalEntityScheduleSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApprovalEntityScheduleSchema overwrites any union data inside the ApprovalFlowSchema_NotifiedEntities_Item as the provided ApprovalEntityScheduleSchema
func (t *ApprovalFlowSchema_NotifiedEntities_Item) FromApprovalEntityScheduleSchema(v ApprovalEntityScheduleSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApprovalEntityScheduleSchema performs a merge with any union data inside the ApprovalFlowSchema_NotifiedEntities_Item, using the provided ApprovalEntityScheduleSchema
func (t *ApprovalFlowSchema_NotifiedEntities_Item) MergeApprovalEntityScheduleSchema(v ApprovalEntityScheduleSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsApprovalEntityUserSchema returns the union data inside the ApprovalFlowSchema_NotifiedEntities_Item as a ApprovalEntityUserSchema
func (t ApprovalFlowSchema_NotifiedEntities_Item) AsApprovalEntityUserSchema() (ApprovalEntityUserSchema, error) {
	var body ApprovalEntityUserSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApprovalEntityUserSchema overwrites any union data inside the ApprovalFlowSchema_NotifiedEntities_Item as the provided ApprovalEntityUserSchema
func (t *ApprovalFlowSchema_NotifiedEntities_Item) FromApprovalEntityUserSchema(v ApprovalEntityUserSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApprovalEntityUserSchema performs a merge with any union data inside the ApprovalFlowSchema_NotifiedEntities_Item, using the provided ApprovalEntityUserSchema
func (t *ApprovalFlowSchema_NotifiedEntities_Item) MergeApprovalEntityUserSchema(v ApprovalEntityUserSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNotifiedApprovalEntityWithoutEntitySchema returns the union data inside the ApprovalFlowSchema_NotifiedEntities_Item as a NotifiedApprovalEntityWithoutEntitySchema
func (t ApprovalFlowSchema_NotifiedEntities_Item) AsNotifiedApprovalEntityWithoutEntitySchema() (NotifiedApprovalEntityWithoutEntitySchema, error) {
	var body NotifiedApprovalEntityWithoutEntitySchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNotifiedApprovalEntityWithoutEntitySchema overwrites any union data inside the ApprovalFlowSchema_NotifiedEntities_Item as the provided NotifiedApprovalEntityWithoutEntitySchema
func (t *ApprovalFlowSchema_NotifiedEntities_Item) FromNotifiedApprovalEntityWithoutEntitySchema(v NotifiedApprovalEntityWithoutEntitySchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNotifiedApprovalEntityWithoutEntitySchema performs a merge with any union data inside the ApprovalFlowSchema_NotifiedEntities_Item, using the provided NotifiedApprovalEntityWithoutEntitySchema
func (t *ApprovalFlowSchema_NotifiedEntities_Item) MergeNotifiedApprovalEntityWithoutEntitySchema(v NotifiedApprovalEntityWithoutEntitySchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ApprovalFlowSchema_NotifiedEntities_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ApprovalFlowSchema_NotifiedEntities_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsApprovalEntityGroupResponseSchema returns the union data inside the ApprovalFlowStepResponseSchema_ApprovalEntities_Item as a ApprovalEntityGroupResponseSchema
func (t ApprovalFlowStepResponseSchema_ApprovalEntities_Item) AsApprovalEntityGroupResponseSchema() (ApprovalEntityGroupResponseSchema, error) {
	var body ApprovalEntityGroupResponseSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApprovalEntityGroupResponseSchema overwrites any union data inside the ApprovalFlowStepResponseSchema_ApprovalEntities_Item as the provided ApprovalEntityGroupResponseSchema
func (t *ApprovalFlowStepResponseSchema_ApprovalEntities_Item) FromApprovalEntityGroupResponseSchema(v ApprovalEntityGroupResponseSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApprovalEntityGroupResponseSchema performs a merge with any union data inside the ApprovalFlowStepResponseSchema_ApprovalEntities_Item, using the provided ApprovalEntityGroupResponseSchema
func (t *ApprovalFlowStepResponseSchema_ApprovalEntities_Item) MergeApprovalEntityGroupResponseSchema(v ApprovalEntityGroupResponseSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsApprovalEntityScheduleResponseSchema returns the union data inside the ApprovalFlowStepResponseSchema_ApprovalEntities_Item as a ApprovalEntityScheduleResponseSchema
func (t ApprovalFlowStepResponseSchema_ApprovalEntities_Item) AsApprovalEntityScheduleResponseSchema() (ApprovalEntityScheduleResponseSchema, error) {
	var body ApprovalEntityScheduleResponseSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApprovalEntityScheduleResponseSchema overwrites any union data inside the ApprovalFlowStepResponseSchema_ApprovalEntities_Item as the provided ApprovalEntityScheduleResponseSchema
func (t *ApprovalFlowStepResponseSchema_ApprovalEntities_Item) FromApprovalEntityScheduleResponseSchema(v ApprovalEntityScheduleResponseSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApprovalEntityScheduleResponseSchema performs a merge with any union data inside the ApprovalFlowStepResponseSchema_ApprovalEntities_Item, using the provided ApprovalEntityScheduleResponseSchema
func (t *ApprovalFlowStepResponseSchema_ApprovalEntities_Item) MergeApprovalEntityScheduleResponseSchema(v ApprovalEntityScheduleResponseSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsApprovalEntityUserResponseSchema returns the union data inside the ApprovalFlowStepResponseSchema_ApprovalEntities_Item as a ApprovalEntityUserResponseSchema
func (t ApprovalFlowStepResponseSchema_ApprovalEntities_Item) AsApprovalEntityUserResponseSchema() (ApprovalEntityUserResponseSchema, error) {
	var body ApprovalEntityUserResponseSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApprovalEntityUserResponseSchema overwrites any union data inside the ApprovalFlowStepResponseSchema_ApprovalEntities_Item as the provided ApprovalEntityUserResponseSchema
func (t *ApprovalFlowStepResponseSchema_ApprovalEntities_Item) FromApprovalEntityUserResponseSchema(v ApprovalEntityUserResponseSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApprovalEntityUserResponseSchema performs a merge with any union data inside the ApprovalFlowStepResponseSchema_ApprovalEntities_Item, using the provided ApprovalEntityUserResponseSchema
func (t *ApprovalFlowStepResponseSchema_ApprovalEntities_Item) MergeApprovalEntityUserResponseSchema(v ApprovalEntityUserResponseSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsApprovalEntityNullResponseSchema returns the union data inside the ApprovalFlowStepResponseSchema_ApprovalEntities_Item as a ApprovalEntityNullResponseSchema
func (t ApprovalFlowStepResponseSchema_ApprovalEntities_Item) AsApprovalEntityNullResponseSchema() (ApprovalEntityNullResponseSchema, error) {
	var body ApprovalEntityNullResponseSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApprovalEntityNullResponseSchema overwrites any union data inside the ApprovalFlowStepResponseSchema_ApprovalEntities_Item as the provided ApprovalEntityNullResponseSchema
func (t *ApprovalFlowStepResponseSchema_ApprovalEntities_Item) FromApprovalEntityNullResponseSchema(v ApprovalEntityNullResponseSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApprovalEntityNullResponseSchema performs a merge with any union data inside the ApprovalFlowStepResponseSchema_ApprovalEntities_Item, using the provided ApprovalEntityNullResponseSchema
func (t *ApprovalFlowStepResponseSchema_ApprovalEntities_Item) MergeApprovalEntityNullResponseSchema(v ApprovalEntityNullResponseSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ApprovalFlowStepResponseSchema_ApprovalEntities_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ApprovalFlowStepResponseSchema_ApprovalEntities_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsApprovalEntityGroupResponseSchema returns the union data inside the ApprovalFlowStepResponseSchema_NotifiedEntities_Item as a ApprovalEntityGroupResponseSchema
func (t ApprovalFlowStepResponseSchema_NotifiedEntities_Item) AsApprovalEntityGroupResponseSchema() (ApprovalEntityGroupResponseSchema, error) {
	var body ApprovalEntityGroupResponseSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApprovalEntityGroupResponseSchema overwrites any union data inside the ApprovalFlowStepResponseSchema_NotifiedEntities_Item as the provided ApprovalEntityGroupResponseSchema
func (t *ApprovalFlowStepResponseSchema_NotifiedEntities_Item) FromApprovalEntityGroupResponseSchema(v ApprovalEntityGroupResponseSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApprovalEntityGroupResponseSchema performs a merge with any union data inside the ApprovalFlowStepResponseSchema_NotifiedEntities_Item, using the provided ApprovalEntityGroupResponseSchema
func (t *ApprovalFlowStepResponseSchema_NotifiedEntities_Item) MergeApprovalEntityGroupResponseSchema(v ApprovalEntityGroupResponseSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsApprovalEntityScheduleResponseSchema returns the union data inside the ApprovalFlowStepResponseSchema_NotifiedEntities_Item as a ApprovalEntityScheduleResponseSchema
func (t ApprovalFlowStepResponseSchema_NotifiedEntities_Item) AsApprovalEntityScheduleResponseSchema() (ApprovalEntityScheduleResponseSchema, error) {
	var body ApprovalEntityScheduleResponseSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApprovalEntityScheduleResponseSchema overwrites any union data inside the ApprovalFlowStepResponseSchema_NotifiedEntities_Item as the provided ApprovalEntityScheduleResponseSchema
func (t *ApprovalFlowStepResponseSchema_NotifiedEntities_Item) FromApprovalEntityScheduleResponseSchema(v ApprovalEntityScheduleResponseSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApprovalEntityScheduleResponseSchema performs a merge with any union data inside the ApprovalFlowStepResponseSchema_NotifiedEntities_Item, using the provided ApprovalEntityScheduleResponseSchema
func (t *ApprovalFlowStepResponseSchema_NotifiedEntities_Item) MergeApprovalEntityScheduleResponseSchema(v ApprovalEntityScheduleResponseSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsApprovalEntityUserResponseSchema returns the union data inside the ApprovalFlowStepResponseSchema_NotifiedEntities_Item as a ApprovalEntityUserResponseSchema
func (t ApprovalFlowStepResponseSchema_NotifiedEntities_Item) AsApprovalEntityUserResponseSchema() (ApprovalEntityUserResponseSchema, error) {
	var body ApprovalEntityUserResponseSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApprovalEntityUserResponseSchema overwrites any union data inside the ApprovalFlowStepResponseSchema_NotifiedEntities_Item as the provided ApprovalEntityUserResponseSchema
func (t *ApprovalFlowStepResponseSchema_NotifiedEntities_Item) FromApprovalEntityUserResponseSchema(v ApprovalEntityUserResponseSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApprovalEntityUserResponseSchema performs a merge with any union data inside the ApprovalFlowStepResponseSchema_NotifiedEntities_Item, using the provided ApprovalEntityUserResponseSchema
func (t *ApprovalFlowStepResponseSchema_NotifiedEntities_Item) MergeApprovalEntityUserResponseSchema(v ApprovalEntityUserResponseSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNotifiedEntityNullResponseSchema returns the union data inside the ApprovalFlowStepResponseSchema_NotifiedEntities_Item as a NotifiedEntityNullResponseSchema
func (t ApprovalFlowStepResponseSchema_NotifiedEntities_Item) AsNotifiedEntityNullResponseSchema() (NotifiedEntityNullResponseSchema, error) {
	var body NotifiedEntityNullResponseSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNotifiedEntityNullResponseSchema overwrites any union data inside the ApprovalFlowStepResponseSchema_NotifiedEntities_Item as the provided NotifiedEntityNullResponseSchema
func (t *ApprovalFlowStepResponseSchema_NotifiedEntities_Item) FromNotifiedEntityNullResponseSchema(v NotifiedEntityNullResponseSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNotifiedEntityNullResponseSchema performs a merge with any union data inside the ApprovalFlowStepResponseSchema_NotifiedEntities_Item, using the provided NotifiedEntityNullResponseSchema
func (t *ApprovalFlowStepResponseSchema_NotifiedEntities_Item) MergeNotifiedEntityNullResponseSchema(v NotifiedEntityNullResponseSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ApprovalFlowStepResponseSchema_NotifiedEntities_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ApprovalFlowStepResponseSchema_NotifiedEntities_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAccessReviewAuditLogResponseSchema returns the union data inside the AuditLogResponseSchema_Result_Item as a AccessReviewAuditLogResponseSchema
func (t AuditLogResponseSchema_Result_Item) AsAccessReviewAuditLogResponseSchema() (AccessReviewAuditLogResponseSchema, error) {
	var body AccessReviewAuditLogResponseSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAccessReviewAuditLogResponseSchema overwrites any union data inside the AuditLogResponseSchema_Result_Item as the provided AccessReviewAuditLogResponseSchema
func (t *AuditLogResponseSchema_Result_Item) FromAccessReviewAuditLogResponseSchema(v AccessReviewAuditLogResponseSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAccessReviewAuditLogResponseSchema performs a merge with any union data inside the AuditLogResponseSchema_Result_Item, using the provided AccessReviewAuditLogResponseSchema
func (t *AuditLogResponseSchema_Result_Item) MergeAccessReviewAuditLogResponseSchema(v AccessReviewAuditLogResponseSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsApprovalAlgorithmAuditLogResponseSchema returns the union data inside the AuditLogResponseSchema_Result_Item as a ApprovalAlgorithmAuditLogResponseSchema
func (t AuditLogResponseSchema_Result_Item) AsApprovalAlgorithmAuditLogResponseSchema() (ApprovalAlgorithmAuditLogResponseSchema, error) {
	var body ApprovalAlgorithmAuditLogResponseSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApprovalAlgorithmAuditLogResponseSchema overwrites any union data inside the AuditLogResponseSchema_Result_Item as the provided ApprovalAlgorithmAuditLogResponseSchema
func (t *AuditLogResponseSchema_Result_Item) FromApprovalAlgorithmAuditLogResponseSchema(v ApprovalAlgorithmAuditLogResponseSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApprovalAlgorithmAuditLogResponseSchema performs a merge with any union data inside the AuditLogResponseSchema_Result_Item, using the provided ApprovalAlgorithmAuditLogResponseSchema
func (t *AuditLogResponseSchema_Result_Item) MergeApprovalAlgorithmAuditLogResponseSchema(v ApprovalAlgorithmAuditLogResponseSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAuditLogBaseSchema returns the union data inside the AuditLogResponseSchema_Result_Item as a AuditLogBaseSchema
func (t AuditLogResponseSchema_Result_Item) AsAuditLogBaseSchema() (AuditLogBaseSchema, error) {
	var body AuditLogBaseSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAuditLogBaseSchema overwrites any union data inside the AuditLogResponseSchema_Result_Item as the provided AuditLogBaseSchema
func (t *AuditLogResponseSchema_Result_Item) FromAuditLogBaseSchema(v AuditLogBaseSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAuditLogBaseSchema performs a merge with any union data inside the AuditLogResponseSchema_Result_Item, using the provided AuditLogBaseSchema
func (t *AuditLogResponseSchema_Result_Item) MergeAuditLogBaseSchema(v AuditLogBaseSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBundleAuditLogResponseSchema returns the union data inside the AuditLogResponseSchema_Result_Item as a BundleAuditLogResponseSchema
func (t AuditLogResponseSchema_Result_Item) AsBundleAuditLogResponseSchema() (BundleAuditLogResponseSchema, error) {
	var body BundleAuditLogResponseSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBundleAuditLogResponseSchema overwrites any union data inside the AuditLogResponseSchema_Result_Item as the provided BundleAuditLogResponseSchema
func (t *AuditLogResponseSchema_Result_Item) FromBundleAuditLogResponseSchema(v BundleAuditLogResponseSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBundleAuditLogResponseSchema performs a merge with any union data inside the AuditLogResponseSchema_Result_Item, using the provided BundleAuditLogResponseSchema
func (t *AuditLogResponseSchema_Result_Item) MergeBundleAuditLogResponseSchema(v BundleAuditLogResponseSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIntegrationAuditLogResponseSchema returns the union data inside the AuditLogResponseSchema_Result_Item as a IntegrationAuditLogResponseSchema
func (t AuditLogResponseSchema_Result_Item) AsIntegrationAuditLogResponseSchema() (IntegrationAuditLogResponseSchema, error) {
	var body IntegrationAuditLogResponseSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIntegrationAuditLogResponseSchema overwrites any union data inside the AuditLogResponseSchema_Result_Item as the provided IntegrationAuditLogResponseSchema
func (t *AuditLogResponseSchema_Result_Item) FromIntegrationAuditLogResponseSchema(v IntegrationAuditLogResponseSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIntegrationAuditLogResponseSchema performs a merge with any union data inside the AuditLogResponseSchema_Result_Item, using the provided IntegrationAuditLogResponseSchema
func (t *AuditLogResponseSchema_Result_Item) MergeIntegrationAuditLogResponseSchema(v IntegrationAuditLogResponseSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIntegrationResourceAuditLogResponseSchema returns the union data inside the AuditLogResponseSchema_Result_Item as a IntegrationResourceAuditLogResponseSchema
func (t AuditLogResponseSchema_Result_Item) AsIntegrationResourceAuditLogResponseSchema() (IntegrationResourceAuditLogResponseSchema, error) {
	var body IntegrationResourceAuditLogResponseSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIntegrationResourceAuditLogResponseSchema overwrites any union data inside the AuditLogResponseSchema_Result_Item as the provided IntegrationResourceAuditLogResponseSchema
func (t *AuditLogResponseSchema_Result_Item) FromIntegrationResourceAuditLogResponseSchema(v IntegrationResourceAuditLogResponseSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIntegrationResourceAuditLogResponseSchema performs a merge with any union data inside the AuditLogResponseSchema_Result_Item, using the provided IntegrationResourceAuditLogResponseSchema
func (t *AuditLogResponseSchema_Result_Item) MergeIntegrationResourceAuditLogResponseSchema(v IntegrationResourceAuditLogResponseSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIntegrationResourceRoleAuditLogResponseSchema returns the union data inside the AuditLogResponseSchema_Result_Item as a IntegrationResourceRoleAuditLogResponseSchema
func (t AuditLogResponseSchema_Result_Item) AsIntegrationResourceRoleAuditLogResponseSchema() (IntegrationResourceRoleAuditLogResponseSchema, error) {
	var body IntegrationResourceRoleAuditLogResponseSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIntegrationResourceRoleAuditLogResponseSchema overwrites any union data inside the AuditLogResponseSchema_Result_Item as the provided IntegrationResourceRoleAuditLogResponseSchema
func (t *AuditLogResponseSchema_Result_Item) FromIntegrationResourceRoleAuditLogResponseSchema(v IntegrationResourceRoleAuditLogResponseSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIntegrationResourceRoleAuditLogResponseSchema performs a merge with any union data inside the AuditLogResponseSchema_Result_Item, using the provided IntegrationResourceRoleAuditLogResponseSchema
func (t *AuditLogResponseSchema_Result_Item) MergeIntegrationResourceRoleAuditLogResponseSchema(v IntegrationResourceRoleAuditLogResponseSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPolicyAuditLogResponseSchema returns the union data inside the AuditLogResponseSchema_Result_Item as a PolicyAuditLogResponseSchema
func (t AuditLogResponseSchema_Result_Item) AsPolicyAuditLogResponseSchema() (PolicyAuditLogResponseSchema, error) {
	var body PolicyAuditLogResponseSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPolicyAuditLogResponseSchema overwrites any union data inside the AuditLogResponseSchema_Result_Item as the provided PolicyAuditLogResponseSchema
func (t *AuditLogResponseSchema_Result_Item) FromPolicyAuditLogResponseSchema(v PolicyAuditLogResponseSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePolicyAuditLogResponseSchema performs a merge with any union data inside the AuditLogResponseSchema_Result_Item, using the provided PolicyAuditLogResponseSchema
func (t *AuditLogResponseSchema_Result_Item) MergePolicyAuditLogResponseSchema(v PolicyAuditLogResponseSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTicketAuditLogResponseSchema returns the union data inside the AuditLogResponseSchema_Result_Item as a TicketAuditLogResponseSchema
func (t AuditLogResponseSchema_Result_Item) AsTicketAuditLogResponseSchema() (TicketAuditLogResponseSchema, error) {
	var body TicketAuditLogResponseSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTicketAuditLogResponseSchema overwrites any union data inside the AuditLogResponseSchema_Result_Item as the provided TicketAuditLogResponseSchema
func (t *AuditLogResponseSchema_Result_Item) FromTicketAuditLogResponseSchema(v TicketAuditLogResponseSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTicketAuditLogResponseSchema performs a merge with any union data inside the AuditLogResponseSchema_Result_Item, using the provided TicketAuditLogResponseSchema
func (t *AuditLogResponseSchema_Result_Item) MergeTicketAuditLogResponseSchema(v TicketAuditLogResponseSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AuditLogResponseSchema_Result_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AuditLogResponseSchema_Result_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGroupMaintainerSchema returns the union data inside the IntegrationCreateBodySchema_Maintainers_Item as a GroupMaintainerSchema
func (t IntegrationCreateBodySchema_Maintainers_Item) AsGroupMaintainerSchema() (GroupMaintainerSchema, error) {
	var body GroupMaintainerSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGroupMaintainerSchema overwrites any union data inside the IntegrationCreateBodySchema_Maintainers_Item as the provided GroupMaintainerSchema
func (t *IntegrationCreateBodySchema_Maintainers_Item) FromGroupMaintainerSchema(v GroupMaintainerSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGroupMaintainerSchema performs a merge with any union data inside the IntegrationCreateBodySchema_Maintainers_Item, using the provided GroupMaintainerSchema
func (t *IntegrationCreateBodySchema_Maintainers_Item) MergeGroupMaintainerSchema(v GroupMaintainerSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUserMaintainerSchema returns the union data inside the IntegrationCreateBodySchema_Maintainers_Item as a UserMaintainerSchema
func (t IntegrationCreateBodySchema_Maintainers_Item) AsUserMaintainerSchema() (UserMaintainerSchema, error) {
	var body UserMaintainerSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserMaintainerSchema overwrites any union data inside the IntegrationCreateBodySchema_Maintainers_Item as the provided UserMaintainerSchema
func (t *IntegrationCreateBodySchema_Maintainers_Item) FromUserMaintainerSchema(v UserMaintainerSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserMaintainerSchema performs a merge with any union data inside the IntegrationCreateBodySchema_Maintainers_Item, using the provided UserMaintainerSchema
func (t *IntegrationCreateBodySchema_Maintainers_Item) MergeUserMaintainerSchema(v UserMaintainerSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IntegrationCreateBodySchema_Maintainers_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IntegrationCreateBodySchema_Maintainers_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPrerequisitePermissionCreateBodySchema returns the union data inside the IntegrationCreateBodySchema_PrerequisitePermissions_Item as a PrerequisitePermissionCreateBodySchema
func (t IntegrationCreateBodySchema_PrerequisitePermissions_Item) AsPrerequisitePermissionCreateBodySchema() (PrerequisitePermissionCreateBodySchema, error) {
	var body PrerequisitePermissionCreateBodySchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPrerequisitePermissionCreateBodySchema overwrites any union data inside the IntegrationCreateBodySchema_PrerequisitePermissions_Item as the provided PrerequisitePermissionCreateBodySchema
func (t *IntegrationCreateBodySchema_PrerequisitePermissions_Item) FromPrerequisitePermissionCreateBodySchema(v PrerequisitePermissionCreateBodySchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePrerequisitePermissionCreateBodySchema performs a merge with any union data inside the IntegrationCreateBodySchema_PrerequisitePermissions_Item, using the provided PrerequisitePermissionCreateBodySchema
func (t *IntegrationCreateBodySchema_PrerequisitePermissions_Item) MergePrerequisitePermissionCreateBodySchema(v PrerequisitePermissionCreateBodySchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IntegrationCreateBodySchema_PrerequisitePermissions_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IntegrationCreateBodySchema_PrerequisitePermissions_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMaintainerGroupResponseSchema returns the union data inside the IntegrationResourceResultSchema_Maintainers_Item as a MaintainerGroupResponseSchema
func (t IntegrationResourceResultSchema_Maintainers_Item) AsMaintainerGroupResponseSchema() (MaintainerGroupResponseSchema, error) {
	var body MaintainerGroupResponseSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMaintainerGroupResponseSchema overwrites any union data inside the IntegrationResourceResultSchema_Maintainers_Item as the provided MaintainerGroupResponseSchema
func (t *IntegrationResourceResultSchema_Maintainers_Item) FromMaintainerGroupResponseSchema(v MaintainerGroupResponseSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMaintainerGroupResponseSchema performs a merge with any union data inside the IntegrationResourceResultSchema_Maintainers_Item, using the provided MaintainerGroupResponseSchema
func (t *IntegrationResourceResultSchema_Maintainers_Item) MergeMaintainerGroupResponseSchema(v MaintainerGroupResponseSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMaintainerUserResponseSchema returns the union data inside the IntegrationResourceResultSchema_Maintainers_Item as a MaintainerUserResponseSchema
func (t IntegrationResourceResultSchema_Maintainers_Item) AsMaintainerUserResponseSchema() (MaintainerUserResponseSchema, error) {
	var body MaintainerUserResponseSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMaintainerUserResponseSchema overwrites any union data inside the IntegrationResourceResultSchema_Maintainers_Item as the provided MaintainerUserResponseSchema
func (t *IntegrationResourceResultSchema_Maintainers_Item) FromMaintainerUserResponseSchema(v MaintainerUserResponseSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMaintainerUserResponseSchema performs a merge with any union data inside the IntegrationResourceResultSchema_Maintainers_Item, using the provided MaintainerUserResponseSchema
func (t *IntegrationResourceResultSchema_Maintainers_Item) MergeMaintainerUserResponseSchema(v MaintainerUserResponseSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IntegrationResourceResultSchema_Maintainers_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IntegrationResourceResultSchema_Maintainers_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPrerequisiteRolePermissionResponseSchema returns the union data inside the IntegrationResourceResultSchema_PrerequisitePermissions_Item as a PrerequisiteRolePermissionResponseSchema
func (t IntegrationResourceResultSchema_PrerequisitePermissions_Item) AsPrerequisiteRolePermissionResponseSchema() (PrerequisiteRolePermissionResponseSchema, error) {
	var body PrerequisiteRolePermissionResponseSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPrerequisiteRolePermissionResponseSchema overwrites any union data inside the IntegrationResourceResultSchema_PrerequisitePermissions_Item as the provided PrerequisiteRolePermissionResponseSchema
func (t *IntegrationResourceResultSchema_PrerequisitePermissions_Item) FromPrerequisiteRolePermissionResponseSchema(v PrerequisiteRolePermissionResponseSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePrerequisiteRolePermissionResponseSchema performs a merge with any union data inside the IntegrationResourceResultSchema_PrerequisitePermissions_Item, using the provided PrerequisiteRolePermissionResponseSchema
func (t *IntegrationResourceResultSchema_PrerequisitePermissions_Item) MergePrerequisiteRolePermissionResponseSchema(v PrerequisiteRolePermissionResponseSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IntegrationResourceResultSchema_PrerequisitePermissions_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IntegrationResourceResultSchema_PrerequisitePermissions_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPrerequisitePermissionCreateBodySchema returns the union data inside the IntegrationResourceRoleCreateBodySchema_PrerequisitePermissions_Item as a PrerequisitePermissionCreateBodySchema
func (t IntegrationResourceRoleCreateBodySchema_PrerequisitePermissions_Item) AsPrerequisitePermissionCreateBodySchema() (PrerequisitePermissionCreateBodySchema, error) {
	var body PrerequisitePermissionCreateBodySchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPrerequisitePermissionCreateBodySchema overwrites any union data inside the IntegrationResourceRoleCreateBodySchema_PrerequisitePermissions_Item as the provided PrerequisitePermissionCreateBodySchema
func (t *IntegrationResourceRoleCreateBodySchema_PrerequisitePermissions_Item) FromPrerequisitePermissionCreateBodySchema(v PrerequisitePermissionCreateBodySchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePrerequisitePermissionCreateBodySchema performs a merge with any union data inside the IntegrationResourceRoleCreateBodySchema_PrerequisitePermissions_Item, using the provided PrerequisitePermissionCreateBodySchema
func (t *IntegrationResourceRoleCreateBodySchema_PrerequisitePermissions_Item) MergePrerequisitePermissionCreateBodySchema(v PrerequisitePermissionCreateBodySchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IntegrationResourceRoleCreateBodySchema_PrerequisitePermissions_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IntegrationResourceRoleCreateBodySchema_PrerequisitePermissions_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPrerequisiteRolePermissionResponseSchema returns the union data inside the IntegrationResourceRoleResultSchema_PrerequisitePermissions_Item as a PrerequisiteRolePermissionResponseSchema
func (t IntegrationResourceRoleResultSchema_PrerequisitePermissions_Item) AsPrerequisiteRolePermissionResponseSchema() (PrerequisiteRolePermissionResponseSchema, error) {
	var body PrerequisiteRolePermissionResponseSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPrerequisiteRolePermissionResponseSchema overwrites any union data inside the IntegrationResourceRoleResultSchema_PrerequisitePermissions_Item as the provided PrerequisiteRolePermissionResponseSchema
func (t *IntegrationResourceRoleResultSchema_PrerequisitePermissions_Item) FromPrerequisiteRolePermissionResponseSchema(v PrerequisiteRolePermissionResponseSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePrerequisiteRolePermissionResponseSchema performs a merge with any union data inside the IntegrationResourceRoleResultSchema_PrerequisitePermissions_Item, using the provided PrerequisiteRolePermissionResponseSchema
func (t *IntegrationResourceRoleResultSchema_PrerequisitePermissions_Item) MergePrerequisiteRolePermissionResponseSchema(v PrerequisiteRolePermissionResponseSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IntegrationResourceRoleResultSchema_PrerequisitePermissions_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IntegrationResourceRoleResultSchema_PrerequisitePermissions_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPrerequisitePermissionCreateBodySchema returns the union data inside the IntegrationResourceRolesUpdateBodySchema_PrerequisitePermissions_Item as a PrerequisitePermissionCreateBodySchema
func (t IntegrationResourceRolesUpdateBodySchema_PrerequisitePermissions_Item) AsPrerequisitePermissionCreateBodySchema() (PrerequisitePermissionCreateBodySchema, error) {
	var body PrerequisitePermissionCreateBodySchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPrerequisitePermissionCreateBodySchema overwrites any union data inside the IntegrationResourceRolesUpdateBodySchema_PrerequisitePermissions_Item as the provided PrerequisitePermissionCreateBodySchema
func (t *IntegrationResourceRolesUpdateBodySchema_PrerequisitePermissions_Item) FromPrerequisitePermissionCreateBodySchema(v PrerequisitePermissionCreateBodySchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePrerequisitePermissionCreateBodySchema performs a merge with any union data inside the IntegrationResourceRolesUpdateBodySchema_PrerequisitePermissions_Item, using the provided PrerequisitePermissionCreateBodySchema
func (t *IntegrationResourceRolesUpdateBodySchema_PrerequisitePermissions_Item) MergePrerequisitePermissionCreateBodySchema(v PrerequisitePermissionCreateBodySchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IntegrationResourceRolesUpdateBodySchema_PrerequisitePermissions_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IntegrationResourceRolesUpdateBodySchema_PrerequisitePermissions_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGroupMaintainerSchema returns the union data inside the IntegrationResourcesCreateBodySchema_Maintainers_Item as a GroupMaintainerSchema
func (t IntegrationResourcesCreateBodySchema_Maintainers_Item) AsGroupMaintainerSchema() (GroupMaintainerSchema, error) {
	var body GroupMaintainerSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGroupMaintainerSchema overwrites any union data inside the IntegrationResourcesCreateBodySchema_Maintainers_Item as the provided GroupMaintainerSchema
func (t *IntegrationResourcesCreateBodySchema_Maintainers_Item) FromGroupMaintainerSchema(v GroupMaintainerSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGroupMaintainerSchema performs a merge with any union data inside the IntegrationResourcesCreateBodySchema_Maintainers_Item, using the provided GroupMaintainerSchema
func (t *IntegrationResourcesCreateBodySchema_Maintainers_Item) MergeGroupMaintainerSchema(v GroupMaintainerSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUserMaintainerSchema returns the union data inside the IntegrationResourcesCreateBodySchema_Maintainers_Item as a UserMaintainerSchema
func (t IntegrationResourcesCreateBodySchema_Maintainers_Item) AsUserMaintainerSchema() (UserMaintainerSchema, error) {
	var body UserMaintainerSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserMaintainerSchema overwrites any union data inside the IntegrationResourcesCreateBodySchema_Maintainers_Item as the provided UserMaintainerSchema
func (t *IntegrationResourcesCreateBodySchema_Maintainers_Item) FromUserMaintainerSchema(v UserMaintainerSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserMaintainerSchema performs a merge with any union data inside the IntegrationResourcesCreateBodySchema_Maintainers_Item, using the provided UserMaintainerSchema
func (t *IntegrationResourcesCreateBodySchema_Maintainers_Item) MergeUserMaintainerSchema(v UserMaintainerSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IntegrationResourcesCreateBodySchema_Maintainers_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IntegrationResourcesCreateBodySchema_Maintainers_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPrerequisitePermissionCreateBodySchema returns the union data inside the IntegrationResourcesCreateBodySchema_PrerequisitePermissions_Item as a PrerequisitePermissionCreateBodySchema
func (t IntegrationResourcesCreateBodySchema_PrerequisitePermissions_Item) AsPrerequisitePermissionCreateBodySchema() (PrerequisitePermissionCreateBodySchema, error) {
	var body PrerequisitePermissionCreateBodySchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPrerequisitePermissionCreateBodySchema overwrites any union data inside the IntegrationResourcesCreateBodySchema_PrerequisitePermissions_Item as the provided PrerequisitePermissionCreateBodySchema
func (t *IntegrationResourcesCreateBodySchema_PrerequisitePermissions_Item) FromPrerequisitePermissionCreateBodySchema(v PrerequisitePermissionCreateBodySchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePrerequisitePermissionCreateBodySchema performs a merge with any union data inside the IntegrationResourcesCreateBodySchema_PrerequisitePermissions_Item, using the provided PrerequisitePermissionCreateBodySchema
func (t *IntegrationResourcesCreateBodySchema_PrerequisitePermissions_Item) MergePrerequisitePermissionCreateBodySchema(v PrerequisitePermissionCreateBodySchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IntegrationResourcesCreateBodySchema_PrerequisitePermissions_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IntegrationResourcesCreateBodySchema_PrerequisitePermissions_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGroupMaintainerSchema returns the union data inside the IntegrationResourcesUpdateBodySchema_Maintainers_Item as a GroupMaintainerSchema
func (t IntegrationResourcesUpdateBodySchema_Maintainers_Item) AsGroupMaintainerSchema() (GroupMaintainerSchema, error) {
	var body GroupMaintainerSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGroupMaintainerSchema overwrites any union data inside the IntegrationResourcesUpdateBodySchema_Maintainers_Item as the provided GroupMaintainerSchema
func (t *IntegrationResourcesUpdateBodySchema_Maintainers_Item) FromGroupMaintainerSchema(v GroupMaintainerSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGroupMaintainerSchema performs a merge with any union data inside the IntegrationResourcesUpdateBodySchema_Maintainers_Item, using the provided GroupMaintainerSchema
func (t *IntegrationResourcesUpdateBodySchema_Maintainers_Item) MergeGroupMaintainerSchema(v GroupMaintainerSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUserMaintainerSchema returns the union data inside the IntegrationResourcesUpdateBodySchema_Maintainers_Item as a UserMaintainerSchema
func (t IntegrationResourcesUpdateBodySchema_Maintainers_Item) AsUserMaintainerSchema() (UserMaintainerSchema, error) {
	var body UserMaintainerSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserMaintainerSchema overwrites any union data inside the IntegrationResourcesUpdateBodySchema_Maintainers_Item as the provided UserMaintainerSchema
func (t *IntegrationResourcesUpdateBodySchema_Maintainers_Item) FromUserMaintainerSchema(v UserMaintainerSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserMaintainerSchema performs a merge with any union data inside the IntegrationResourcesUpdateBodySchema_Maintainers_Item, using the provided UserMaintainerSchema
func (t *IntegrationResourcesUpdateBodySchema_Maintainers_Item) MergeUserMaintainerSchema(v UserMaintainerSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IntegrationResourcesUpdateBodySchema_Maintainers_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IntegrationResourcesUpdateBodySchema_Maintainers_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPrerequisitePermissionCreateBodySchema returns the union data inside the IntegrationResourcesUpdateBodySchema_PrerequisitePermissions_Item as a PrerequisitePermissionCreateBodySchema
func (t IntegrationResourcesUpdateBodySchema_PrerequisitePermissions_Item) AsPrerequisitePermissionCreateBodySchema() (PrerequisitePermissionCreateBodySchema, error) {
	var body PrerequisitePermissionCreateBodySchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPrerequisitePermissionCreateBodySchema overwrites any union data inside the IntegrationResourcesUpdateBodySchema_PrerequisitePermissions_Item as the provided PrerequisitePermissionCreateBodySchema
func (t *IntegrationResourcesUpdateBodySchema_PrerequisitePermissions_Item) FromPrerequisitePermissionCreateBodySchema(v PrerequisitePermissionCreateBodySchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePrerequisitePermissionCreateBodySchema performs a merge with any union data inside the IntegrationResourcesUpdateBodySchema_PrerequisitePermissions_Item, using the provided PrerequisitePermissionCreateBodySchema
func (t *IntegrationResourcesUpdateBodySchema_PrerequisitePermissions_Item) MergePrerequisitePermissionCreateBodySchema(v PrerequisitePermissionCreateBodySchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IntegrationResourcesUpdateBodySchema_PrerequisitePermissions_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IntegrationResourcesUpdateBodySchema_PrerequisitePermissions_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMaintainerGroupResponseSchema returns the union data inside the IntegrationResultSchema_Maintainers_Item as a MaintainerGroupResponseSchema
func (t IntegrationResultSchema_Maintainers_Item) AsMaintainerGroupResponseSchema() (MaintainerGroupResponseSchema, error) {
	var body MaintainerGroupResponseSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMaintainerGroupResponseSchema overwrites any union data inside the IntegrationResultSchema_Maintainers_Item as the provided MaintainerGroupResponseSchema
func (t *IntegrationResultSchema_Maintainers_Item) FromMaintainerGroupResponseSchema(v MaintainerGroupResponseSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMaintainerGroupResponseSchema performs a merge with any union data inside the IntegrationResultSchema_Maintainers_Item, using the provided MaintainerGroupResponseSchema
func (t *IntegrationResultSchema_Maintainers_Item) MergeMaintainerGroupResponseSchema(v MaintainerGroupResponseSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMaintainerUserResponseSchema returns the union data inside the IntegrationResultSchema_Maintainers_Item as a MaintainerUserResponseSchema
func (t IntegrationResultSchema_Maintainers_Item) AsMaintainerUserResponseSchema() (MaintainerUserResponseSchema, error) {
	var body MaintainerUserResponseSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMaintainerUserResponseSchema overwrites any union data inside the IntegrationResultSchema_Maintainers_Item as the provided MaintainerUserResponseSchema
func (t *IntegrationResultSchema_Maintainers_Item) FromMaintainerUserResponseSchema(v MaintainerUserResponseSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMaintainerUserResponseSchema performs a merge with any union data inside the IntegrationResultSchema_Maintainers_Item, using the provided MaintainerUserResponseSchema
func (t *IntegrationResultSchema_Maintainers_Item) MergeMaintainerUserResponseSchema(v MaintainerUserResponseSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IntegrationResultSchema_Maintainers_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IntegrationResultSchema_Maintainers_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPrerequisiteRolePermissionResponseSchema returns the union data inside the IntegrationResultSchema_PrerequisitePermissions_Item as a PrerequisiteRolePermissionResponseSchema
func (t IntegrationResultSchema_PrerequisitePermissions_Item) AsPrerequisiteRolePermissionResponseSchema() (PrerequisiteRolePermissionResponseSchema, error) {
	var body PrerequisiteRolePermissionResponseSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPrerequisiteRolePermissionResponseSchema overwrites any union data inside the IntegrationResultSchema_PrerequisitePermissions_Item as the provided PrerequisiteRolePermissionResponseSchema
func (t *IntegrationResultSchema_PrerequisitePermissions_Item) FromPrerequisiteRolePermissionResponseSchema(v PrerequisiteRolePermissionResponseSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePrerequisiteRolePermissionResponseSchema performs a merge with any union data inside the IntegrationResultSchema_PrerequisitePermissions_Item, using the provided PrerequisiteRolePermissionResponseSchema
func (t *IntegrationResultSchema_PrerequisitePermissions_Item) MergePrerequisiteRolePermissionResponseSchema(v PrerequisiteRolePermissionResponseSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IntegrationResultSchema_PrerequisitePermissions_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IntegrationResultSchema_PrerequisitePermissions_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGroupMaintainerSchema returns the union data inside the IntegrationsUpdateBodySchema_Maintainers_Item as a GroupMaintainerSchema
func (t IntegrationsUpdateBodySchema_Maintainers_Item) AsGroupMaintainerSchema() (GroupMaintainerSchema, error) {
	var body GroupMaintainerSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGroupMaintainerSchema overwrites any union data inside the IntegrationsUpdateBodySchema_Maintainers_Item as the provided GroupMaintainerSchema
func (t *IntegrationsUpdateBodySchema_Maintainers_Item) FromGroupMaintainerSchema(v GroupMaintainerSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGroupMaintainerSchema performs a merge with any union data inside the IntegrationsUpdateBodySchema_Maintainers_Item, using the provided GroupMaintainerSchema
func (t *IntegrationsUpdateBodySchema_Maintainers_Item) MergeGroupMaintainerSchema(v GroupMaintainerSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUserMaintainerSchema returns the union data inside the IntegrationsUpdateBodySchema_Maintainers_Item as a UserMaintainerSchema
func (t IntegrationsUpdateBodySchema_Maintainers_Item) AsUserMaintainerSchema() (UserMaintainerSchema, error) {
	var body UserMaintainerSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserMaintainerSchema overwrites any union data inside the IntegrationsUpdateBodySchema_Maintainers_Item as the provided UserMaintainerSchema
func (t *IntegrationsUpdateBodySchema_Maintainers_Item) FromUserMaintainerSchema(v UserMaintainerSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserMaintainerSchema performs a merge with any union data inside the IntegrationsUpdateBodySchema_Maintainers_Item, using the provided UserMaintainerSchema
func (t *IntegrationsUpdateBodySchema_Maintainers_Item) MergeUserMaintainerSchema(v UserMaintainerSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IntegrationsUpdateBodySchema_Maintainers_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IntegrationsUpdateBodySchema_Maintainers_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPrerequisitePermissionCreateBodySchema returns the union data inside the IntegrationsUpdateBodySchema_PrerequisitePermissions_Item as a PrerequisitePermissionCreateBodySchema
func (t IntegrationsUpdateBodySchema_PrerequisitePermissions_Item) AsPrerequisitePermissionCreateBodySchema() (PrerequisitePermissionCreateBodySchema, error) {
	var body PrerequisitePermissionCreateBodySchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPrerequisitePermissionCreateBodySchema overwrites any union data inside the IntegrationsUpdateBodySchema_PrerequisitePermissions_Item as the provided PrerequisitePermissionCreateBodySchema
func (t *IntegrationsUpdateBodySchema_PrerequisitePermissions_Item) FromPrerequisitePermissionCreateBodySchema(v PrerequisitePermissionCreateBodySchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePrerequisitePermissionCreateBodySchema performs a merge with any union data inside the IntegrationsUpdateBodySchema_PrerequisitePermissions_Item, using the provided PrerequisitePermissionCreateBodySchema
func (t *IntegrationsUpdateBodySchema_PrerequisitePermissions_Item) MergePrerequisitePermissionCreateBodySchema(v PrerequisitePermissionCreateBodySchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IntegrationsUpdateBodySchema_PrerequisitePermissions_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IntegrationsUpdateBodySchema_PrerequisitePermissions_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AccessRequestForwardsIndex request
	AccessRequestForwardsIndex(ctx context.Context, params *AccessRequestForwardsIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccessRequestForwardsCreateWithBody request with any body
	AccessRequestForwardsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccessRequestForwardsCreate(ctx context.Context, body AccessRequestForwardsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccessRequestForwardsDestroy request
	AccessRequestForwardsDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccessRequestForwardsShow request
	AccessRequestForwardsShow(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccessRequestsCreateWithBody request with any body
	AccessRequestsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccessRequestsCreate(ctx context.Context, body AccessRequestsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccessRequestsShow request
	AccessRequestsShow(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccessReviewForwardsIndex request
	AccessReviewForwardsIndex(ctx context.Context, params *AccessReviewForwardsIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccessReviewForwardsCreateWithBody request with any body
	AccessReviewForwardsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccessReviewForwardsCreate(ctx context.Context, body AccessReviewForwardsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccessReviewForwardsDestroy request
	AccessReviewForwardsDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccessReviewForwardsShow request
	AccessReviewForwardsShow(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsIndex request
	AccountsIndex(ctx context.Context, params *AccountsIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentTokensIndex request
	AgentTokensIndex(ctx context.Context, params *AgentTokensIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentTokensCreateWithBody request with any body
	AgentTokensCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AgentTokensCreate(ctx context.Context, body AgentTokensCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentTokensDestroy request
	AgentTokensDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentTokensShow request
	AgentTokensShow(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AgentTokensUpdateWithBody request with any body
	AgentTokensUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AgentTokensUpdate(ctx context.Context, id openapi_types.UUID, body AgentTokensUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuditLogsSearchWithBody request with any body
	AuditLogsSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuditLogsSearch(ctx context.Context, body AuditLogsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundlesIndex request
	BundlesIndex(ctx context.Context, params *BundlesIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundlesCreateWithBody request with any body
	BundlesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundlesCreate(ctx context.Context, body BundlesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundlesDestroy request
	BundlesDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundlesShow request
	BundlesShow(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BundlesUpdateWithBody request with any body
	BundlesUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BundlesUpdate(ctx context.Context, id openapi_types.UUID, body BundlesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DirectoryGroupsIndex request
	DirectoryGroupsIndex(ctx context.Context, params *DirectoryGroupsIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IntegrationsIndex request
	IntegrationsIndex(ctx context.Context, params *IntegrationsIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IntegrationsCreateWithBody request with any body
	IntegrationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IntegrationsCreate(ctx context.Context, body IntegrationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IntegrationsDestroy request
	IntegrationsDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IntegrationsShow request
	IntegrationsShow(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IntegrationsUpdateWithBody request with any body
	IntegrationsUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IntegrationsUpdate(ctx context.Context, id openapi_types.UUID, body IntegrationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PermissionsIndex request
	PermissionsIndex(ctx context.Context, params *PermissionsIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PoliciesIndex request
	PoliciesIndex(ctx context.Context, params *PoliciesIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PoliciesCreateWithBody request with any body
	PoliciesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PoliciesCreate(ctx context.Context, body PoliciesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PoliciesDestroy request
	PoliciesDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PoliciesShow request
	PoliciesShow(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PoliciesUpdateWithBody request with any body
	PoliciesUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PoliciesUpdate(ctx context.Context, id openapi_types.UUID, body PoliciesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResourcesIndex request
	ResourcesIndex(ctx context.Context, params *ResourcesIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResourcesCreateWithBody request with any body
	ResourcesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResourcesCreate(ctx context.Context, body ResourcesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResourcesDelete request
	ResourcesDelete(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResourcesShow request
	ResourcesShow(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResourcesUpdateWithBody request with any body
	ResourcesUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResourcesUpdate(ctx context.Context, id openapi_types.UUID, body ResourcesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RolesIndex request
	RolesIndex(ctx context.Context, params *RolesIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RolesCreateWithBody request with any body
	RolesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RolesCreate(ctx context.Context, body RolesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RoleDelete request
	RoleDelete(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RolesShow request
	RolesShow(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RolesUpdateWithBody request with any body
	RolesUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RolesUpdate(ctx context.Context, id openapi_types.UUID, body RolesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersIndex request
	UsersIndex(ctx context.Context, params *UsersIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAccountsIndex request
	UsersAccountsIndex(ctx context.Context, params *UsersAccountsIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAccountsCreateWithBody request with any body
	UsersAccountsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersAccountsCreate(ctx context.Context, body UsersAccountsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAccountsDelete request
	UsersAccountsDelete(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowsIndex request
	WorkflowsIndex(ctx context.Context, params *WorkflowsIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowsCreateWithBody request with any body
	WorkflowsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkflowsCreate(ctx context.Context, body WorkflowsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowsDestroy request
	WorkflowsDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowsShow request
	WorkflowsShow(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowsUpdateWithBody request with any body
	WorkflowsUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkflowsUpdate(ctx context.Context, id openapi_types.UUID, body WorkflowsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AccessRequestForwardsIndex(ctx context.Context, params *AccessRequestForwardsIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessRequestForwardsIndexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessRequestForwardsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessRequestForwardsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessRequestForwardsCreate(ctx context.Context, body AccessRequestForwardsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessRequestForwardsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessRequestForwardsDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessRequestForwardsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessRequestForwardsShow(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessRequestForwardsShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessRequestsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessRequestsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessRequestsCreate(ctx context.Context, body AccessRequestsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessRequestsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessRequestsShow(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessRequestsShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessReviewForwardsIndex(ctx context.Context, params *AccessReviewForwardsIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessReviewForwardsIndexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessReviewForwardsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessReviewForwardsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessReviewForwardsCreate(ctx context.Context, body AccessReviewForwardsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessReviewForwardsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessReviewForwardsDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessReviewForwardsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessReviewForwardsShow(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessReviewForwardsShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsIndex(ctx context.Context, params *AccountsIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsIndexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentTokensIndex(ctx context.Context, params *AgentTokensIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAgentTokensIndexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentTokensCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAgentTokensCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentTokensCreate(ctx context.Context, body AgentTokensCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAgentTokensCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentTokensDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAgentTokensDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentTokensShow(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAgentTokensShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentTokensUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAgentTokensUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AgentTokensUpdate(ctx context.Context, id openapi_types.UUID, body AgentTokensUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAgentTokensUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuditLogsSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuditLogsSearchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuditLogsSearch(ctx context.Context, body AuditLogsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuditLogsSearchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlesIndex(ctx context.Context, params *BundlesIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlesIndexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlesCreate(ctx context.Context, body BundlesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlesDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlesShow(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlesShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlesUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BundlesUpdate(ctx context.Context, id openapi_types.UUID, body BundlesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBundlesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DirectoryGroupsIndex(ctx context.Context, params *DirectoryGroupsIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDirectoryGroupsIndexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IntegrationsIndex(ctx context.Context, params *IntegrationsIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntegrationsIndexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IntegrationsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntegrationsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IntegrationsCreate(ctx context.Context, body IntegrationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntegrationsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IntegrationsDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntegrationsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IntegrationsShow(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntegrationsShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IntegrationsUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntegrationsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IntegrationsUpdate(ctx context.Context, id openapi_types.UUID, body IntegrationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIntegrationsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PermissionsIndex(ctx context.Context, params *PermissionsIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPermissionsIndexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesIndex(ctx context.Context, params *PoliciesIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesIndexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesCreate(ctx context.Context, body PoliciesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesShow(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesUpdate(ctx context.Context, id openapi_types.UUID, body PoliciesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResourcesIndex(ctx context.Context, params *ResourcesIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResourcesIndexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResourcesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResourcesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResourcesCreate(ctx context.Context, body ResourcesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResourcesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResourcesDelete(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResourcesDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResourcesShow(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResourcesShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResourcesUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResourcesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResourcesUpdate(ctx context.Context, id openapi_types.UUID, body ResourcesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResourcesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RolesIndex(ctx context.Context, params *RolesIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRolesIndexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RolesCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRolesCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RolesCreate(ctx context.Context, body RolesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRolesCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RoleDelete(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRoleDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RolesShow(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRolesShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RolesUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRolesUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RolesUpdate(ctx context.Context, id openapi_types.UUID, body RolesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRolesUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersIndex(ctx context.Context, params *UsersIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersIndexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAccountsIndex(ctx context.Context, params *UsersAccountsIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAccountsIndexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAccountsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAccountsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAccountsCreate(ctx context.Context, body UsersAccountsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAccountsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAccountsDelete(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAccountsDeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowsIndex(ctx context.Context, params *WorkflowsIndexParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowsIndexRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowsCreate(ctx context.Context, body WorkflowsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowsDestroy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowsDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowsShow(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowsShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowsUpdateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowsUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowsUpdate(ctx context.Context, id openapi_types.UUID, body WorkflowsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowsUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAccessRequestForwardsIndexRequest generates requests for AccessRequestForwardsIndex
func NewAccessRequestForwardsIndexRequest(server string, params *AccessRequestForwardsIndexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/accessRequestForwards")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccessRequestForwardsCreateRequest calls the generic AccessRequestForwardsCreate builder with application/json body
func NewAccessRequestForwardsCreateRequest(server string, body AccessRequestForwardsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccessRequestForwardsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAccessRequestForwardsCreateRequestWithBody generates requests for AccessRequestForwardsCreate with any type of body
func NewAccessRequestForwardsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/accessRequestForwards")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccessRequestForwardsDestroyRequest generates requests for AccessRequestForwardsDestroy
func NewAccessRequestForwardsDestroyRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/accessRequestForwards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccessRequestForwardsShowRequest generates requests for AccessRequestForwardsShow
func NewAccessRequestForwardsShowRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/accessRequestForwards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccessRequestsCreateRequest calls the generic AccessRequestsCreate builder with application/json body
func NewAccessRequestsCreateRequest(server string, body AccessRequestsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccessRequestsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAccessRequestsCreateRequestWithBody generates requests for AccessRequestsCreate with any type of body
func NewAccessRequestsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/accessRequests")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccessRequestsShowRequest generates requests for AccessRequestsShow
func NewAccessRequestsShowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/accessRequests/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccessReviewForwardsIndexRequest generates requests for AccessReviewForwardsIndex
func NewAccessReviewForwardsIndexRequest(server string, params *AccessReviewForwardsIndexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/accessReviewForwards")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccessReviewForwardsCreateRequest calls the generic AccessReviewForwardsCreate builder with application/json body
func NewAccessReviewForwardsCreateRequest(server string, body AccessReviewForwardsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccessReviewForwardsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAccessReviewForwardsCreateRequestWithBody generates requests for AccessReviewForwardsCreate with any type of body
func NewAccessReviewForwardsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/accessReviewForwards")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccessReviewForwardsDestroyRequest generates requests for AccessReviewForwardsDestroy
func NewAccessReviewForwardsDestroyRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/accessReviewForwards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccessReviewForwardsShowRequest generates requests for AccessReviewForwardsShow
func NewAccessReviewForwardsShowRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/accessReviewForwards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountsIndexRequest generates requests for AccountsIndex
func NewAccountsIndexRequest(server string, params *AccountsIndexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "integrationId", runtime.ParamLocationQuery, params.IntegrationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentTokensIndexRequest generates requests for AgentTokensIndex
func NewAgentTokensIndexRequest(server string, params *AgentTokensIndexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/agentTokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentTokensCreateRequest calls the generic AgentTokensCreate builder with application/json body
func NewAgentTokensCreateRequest(server string, body AgentTokensCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAgentTokensCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAgentTokensCreateRequestWithBody generates requests for AgentTokensCreate with any type of body
func NewAgentTokensCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/agentTokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAgentTokensDestroyRequest generates requests for AgentTokensDestroy
func NewAgentTokensDestroyRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/agentTokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentTokensShowRequest generates requests for AgentTokensShow
func NewAgentTokensShowRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/agentTokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAgentTokensUpdateRequest calls the generic AgentTokensUpdate builder with application/json body
func NewAgentTokensUpdateRequest(server string, id openapi_types.UUID, body AgentTokensUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAgentTokensUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAgentTokensUpdateRequestWithBody generates requests for AgentTokensUpdate with any type of body
func NewAgentTokensUpdateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/agentTokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuditLogsSearchRequest calls the generic AuditLogsSearch builder with application/json body
func NewAuditLogsSearchRequest(server string, body AuditLogsSearchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuditLogsSearchRequestWithBody(server, "application/json", bodyReader)
}

// NewAuditLogsSearchRequestWithBody generates requests for AuditLogsSearch with any type of body
func NewAuditLogsSearchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/auditLogs/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBundlesIndexRequest generates requests for BundlesIndex
func NewBundlesIndexRequest(server string, params *BundlesIndexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/bundles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBundlesCreateRequest calls the generic BundlesCreate builder with application/json body
func NewBundlesCreateRequest(server string, body BundlesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundlesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewBundlesCreateRequestWithBody generates requests for BundlesCreate with any type of body
func NewBundlesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/bundles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBundlesDestroyRequest generates requests for BundlesDestroy
func NewBundlesDestroyRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/bundles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBundlesShowRequest generates requests for BundlesShow
func NewBundlesShowRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/bundles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBundlesUpdateRequest calls the generic BundlesUpdate builder with application/json body
func NewBundlesUpdateRequest(server string, id openapi_types.UUID, body BundlesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBundlesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewBundlesUpdateRequestWithBody generates requests for BundlesUpdate with any type of body
func NewBundlesUpdateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/bundles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDirectoryGroupsIndexRequest generates requests for DirectoryGroupsIndex
func NewDirectoryGroupsIndexRequest(server string, params *DirectoryGroupsIndexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/directoryGroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortFields", runtime.ParamLocationQuery, *params.SortFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIntegrationsIndexRequest generates requests for IntegrationsIndex
func NewIntegrationsIndexRequest(server string, params *IntegrationsIndexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/integrations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIntegrationsCreateRequest calls the generic IntegrationsCreate builder with application/json body
func NewIntegrationsCreateRequest(server string, body IntegrationsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIntegrationsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewIntegrationsCreateRequestWithBody generates requests for IntegrationsCreate with any type of body
func NewIntegrationsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/integrations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIntegrationsDestroyRequest generates requests for IntegrationsDestroy
func NewIntegrationsDestroyRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/integrations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIntegrationsShowRequest generates requests for IntegrationsShow
func NewIntegrationsShowRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/integrations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIntegrationsUpdateRequest calls the generic IntegrationsUpdate builder with application/json body
func NewIntegrationsUpdateRequest(server string, id openapi_types.UUID, body IntegrationsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIntegrationsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewIntegrationsUpdateRequestWithBody generates requests for IntegrationsUpdate with any type of body
func NewIntegrationsUpdateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/integrations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPermissionsIndexRequest generates requests for PermissionsIndex
func NewPermissionsIndexRequest(server string, params *PermissionsIndexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/permissions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPoliciesIndexRequest generates requests for PoliciesIndex
func NewPoliciesIndexRequest(server string, params *PoliciesIndexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPoliciesCreateRequest calls the generic PoliciesCreate builder with application/json body
func NewPoliciesCreateRequest(server string, body PoliciesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPoliciesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPoliciesCreateRequestWithBody generates requests for PoliciesCreate with any type of body
func NewPoliciesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPoliciesDestroyRequest generates requests for PoliciesDestroy
func NewPoliciesDestroyRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPoliciesShowRequest generates requests for PoliciesShow
func NewPoliciesShowRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPoliciesUpdateRequest calls the generic PoliciesUpdate builder with application/json body
func NewPoliciesUpdateRequest(server string, id openapi_types.UUID, body PoliciesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPoliciesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPoliciesUpdateRequestWithBody generates requests for PoliciesUpdate with any type of body
func NewPoliciesUpdateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResourcesIndexRequest generates requests for ResourcesIndex
func NewResourcesIndexRequest(server string, params *ResourcesIndexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/resources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "integrationId", runtime.ParamLocationQuery, params.IntegrationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResourcesCreateRequest calls the generic ResourcesCreate builder with application/json body
func NewResourcesCreateRequest(server string, body ResourcesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResourcesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewResourcesCreateRequestWithBody generates requests for ResourcesCreate with any type of body
func NewResourcesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/resources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResourcesDeleteRequest generates requests for ResourcesDelete
func NewResourcesDeleteRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResourcesShowRequest generates requests for ResourcesShow
func NewResourcesShowRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResourcesUpdateRequest calls the generic ResourcesUpdate builder with application/json body
func NewResourcesUpdateRequest(server string, id openapi_types.UUID, body ResourcesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResourcesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewResourcesUpdateRequestWithBody generates requests for ResourcesUpdate with any type of body
func NewResourcesUpdateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRolesIndexRequest generates requests for RolesIndex
func NewRolesIndexRequest(server string, params *RolesIndexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resourceId", runtime.ParamLocationQuery, params.ResourceId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRolesCreateRequest calls the generic RolesCreate builder with application/json body
func NewRolesCreateRequest(server string, body RolesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRolesCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewRolesCreateRequestWithBody generates requests for RolesCreate with any type of body
func NewRolesCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRoleDeleteRequest generates requests for RoleDelete
func NewRoleDeleteRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRolesShowRequest generates requests for RolesShow
func NewRolesShowRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRolesUpdateRequest calls the generic RolesUpdate builder with application/json body
func NewRolesUpdateRequest(server string, id openapi_types.UUID, body RolesUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRolesUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewRolesUpdateRequestWithBody generates requests for RolesUpdate with any type of body
func NewRolesUpdateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersIndexRequest generates requests for UsersIndex
func NewUsersIndexRequest(server string, params *UsersIndexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersAccountsIndexRequest generates requests for UsersAccountsIndex
func NewUsersAccountsIndexRequest(server string, params *UsersAccountsIndexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/usersAccounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountId", runtime.ParamLocationQuery, *params.AccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersAccountsCreateRequest calls the generic UsersAccountsCreate builder with application/json body
func NewUsersAccountsCreateRequest(server string, body UsersAccountsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersAccountsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewUsersAccountsCreateRequestWithBody generates requests for UsersAccountsCreate with any type of body
func NewUsersAccountsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/usersAccounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersAccountsDeleteRequest generates requests for UsersAccountsDelete
func NewUsersAccountsDeleteRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/usersAccounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkflowsIndexRequest generates requests for WorkflowsIndex
func NewWorkflowsIndexRequest(server string, params *WorkflowsIndexParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/workflows")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkflowsCreateRequest calls the generic WorkflowsCreate builder with application/json body
func NewWorkflowsCreateRequest(server string, body WorkflowsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkflowsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewWorkflowsCreateRequestWithBody generates requests for WorkflowsCreate with any type of body
func NewWorkflowsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/workflows")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkflowsDestroyRequest generates requests for WorkflowsDestroy
func NewWorkflowsDestroyRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/workflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkflowsShowRequest generates requests for WorkflowsShow
func NewWorkflowsShowRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/workflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkflowsUpdateRequest calls the generic WorkflowsUpdate builder with application/json body
func NewWorkflowsUpdateRequest(server string, id openapi_types.UUID, body WorkflowsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkflowsUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewWorkflowsUpdateRequestWithBody generates requests for WorkflowsUpdate with any type of body
func NewWorkflowsUpdateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/v1/workflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AccessRequestForwardsIndexWithResponse request
	AccessRequestForwardsIndexWithResponse(ctx context.Context, params *AccessRequestForwardsIndexParams, reqEditors ...RequestEditorFn) (*AccessRequestForwardsIndexResponse, error)

	// AccessRequestForwardsCreateWithBodyWithResponse request with any body
	AccessRequestForwardsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccessRequestForwardsCreateResponse, error)

	AccessRequestForwardsCreateWithResponse(ctx context.Context, body AccessRequestForwardsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccessRequestForwardsCreateResponse, error)

	// AccessRequestForwardsDestroyWithResponse request
	AccessRequestForwardsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*AccessRequestForwardsDestroyResponse, error)

	// AccessRequestForwardsShowWithResponse request
	AccessRequestForwardsShowWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*AccessRequestForwardsShowResponse, error)

	// AccessRequestsCreateWithBodyWithResponse request with any body
	AccessRequestsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccessRequestsCreateResponse, error)

	AccessRequestsCreateWithResponse(ctx context.Context, body AccessRequestsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccessRequestsCreateResponse, error)

	// AccessRequestsShowWithResponse request
	AccessRequestsShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AccessRequestsShowResponse, error)

	// AccessReviewForwardsIndexWithResponse request
	AccessReviewForwardsIndexWithResponse(ctx context.Context, params *AccessReviewForwardsIndexParams, reqEditors ...RequestEditorFn) (*AccessReviewForwardsIndexResponse, error)

	// AccessReviewForwardsCreateWithBodyWithResponse request with any body
	AccessReviewForwardsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccessReviewForwardsCreateResponse, error)

	AccessReviewForwardsCreateWithResponse(ctx context.Context, body AccessReviewForwardsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccessReviewForwardsCreateResponse, error)

	// AccessReviewForwardsDestroyWithResponse request
	AccessReviewForwardsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*AccessReviewForwardsDestroyResponse, error)

	// AccessReviewForwardsShowWithResponse request
	AccessReviewForwardsShowWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*AccessReviewForwardsShowResponse, error)

	// AccountsIndexWithResponse request
	AccountsIndexWithResponse(ctx context.Context, params *AccountsIndexParams, reqEditors ...RequestEditorFn) (*AccountsIndexResponse, error)

	// AgentTokensIndexWithResponse request
	AgentTokensIndexWithResponse(ctx context.Context, params *AgentTokensIndexParams, reqEditors ...RequestEditorFn) (*AgentTokensIndexResponse, error)

	// AgentTokensCreateWithBodyWithResponse request with any body
	AgentTokensCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AgentTokensCreateResponse, error)

	AgentTokensCreateWithResponse(ctx context.Context, body AgentTokensCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AgentTokensCreateResponse, error)

	// AgentTokensDestroyWithResponse request
	AgentTokensDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*AgentTokensDestroyResponse, error)

	// AgentTokensShowWithResponse request
	AgentTokensShowWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*AgentTokensShowResponse, error)

	// AgentTokensUpdateWithBodyWithResponse request with any body
	AgentTokensUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AgentTokensUpdateResponse, error)

	AgentTokensUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body AgentTokensUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AgentTokensUpdateResponse, error)

	// AuditLogsSearchWithBodyWithResponse request with any body
	AuditLogsSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuditLogsSearchResponse, error)

	AuditLogsSearchWithResponse(ctx context.Context, body AuditLogsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*AuditLogsSearchResponse, error)

	// BundlesIndexWithResponse request
	BundlesIndexWithResponse(ctx context.Context, params *BundlesIndexParams, reqEditors ...RequestEditorFn) (*BundlesIndexResponse, error)

	// BundlesCreateWithBodyWithResponse request with any body
	BundlesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlesCreateResponse, error)

	BundlesCreateWithResponse(ctx context.Context, body BundlesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlesCreateResponse, error)

	// BundlesDestroyWithResponse request
	BundlesDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*BundlesDestroyResponse, error)

	// BundlesShowWithResponse request
	BundlesShowWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*BundlesShowResponse, error)

	// BundlesUpdateWithBodyWithResponse request with any body
	BundlesUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlesUpdateResponse, error)

	BundlesUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body BundlesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlesUpdateResponse, error)

	// DirectoryGroupsIndexWithResponse request
	DirectoryGroupsIndexWithResponse(ctx context.Context, params *DirectoryGroupsIndexParams, reqEditors ...RequestEditorFn) (*DirectoryGroupsIndexResponse, error)

	// IntegrationsIndexWithResponse request
	IntegrationsIndexWithResponse(ctx context.Context, params *IntegrationsIndexParams, reqEditors ...RequestEditorFn) (*IntegrationsIndexResponse, error)

	// IntegrationsCreateWithBodyWithResponse request with any body
	IntegrationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IntegrationsCreateResponse, error)

	IntegrationsCreateWithResponse(ctx context.Context, body IntegrationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*IntegrationsCreateResponse, error)

	// IntegrationsDestroyWithResponse request
	IntegrationsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*IntegrationsDestroyResponse, error)

	// IntegrationsShowWithResponse request
	IntegrationsShowWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*IntegrationsShowResponse, error)

	// IntegrationsUpdateWithBodyWithResponse request with any body
	IntegrationsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IntegrationsUpdateResponse, error)

	IntegrationsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body IntegrationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*IntegrationsUpdateResponse, error)

	// PermissionsIndexWithResponse request
	PermissionsIndexWithResponse(ctx context.Context, params *PermissionsIndexParams, reqEditors ...RequestEditorFn) (*PermissionsIndexResponse, error)

	// PoliciesIndexWithResponse request
	PoliciesIndexWithResponse(ctx context.Context, params *PoliciesIndexParams, reqEditors ...RequestEditorFn) (*PoliciesIndexResponse, error)

	// PoliciesCreateWithBodyWithResponse request with any body
	PoliciesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PoliciesCreateResponse, error)

	PoliciesCreateWithResponse(ctx context.Context, body PoliciesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PoliciesCreateResponse, error)

	// PoliciesDestroyWithResponse request
	PoliciesDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PoliciesDestroyResponse, error)

	// PoliciesShowWithResponse request
	PoliciesShowWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PoliciesShowResponse, error)

	// PoliciesUpdateWithBodyWithResponse request with any body
	PoliciesUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PoliciesUpdateResponse, error)

	PoliciesUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body PoliciesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PoliciesUpdateResponse, error)

	// ResourcesIndexWithResponse request
	ResourcesIndexWithResponse(ctx context.Context, params *ResourcesIndexParams, reqEditors ...RequestEditorFn) (*ResourcesIndexResponse, error)

	// ResourcesCreateWithBodyWithResponse request with any body
	ResourcesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResourcesCreateResponse, error)

	ResourcesCreateWithResponse(ctx context.Context, body ResourcesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ResourcesCreateResponse, error)

	// ResourcesDeleteWithResponse request
	ResourcesDeleteWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*ResourcesDeleteResponse, error)

	// ResourcesShowWithResponse request
	ResourcesShowWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*ResourcesShowResponse, error)

	// ResourcesUpdateWithBodyWithResponse request with any body
	ResourcesUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResourcesUpdateResponse, error)

	ResourcesUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body ResourcesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ResourcesUpdateResponse, error)

	// RolesIndexWithResponse request
	RolesIndexWithResponse(ctx context.Context, params *RolesIndexParams, reqEditors ...RequestEditorFn) (*RolesIndexResponse, error)

	// RolesCreateWithBodyWithResponse request with any body
	RolesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RolesCreateResponse, error)

	RolesCreateWithResponse(ctx context.Context, body RolesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*RolesCreateResponse, error)

	// RoleDeleteWithResponse request
	RoleDeleteWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*RoleDeleteResponse, error)

	// RolesShowWithResponse request
	RolesShowWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*RolesShowResponse, error)

	// RolesUpdateWithBodyWithResponse request with any body
	RolesUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RolesUpdateResponse, error)

	RolesUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body RolesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RolesUpdateResponse, error)

	// UsersIndexWithResponse request
	UsersIndexWithResponse(ctx context.Context, params *UsersIndexParams, reqEditors ...RequestEditorFn) (*UsersIndexResponse, error)

	// UsersAccountsIndexWithResponse request
	UsersAccountsIndexWithResponse(ctx context.Context, params *UsersAccountsIndexParams, reqEditors ...RequestEditorFn) (*UsersAccountsIndexResponse, error)

	// UsersAccountsCreateWithBodyWithResponse request with any body
	UsersAccountsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersAccountsCreateResponse, error)

	UsersAccountsCreateWithResponse(ctx context.Context, body UsersAccountsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersAccountsCreateResponse, error)

	// UsersAccountsDeleteWithResponse request
	UsersAccountsDeleteWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*UsersAccountsDeleteResponse, error)

	// WorkflowsIndexWithResponse request
	WorkflowsIndexWithResponse(ctx context.Context, params *WorkflowsIndexParams, reqEditors ...RequestEditorFn) (*WorkflowsIndexResponse, error)

	// WorkflowsCreateWithBodyWithResponse request with any body
	WorkflowsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkflowsCreateResponse, error)

	WorkflowsCreateWithResponse(ctx context.Context, body WorkflowsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkflowsCreateResponse, error)

	// WorkflowsDestroyWithResponse request
	WorkflowsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*WorkflowsDestroyResponse, error)

	// WorkflowsShowWithResponse request
	WorkflowsShowWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*WorkflowsShowResponse, error)

	// WorkflowsUpdateWithBodyWithResponse request with any body
	WorkflowsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkflowsUpdateResponse, error)

	WorkflowsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body WorkflowsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkflowsUpdateResponse, error)
}

type AccessRequestForwardsIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedForwardResponseSchema
}

// Status returns HTTPResponse.Status
func (r AccessRequestForwardsIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessRequestForwardsIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccessRequestForwardsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ForwardPublicResponseSchema
	JSON201      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r AccessRequestForwardsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessRequestForwardsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccessRequestForwardsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ForwardDestroyResponseSchema
}

// Status returns HTTPResponse.Status
func (r AccessRequestForwardsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessRequestForwardsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccessRequestForwardsShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ForwardPublicResponseSchema
}

// Status returns HTTPResponse.Status
func (r AccessRequestForwardsShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessRequestForwardsShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccessRequestsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccessRequestResponseSchema
}

// Status returns HTTPResponse.Status
func (r AccessRequestsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessRequestsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccessRequestsShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccessRequestResponseSchema
}

// Status returns HTTPResponse.Status
func (r AccessRequestsShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessRequestsShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccessReviewForwardsIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedForwardResponseSchema
}

// Status returns HTTPResponse.Status
func (r AccessReviewForwardsIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessReviewForwardsIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccessReviewForwardsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ForwardPublicResponseSchema
	JSON201      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r AccessReviewForwardsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessReviewForwardsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccessReviewForwardsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ForwardDestroyResponseSchema
}

// Status returns HTTPResponse.Status
func (r AccessReviewForwardsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessReviewForwardsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccessReviewForwardsShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ForwardPublicResponseSchema
}

// Status returns HTTPResponse.Status
func (r AccessReviewForwardsShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessReviewForwardsShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAccountsResponseSchema
}

// Status returns HTTPResponse.Status
func (r AccountsIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentTokensIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentTokensListResponseSchema
}

// Status returns HTTPResponse.Status
func (r AgentTokensIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentTokensIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentTokensCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentTokenCreateResponseSchema
	JSON201      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r AgentTokensCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentTokensCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentTokensDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentTokenDeleteResponseSchema
}

// Status returns HTTPResponse.Status
func (r AgentTokensDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentTokensDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentTokensShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentTokenResponseSchema
}

// Status returns HTTPResponse.Status
func (r AgentTokensShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentTokensShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AgentTokensUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AgentTokenResponseSchema
}

// Status returns HTTPResponse.Status
func (r AgentTokensUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AgentTokensUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuditLogsSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuditLogResponseSchema
}

// Status returns HTTPResponse.Status
func (r AuditLogsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuditLogsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundlesIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BundlesIndexResponseSchema
}

// Status returns HTTPResponse.Status
func (r BundlesIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundlesIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundlesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FullBundleResponseSchema
}

// Status returns HTTPResponse.Status
func (r BundlesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundlesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundlesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BundleDestroyResponseSchema
}

// Status returns HTTPResponse.Status
func (r BundlesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundlesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundlesShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FullBundleResponseSchema
}

// Status returns HTTPResponse.Status
func (r BundlesShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundlesShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BundlesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FullBundleResponseSchema
}

// Status returns HTTPResponse.Status
func (r BundlesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BundlesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DirectoryGroupsIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DirectoryGroupIndexResponseSchema
}

// Status returns HTTPResponse.Status
func (r DirectoryGroupsIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DirectoryGroupsIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IntegrationsIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationsListResponseSchema
}

// Status returns HTTPResponse.Status
func (r IntegrationsIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IntegrationsIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IntegrationsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationResponseSchema
	JSON201      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r IntegrationsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IntegrationsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IntegrationsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationDestroyResponseSchema
}

// Status returns HTTPResponse.Status
func (r IntegrationsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IntegrationsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IntegrationsShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationResponseSchema
}

// Status returns HTTPResponse.Status
func (r IntegrationsShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IntegrationsShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IntegrationsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationResponseSchema
}

// Status returns HTTPResponse.Status
func (r IntegrationsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IntegrationsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PermissionsIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionResponseSchema
}

// Status returns HTTPResponse.Status
func (r PermissionsIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PermissionsIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PoliciesIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyIndexResponseSchema
}

// Status returns HTTPResponse.Status
func (r PoliciesIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PoliciesIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PoliciesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FullPolicyResponseSchema
}

// Status returns HTTPResponse.Status
func (r PoliciesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PoliciesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PoliciesDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyDestroyResponseSchema
}

// Status returns HTTPResponse.Status
func (r PoliciesDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PoliciesDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PoliciesShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FullPolicyResponseSchema
}

// Status returns HTTPResponse.Status
func (r PoliciesShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PoliciesShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PoliciesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FullPolicyResponseSchema
}

// Status returns HTTPResponse.Status
func (r PoliciesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PoliciesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResourcesIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationResourcesListResponseSchema
}

// Status returns HTTPResponse.Status
func (r ResourcesIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResourcesIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResourcesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationResourceResponseSchema
}

// Status returns HTTPResponse.Status
func (r ResourcesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResourcesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResourcesDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationResourceDestroyResponseSchema
}

// Status returns HTTPResponse.Status
func (r ResourcesDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResourcesDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResourcesShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationResourceResponseSchema
}

// Status returns HTTPResponse.Status
func (r ResourcesShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResourcesShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResourcesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationResourceResponseSchema
}

// Status returns HTTPResponse.Status
func (r ResourcesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResourcesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RolesIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationResourceRolesListResponseSchema
}

// Status returns HTTPResponse.Status
func (r RolesIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RolesIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RolesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationResourceRoleResponseSchema
	JSON201      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r RolesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RolesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RoleDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationResourceRoleDestroyResponseSchema
}

// Status returns HTTPResponse.Status
func (r RoleDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RoleDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RolesShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationResourceRoleResponseSchema
}

// Status returns HTTPResponse.Status
func (r RolesShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RolesShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RolesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationResourceRoleResponseSchema
}

// Status returns HTTPResponse.Status
func (r RolesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RolesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetUsersResponseSchema
}

// Status returns HTTPResponse.Status
func (r UsersIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersAccountsIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetUsersAccountsResponseSchema
}

// Status returns HTTPResponse.Status
func (r UsersAccountsIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAccountsIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersAccountsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostUsersAccountsResponseSchema
	JSON201      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r UsersAccountsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAccountsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersAccountsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteUserAccountResponseSchema
}

// Status returns HTTPResponse.Status
func (r UsersAccountsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAccountsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowsIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkflowIndexResponseSchema
}

// Status returns HTTPResponse.Status
func (r WorkflowsIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowsIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FullWorkflowResponseSchema
}

// Status returns HTTPResponse.Status
func (r WorkflowsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowsDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkflowDestroyResponseSchema
}

// Status returns HTTPResponse.Status
func (r WorkflowsDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowsDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowsShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FullWorkflowResponseSchema
}

// Status returns HTTPResponse.Status
func (r WorkflowsShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowsShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FullWorkflowResponseSchema
}

// Status returns HTTPResponse.Status
func (r WorkflowsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AccessRequestForwardsIndexWithResponse request returning *AccessRequestForwardsIndexResponse
func (c *ClientWithResponses) AccessRequestForwardsIndexWithResponse(ctx context.Context, params *AccessRequestForwardsIndexParams, reqEditors ...RequestEditorFn) (*AccessRequestForwardsIndexResponse, error) {
	rsp, err := c.AccessRequestForwardsIndex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessRequestForwardsIndexResponse(rsp)
}

// AccessRequestForwardsCreateWithBodyWithResponse request with arbitrary body returning *AccessRequestForwardsCreateResponse
func (c *ClientWithResponses) AccessRequestForwardsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccessRequestForwardsCreateResponse, error) {
	rsp, err := c.AccessRequestForwardsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessRequestForwardsCreateResponse(rsp)
}

func (c *ClientWithResponses) AccessRequestForwardsCreateWithResponse(ctx context.Context, body AccessRequestForwardsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccessRequestForwardsCreateResponse, error) {
	rsp, err := c.AccessRequestForwardsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessRequestForwardsCreateResponse(rsp)
}

// AccessRequestForwardsDestroyWithResponse request returning *AccessRequestForwardsDestroyResponse
func (c *ClientWithResponses) AccessRequestForwardsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*AccessRequestForwardsDestroyResponse, error) {
	rsp, err := c.AccessRequestForwardsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessRequestForwardsDestroyResponse(rsp)
}

// AccessRequestForwardsShowWithResponse request returning *AccessRequestForwardsShowResponse
func (c *ClientWithResponses) AccessRequestForwardsShowWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*AccessRequestForwardsShowResponse, error) {
	rsp, err := c.AccessRequestForwardsShow(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessRequestForwardsShowResponse(rsp)
}

// AccessRequestsCreateWithBodyWithResponse request with arbitrary body returning *AccessRequestsCreateResponse
func (c *ClientWithResponses) AccessRequestsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccessRequestsCreateResponse, error) {
	rsp, err := c.AccessRequestsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessRequestsCreateResponse(rsp)
}

func (c *ClientWithResponses) AccessRequestsCreateWithResponse(ctx context.Context, body AccessRequestsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccessRequestsCreateResponse, error) {
	rsp, err := c.AccessRequestsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessRequestsCreateResponse(rsp)
}

// AccessRequestsShowWithResponse request returning *AccessRequestsShowResponse
func (c *ClientWithResponses) AccessRequestsShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AccessRequestsShowResponse, error) {
	rsp, err := c.AccessRequestsShow(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessRequestsShowResponse(rsp)
}

// AccessReviewForwardsIndexWithResponse request returning *AccessReviewForwardsIndexResponse
func (c *ClientWithResponses) AccessReviewForwardsIndexWithResponse(ctx context.Context, params *AccessReviewForwardsIndexParams, reqEditors ...RequestEditorFn) (*AccessReviewForwardsIndexResponse, error) {
	rsp, err := c.AccessReviewForwardsIndex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessReviewForwardsIndexResponse(rsp)
}

// AccessReviewForwardsCreateWithBodyWithResponse request with arbitrary body returning *AccessReviewForwardsCreateResponse
func (c *ClientWithResponses) AccessReviewForwardsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccessReviewForwardsCreateResponse, error) {
	rsp, err := c.AccessReviewForwardsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessReviewForwardsCreateResponse(rsp)
}

func (c *ClientWithResponses) AccessReviewForwardsCreateWithResponse(ctx context.Context, body AccessReviewForwardsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AccessReviewForwardsCreateResponse, error) {
	rsp, err := c.AccessReviewForwardsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessReviewForwardsCreateResponse(rsp)
}

// AccessReviewForwardsDestroyWithResponse request returning *AccessReviewForwardsDestroyResponse
func (c *ClientWithResponses) AccessReviewForwardsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*AccessReviewForwardsDestroyResponse, error) {
	rsp, err := c.AccessReviewForwardsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessReviewForwardsDestroyResponse(rsp)
}

// AccessReviewForwardsShowWithResponse request returning *AccessReviewForwardsShowResponse
func (c *ClientWithResponses) AccessReviewForwardsShowWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*AccessReviewForwardsShowResponse, error) {
	rsp, err := c.AccessReviewForwardsShow(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessReviewForwardsShowResponse(rsp)
}

// AccountsIndexWithResponse request returning *AccountsIndexResponse
func (c *ClientWithResponses) AccountsIndexWithResponse(ctx context.Context, params *AccountsIndexParams, reqEditors ...RequestEditorFn) (*AccountsIndexResponse, error) {
	rsp, err := c.AccountsIndex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsIndexResponse(rsp)
}

// AgentTokensIndexWithResponse request returning *AgentTokensIndexResponse
func (c *ClientWithResponses) AgentTokensIndexWithResponse(ctx context.Context, params *AgentTokensIndexParams, reqEditors ...RequestEditorFn) (*AgentTokensIndexResponse, error) {
	rsp, err := c.AgentTokensIndex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAgentTokensIndexResponse(rsp)
}

// AgentTokensCreateWithBodyWithResponse request with arbitrary body returning *AgentTokensCreateResponse
func (c *ClientWithResponses) AgentTokensCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AgentTokensCreateResponse, error) {
	rsp, err := c.AgentTokensCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAgentTokensCreateResponse(rsp)
}

func (c *ClientWithResponses) AgentTokensCreateWithResponse(ctx context.Context, body AgentTokensCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AgentTokensCreateResponse, error) {
	rsp, err := c.AgentTokensCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAgentTokensCreateResponse(rsp)
}

// AgentTokensDestroyWithResponse request returning *AgentTokensDestroyResponse
func (c *ClientWithResponses) AgentTokensDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*AgentTokensDestroyResponse, error) {
	rsp, err := c.AgentTokensDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAgentTokensDestroyResponse(rsp)
}

// AgentTokensShowWithResponse request returning *AgentTokensShowResponse
func (c *ClientWithResponses) AgentTokensShowWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*AgentTokensShowResponse, error) {
	rsp, err := c.AgentTokensShow(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAgentTokensShowResponse(rsp)
}

// AgentTokensUpdateWithBodyWithResponse request with arbitrary body returning *AgentTokensUpdateResponse
func (c *ClientWithResponses) AgentTokensUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AgentTokensUpdateResponse, error) {
	rsp, err := c.AgentTokensUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAgentTokensUpdateResponse(rsp)
}

func (c *ClientWithResponses) AgentTokensUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body AgentTokensUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*AgentTokensUpdateResponse, error) {
	rsp, err := c.AgentTokensUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAgentTokensUpdateResponse(rsp)
}

// AuditLogsSearchWithBodyWithResponse request with arbitrary body returning *AuditLogsSearchResponse
func (c *ClientWithResponses) AuditLogsSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuditLogsSearchResponse, error) {
	rsp, err := c.AuditLogsSearchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuditLogsSearchResponse(rsp)
}

func (c *ClientWithResponses) AuditLogsSearchWithResponse(ctx context.Context, body AuditLogsSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*AuditLogsSearchResponse, error) {
	rsp, err := c.AuditLogsSearch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuditLogsSearchResponse(rsp)
}

// BundlesIndexWithResponse request returning *BundlesIndexResponse
func (c *ClientWithResponses) BundlesIndexWithResponse(ctx context.Context, params *BundlesIndexParams, reqEditors ...RequestEditorFn) (*BundlesIndexResponse, error) {
	rsp, err := c.BundlesIndex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlesIndexResponse(rsp)
}

// BundlesCreateWithBodyWithResponse request with arbitrary body returning *BundlesCreateResponse
func (c *ClientWithResponses) BundlesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlesCreateResponse, error) {
	rsp, err := c.BundlesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlesCreateResponse(rsp)
}

func (c *ClientWithResponses) BundlesCreateWithResponse(ctx context.Context, body BundlesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlesCreateResponse, error) {
	rsp, err := c.BundlesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlesCreateResponse(rsp)
}

// BundlesDestroyWithResponse request returning *BundlesDestroyResponse
func (c *ClientWithResponses) BundlesDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*BundlesDestroyResponse, error) {
	rsp, err := c.BundlesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlesDestroyResponse(rsp)
}

// BundlesShowWithResponse request returning *BundlesShowResponse
func (c *ClientWithResponses) BundlesShowWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*BundlesShowResponse, error) {
	rsp, err := c.BundlesShow(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlesShowResponse(rsp)
}

// BundlesUpdateWithBodyWithResponse request with arbitrary body returning *BundlesUpdateResponse
func (c *ClientWithResponses) BundlesUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BundlesUpdateResponse, error) {
	rsp, err := c.BundlesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlesUpdateResponse(rsp)
}

func (c *ClientWithResponses) BundlesUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body BundlesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*BundlesUpdateResponse, error) {
	rsp, err := c.BundlesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBundlesUpdateResponse(rsp)
}

// DirectoryGroupsIndexWithResponse request returning *DirectoryGroupsIndexResponse
func (c *ClientWithResponses) DirectoryGroupsIndexWithResponse(ctx context.Context, params *DirectoryGroupsIndexParams, reqEditors ...RequestEditorFn) (*DirectoryGroupsIndexResponse, error) {
	rsp, err := c.DirectoryGroupsIndex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDirectoryGroupsIndexResponse(rsp)
}

// IntegrationsIndexWithResponse request returning *IntegrationsIndexResponse
func (c *ClientWithResponses) IntegrationsIndexWithResponse(ctx context.Context, params *IntegrationsIndexParams, reqEditors ...RequestEditorFn) (*IntegrationsIndexResponse, error) {
	rsp, err := c.IntegrationsIndex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntegrationsIndexResponse(rsp)
}

// IntegrationsCreateWithBodyWithResponse request with arbitrary body returning *IntegrationsCreateResponse
func (c *ClientWithResponses) IntegrationsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IntegrationsCreateResponse, error) {
	rsp, err := c.IntegrationsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntegrationsCreateResponse(rsp)
}

func (c *ClientWithResponses) IntegrationsCreateWithResponse(ctx context.Context, body IntegrationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*IntegrationsCreateResponse, error) {
	rsp, err := c.IntegrationsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntegrationsCreateResponse(rsp)
}

// IntegrationsDestroyWithResponse request returning *IntegrationsDestroyResponse
func (c *ClientWithResponses) IntegrationsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*IntegrationsDestroyResponse, error) {
	rsp, err := c.IntegrationsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntegrationsDestroyResponse(rsp)
}

// IntegrationsShowWithResponse request returning *IntegrationsShowResponse
func (c *ClientWithResponses) IntegrationsShowWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*IntegrationsShowResponse, error) {
	rsp, err := c.IntegrationsShow(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntegrationsShowResponse(rsp)
}

// IntegrationsUpdateWithBodyWithResponse request with arbitrary body returning *IntegrationsUpdateResponse
func (c *ClientWithResponses) IntegrationsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IntegrationsUpdateResponse, error) {
	rsp, err := c.IntegrationsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntegrationsUpdateResponse(rsp)
}

func (c *ClientWithResponses) IntegrationsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body IntegrationsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*IntegrationsUpdateResponse, error) {
	rsp, err := c.IntegrationsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIntegrationsUpdateResponse(rsp)
}

// PermissionsIndexWithResponse request returning *PermissionsIndexResponse
func (c *ClientWithResponses) PermissionsIndexWithResponse(ctx context.Context, params *PermissionsIndexParams, reqEditors ...RequestEditorFn) (*PermissionsIndexResponse, error) {
	rsp, err := c.PermissionsIndex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePermissionsIndexResponse(rsp)
}

// PoliciesIndexWithResponse request returning *PoliciesIndexResponse
func (c *ClientWithResponses) PoliciesIndexWithResponse(ctx context.Context, params *PoliciesIndexParams, reqEditors ...RequestEditorFn) (*PoliciesIndexResponse, error) {
	rsp, err := c.PoliciesIndex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesIndexResponse(rsp)
}

// PoliciesCreateWithBodyWithResponse request with arbitrary body returning *PoliciesCreateResponse
func (c *ClientWithResponses) PoliciesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PoliciesCreateResponse, error) {
	rsp, err := c.PoliciesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesCreateResponse(rsp)
}

func (c *ClientWithResponses) PoliciesCreateWithResponse(ctx context.Context, body PoliciesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PoliciesCreateResponse, error) {
	rsp, err := c.PoliciesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesCreateResponse(rsp)
}

// PoliciesDestroyWithResponse request returning *PoliciesDestroyResponse
func (c *ClientWithResponses) PoliciesDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PoliciesDestroyResponse, error) {
	rsp, err := c.PoliciesDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesDestroyResponse(rsp)
}

// PoliciesShowWithResponse request returning *PoliciesShowResponse
func (c *ClientWithResponses) PoliciesShowWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PoliciesShowResponse, error) {
	rsp, err := c.PoliciesShow(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesShowResponse(rsp)
}

// PoliciesUpdateWithBodyWithResponse request with arbitrary body returning *PoliciesUpdateResponse
func (c *ClientWithResponses) PoliciesUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PoliciesUpdateResponse, error) {
	rsp, err := c.PoliciesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesUpdateResponse(rsp)
}

func (c *ClientWithResponses) PoliciesUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body PoliciesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PoliciesUpdateResponse, error) {
	rsp, err := c.PoliciesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesUpdateResponse(rsp)
}

// ResourcesIndexWithResponse request returning *ResourcesIndexResponse
func (c *ClientWithResponses) ResourcesIndexWithResponse(ctx context.Context, params *ResourcesIndexParams, reqEditors ...RequestEditorFn) (*ResourcesIndexResponse, error) {
	rsp, err := c.ResourcesIndex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResourcesIndexResponse(rsp)
}

// ResourcesCreateWithBodyWithResponse request with arbitrary body returning *ResourcesCreateResponse
func (c *ClientWithResponses) ResourcesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResourcesCreateResponse, error) {
	rsp, err := c.ResourcesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResourcesCreateResponse(rsp)
}

func (c *ClientWithResponses) ResourcesCreateWithResponse(ctx context.Context, body ResourcesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ResourcesCreateResponse, error) {
	rsp, err := c.ResourcesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResourcesCreateResponse(rsp)
}

// ResourcesDeleteWithResponse request returning *ResourcesDeleteResponse
func (c *ClientWithResponses) ResourcesDeleteWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*ResourcesDeleteResponse, error) {
	rsp, err := c.ResourcesDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResourcesDeleteResponse(rsp)
}

// ResourcesShowWithResponse request returning *ResourcesShowResponse
func (c *ClientWithResponses) ResourcesShowWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*ResourcesShowResponse, error) {
	rsp, err := c.ResourcesShow(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResourcesShowResponse(rsp)
}

// ResourcesUpdateWithBodyWithResponse request with arbitrary body returning *ResourcesUpdateResponse
func (c *ClientWithResponses) ResourcesUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResourcesUpdateResponse, error) {
	rsp, err := c.ResourcesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResourcesUpdateResponse(rsp)
}

func (c *ClientWithResponses) ResourcesUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body ResourcesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ResourcesUpdateResponse, error) {
	rsp, err := c.ResourcesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResourcesUpdateResponse(rsp)
}

// RolesIndexWithResponse request returning *RolesIndexResponse
func (c *ClientWithResponses) RolesIndexWithResponse(ctx context.Context, params *RolesIndexParams, reqEditors ...RequestEditorFn) (*RolesIndexResponse, error) {
	rsp, err := c.RolesIndex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRolesIndexResponse(rsp)
}

// RolesCreateWithBodyWithResponse request with arbitrary body returning *RolesCreateResponse
func (c *ClientWithResponses) RolesCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RolesCreateResponse, error) {
	rsp, err := c.RolesCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRolesCreateResponse(rsp)
}

func (c *ClientWithResponses) RolesCreateWithResponse(ctx context.Context, body RolesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*RolesCreateResponse, error) {
	rsp, err := c.RolesCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRolesCreateResponse(rsp)
}

// RoleDeleteWithResponse request returning *RoleDeleteResponse
func (c *ClientWithResponses) RoleDeleteWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*RoleDeleteResponse, error) {
	rsp, err := c.RoleDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRoleDeleteResponse(rsp)
}

// RolesShowWithResponse request returning *RolesShowResponse
func (c *ClientWithResponses) RolesShowWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*RolesShowResponse, error) {
	rsp, err := c.RolesShow(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRolesShowResponse(rsp)
}

// RolesUpdateWithBodyWithResponse request with arbitrary body returning *RolesUpdateResponse
func (c *ClientWithResponses) RolesUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RolesUpdateResponse, error) {
	rsp, err := c.RolesUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRolesUpdateResponse(rsp)
}

func (c *ClientWithResponses) RolesUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body RolesUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*RolesUpdateResponse, error) {
	rsp, err := c.RolesUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRolesUpdateResponse(rsp)
}

// UsersIndexWithResponse request returning *UsersIndexResponse
func (c *ClientWithResponses) UsersIndexWithResponse(ctx context.Context, params *UsersIndexParams, reqEditors ...RequestEditorFn) (*UsersIndexResponse, error) {
	rsp, err := c.UsersIndex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersIndexResponse(rsp)
}

// UsersAccountsIndexWithResponse request returning *UsersAccountsIndexResponse
func (c *ClientWithResponses) UsersAccountsIndexWithResponse(ctx context.Context, params *UsersAccountsIndexParams, reqEditors ...RequestEditorFn) (*UsersAccountsIndexResponse, error) {
	rsp, err := c.UsersAccountsIndex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersAccountsIndexResponse(rsp)
}

// UsersAccountsCreateWithBodyWithResponse request with arbitrary body returning *UsersAccountsCreateResponse
func (c *ClientWithResponses) UsersAccountsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersAccountsCreateResponse, error) {
	rsp, err := c.UsersAccountsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersAccountsCreateResponse(rsp)
}

func (c *ClientWithResponses) UsersAccountsCreateWithResponse(ctx context.Context, body UsersAccountsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersAccountsCreateResponse, error) {
	rsp, err := c.UsersAccountsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersAccountsCreateResponse(rsp)
}

// UsersAccountsDeleteWithResponse request returning *UsersAccountsDeleteResponse
func (c *ClientWithResponses) UsersAccountsDeleteWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*UsersAccountsDeleteResponse, error) {
	rsp, err := c.UsersAccountsDelete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersAccountsDeleteResponse(rsp)
}

// WorkflowsIndexWithResponse request returning *WorkflowsIndexResponse
func (c *ClientWithResponses) WorkflowsIndexWithResponse(ctx context.Context, params *WorkflowsIndexParams, reqEditors ...RequestEditorFn) (*WorkflowsIndexResponse, error) {
	rsp, err := c.WorkflowsIndex(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowsIndexResponse(rsp)
}

// WorkflowsCreateWithBodyWithResponse request with arbitrary body returning *WorkflowsCreateResponse
func (c *ClientWithResponses) WorkflowsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkflowsCreateResponse, error) {
	rsp, err := c.WorkflowsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowsCreateResponse(rsp)
}

func (c *ClientWithResponses) WorkflowsCreateWithResponse(ctx context.Context, body WorkflowsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkflowsCreateResponse, error) {
	rsp, err := c.WorkflowsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowsCreateResponse(rsp)
}

// WorkflowsDestroyWithResponse request returning *WorkflowsDestroyResponse
func (c *ClientWithResponses) WorkflowsDestroyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*WorkflowsDestroyResponse, error) {
	rsp, err := c.WorkflowsDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowsDestroyResponse(rsp)
}

// WorkflowsShowWithResponse request returning *WorkflowsShowResponse
func (c *ClientWithResponses) WorkflowsShowWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*WorkflowsShowResponse, error) {
	rsp, err := c.WorkflowsShow(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowsShowResponse(rsp)
}

// WorkflowsUpdateWithBodyWithResponse request with arbitrary body returning *WorkflowsUpdateResponse
func (c *ClientWithResponses) WorkflowsUpdateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkflowsUpdateResponse, error) {
	rsp, err := c.WorkflowsUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowsUpdateResponse(rsp)
}

func (c *ClientWithResponses) WorkflowsUpdateWithResponse(ctx context.Context, id openapi_types.UUID, body WorkflowsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkflowsUpdateResponse, error) {
	rsp, err := c.WorkflowsUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowsUpdateResponse(rsp)
}

// ParseAccessRequestForwardsIndexResponse parses an HTTP response from a AccessRequestForwardsIndexWithResponse call
func ParseAccessRequestForwardsIndexResponse(rsp *http.Response) (*AccessRequestForwardsIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessRequestForwardsIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedForwardResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccessRequestForwardsCreateResponse parses an HTTP response from a AccessRequestForwardsCreateWithResponse call
func ParseAccessRequestForwardsCreateResponse(rsp *http.Response) (*AccessRequestForwardsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessRequestForwardsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ForwardPublicResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseAccessRequestForwardsDestroyResponse parses an HTTP response from a AccessRequestForwardsDestroyWithResponse call
func ParseAccessRequestForwardsDestroyResponse(rsp *http.Response) (*AccessRequestForwardsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessRequestForwardsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ForwardDestroyResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccessRequestForwardsShowResponse parses an HTTP response from a AccessRequestForwardsShowWithResponse call
func ParseAccessRequestForwardsShowResponse(rsp *http.Response) (*AccessRequestForwardsShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessRequestForwardsShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ForwardPublicResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccessRequestsCreateResponse parses an HTTP response from a AccessRequestsCreateWithResponse call
func ParseAccessRequestsCreateResponse(rsp *http.Response) (*AccessRequestsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessRequestsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessRequestResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccessRequestsShowResponse parses an HTTP response from a AccessRequestsShowWithResponse call
func ParseAccessRequestsShowResponse(rsp *http.Response) (*AccessRequestsShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessRequestsShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessRequestResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccessReviewForwardsIndexResponse parses an HTTP response from a AccessReviewForwardsIndexWithResponse call
func ParseAccessReviewForwardsIndexResponse(rsp *http.Response) (*AccessReviewForwardsIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessReviewForwardsIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedForwardResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccessReviewForwardsCreateResponse parses an HTTP response from a AccessReviewForwardsCreateWithResponse call
func ParseAccessReviewForwardsCreateResponse(rsp *http.Response) (*AccessReviewForwardsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessReviewForwardsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ForwardPublicResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseAccessReviewForwardsDestroyResponse parses an HTTP response from a AccessReviewForwardsDestroyWithResponse call
func ParseAccessReviewForwardsDestroyResponse(rsp *http.Response) (*AccessReviewForwardsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessReviewForwardsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ForwardDestroyResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccessReviewForwardsShowResponse parses an HTTP response from a AccessReviewForwardsShowWithResponse call
func ParseAccessReviewForwardsShowResponse(rsp *http.Response) (*AccessReviewForwardsShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessReviewForwardsShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ForwardPublicResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccountsIndexResponse parses an HTTP response from a AccountsIndexWithResponse call
func ParseAccountsIndexResponse(rsp *http.Response) (*AccountsIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAccountsResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAgentTokensIndexResponse parses an HTTP response from a AgentTokensIndexWithResponse call
func ParseAgentTokensIndexResponse(rsp *http.Response) (*AgentTokensIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentTokensIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentTokensListResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAgentTokensCreateResponse parses an HTTP response from a AgentTokensCreateWithResponse call
func ParseAgentTokensCreateResponse(rsp *http.Response) (*AgentTokensCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentTokensCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentTokenCreateResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseAgentTokensDestroyResponse parses an HTTP response from a AgentTokensDestroyWithResponse call
func ParseAgentTokensDestroyResponse(rsp *http.Response) (*AgentTokensDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentTokensDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentTokenDeleteResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAgentTokensShowResponse parses an HTTP response from a AgentTokensShowWithResponse call
func ParseAgentTokensShowResponse(rsp *http.Response) (*AgentTokensShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentTokensShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentTokenResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAgentTokensUpdateResponse parses an HTTP response from a AgentTokensUpdateWithResponse call
func ParseAgentTokensUpdateResponse(rsp *http.Response) (*AgentTokensUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AgentTokensUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AgentTokenResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAuditLogsSearchResponse parses an HTTP response from a AuditLogsSearchWithResponse call
func ParseAuditLogsSearchResponse(rsp *http.Response) (*AuditLogsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuditLogsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuditLogResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBundlesIndexResponse parses an HTTP response from a BundlesIndexWithResponse call
func ParseBundlesIndexResponse(rsp *http.Response) (*BundlesIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundlesIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BundlesIndexResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBundlesCreateResponse parses an HTTP response from a BundlesCreateWithResponse call
func ParseBundlesCreateResponse(rsp *http.Response) (*BundlesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundlesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FullBundleResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBundlesDestroyResponse parses an HTTP response from a BundlesDestroyWithResponse call
func ParseBundlesDestroyResponse(rsp *http.Response) (*BundlesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundlesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BundleDestroyResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBundlesShowResponse parses an HTTP response from a BundlesShowWithResponse call
func ParseBundlesShowResponse(rsp *http.Response) (*BundlesShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundlesShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FullBundleResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBundlesUpdateResponse parses an HTTP response from a BundlesUpdateWithResponse call
func ParseBundlesUpdateResponse(rsp *http.Response) (*BundlesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BundlesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FullBundleResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDirectoryGroupsIndexResponse parses an HTTP response from a DirectoryGroupsIndexWithResponse call
func ParseDirectoryGroupsIndexResponse(rsp *http.Response) (*DirectoryGroupsIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DirectoryGroupsIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DirectoryGroupIndexResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIntegrationsIndexResponse parses an HTTP response from a IntegrationsIndexWithResponse call
func ParseIntegrationsIndexResponse(rsp *http.Response) (*IntegrationsIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IntegrationsIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationsListResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIntegrationsCreateResponse parses an HTTP response from a IntegrationsCreateWithResponse call
func ParseIntegrationsCreateResponse(rsp *http.Response) (*IntegrationsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IntegrationsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseIntegrationsDestroyResponse parses an HTTP response from a IntegrationsDestroyWithResponse call
func ParseIntegrationsDestroyResponse(rsp *http.Response) (*IntegrationsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IntegrationsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationDestroyResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIntegrationsShowResponse parses an HTTP response from a IntegrationsShowWithResponse call
func ParseIntegrationsShowResponse(rsp *http.Response) (*IntegrationsShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IntegrationsShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIntegrationsUpdateResponse parses an HTTP response from a IntegrationsUpdateWithResponse call
func ParseIntegrationsUpdateResponse(rsp *http.Response) (*IntegrationsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IntegrationsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePermissionsIndexResponse parses an HTTP response from a PermissionsIndexWithResponse call
func ParsePermissionsIndexResponse(rsp *http.Response) (*PermissionsIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PermissionsIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePoliciesIndexResponse parses an HTTP response from a PoliciesIndexWithResponse call
func ParsePoliciesIndexResponse(rsp *http.Response) (*PoliciesIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PoliciesIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyIndexResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePoliciesCreateResponse parses an HTTP response from a PoliciesCreateWithResponse call
func ParsePoliciesCreateResponse(rsp *http.Response) (*PoliciesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PoliciesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FullPolicyResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePoliciesDestroyResponse parses an HTTP response from a PoliciesDestroyWithResponse call
func ParsePoliciesDestroyResponse(rsp *http.Response) (*PoliciesDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PoliciesDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyDestroyResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePoliciesShowResponse parses an HTTP response from a PoliciesShowWithResponse call
func ParsePoliciesShowResponse(rsp *http.Response) (*PoliciesShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PoliciesShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FullPolicyResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePoliciesUpdateResponse parses an HTTP response from a PoliciesUpdateWithResponse call
func ParsePoliciesUpdateResponse(rsp *http.Response) (*PoliciesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PoliciesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FullPolicyResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseResourcesIndexResponse parses an HTTP response from a ResourcesIndexWithResponse call
func ParseResourcesIndexResponse(rsp *http.Response) (*ResourcesIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResourcesIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationResourcesListResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseResourcesCreateResponse parses an HTTP response from a ResourcesCreateWithResponse call
func ParseResourcesCreateResponse(rsp *http.Response) (*ResourcesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResourcesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationResourceResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseResourcesDeleteResponse parses an HTTP response from a ResourcesDeleteWithResponse call
func ParseResourcesDeleteResponse(rsp *http.Response) (*ResourcesDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResourcesDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationResourceDestroyResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseResourcesShowResponse parses an HTTP response from a ResourcesShowWithResponse call
func ParseResourcesShowResponse(rsp *http.Response) (*ResourcesShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResourcesShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationResourceResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseResourcesUpdateResponse parses an HTTP response from a ResourcesUpdateWithResponse call
func ParseResourcesUpdateResponse(rsp *http.Response) (*ResourcesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResourcesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationResourceResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRolesIndexResponse parses an HTTP response from a RolesIndexWithResponse call
func ParseRolesIndexResponse(rsp *http.Response) (*RolesIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RolesIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationResourceRolesListResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRolesCreateResponse parses an HTTP response from a RolesCreateWithResponse call
func ParseRolesCreateResponse(rsp *http.Response) (*RolesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RolesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationResourceRoleResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseRoleDeleteResponse parses an HTTP response from a RoleDeleteWithResponse call
func ParseRoleDeleteResponse(rsp *http.Response) (*RoleDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RoleDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationResourceRoleDestroyResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRolesShowResponse parses an HTTP response from a RolesShowWithResponse call
func ParseRolesShowResponse(rsp *http.Response) (*RolesShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RolesShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationResourceRoleResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRolesUpdateResponse parses an HTTP response from a RolesUpdateWithResponse call
func ParseRolesUpdateResponse(rsp *http.Response) (*RolesUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RolesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationResourceRoleResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersIndexResponse parses an HTTP response from a UsersIndexWithResponse call
func ParseUsersIndexResponse(rsp *http.Response) (*UsersIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetUsersResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAccountsIndexResponse parses an HTTP response from a UsersAccountsIndexWithResponse call
func ParseUsersAccountsIndexResponse(rsp *http.Response) (*UsersAccountsIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersAccountsIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetUsersAccountsResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAccountsCreateResponse parses an HTTP response from a UsersAccountsCreateWithResponse call
func ParseUsersAccountsCreateResponse(rsp *http.Response) (*UsersAccountsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersAccountsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostUsersAccountsResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUsersAccountsDeleteResponse parses an HTTP response from a UsersAccountsDeleteWithResponse call
func ParseUsersAccountsDeleteResponse(rsp *http.Response) (*UsersAccountsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersAccountsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteUserAccountResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkflowsIndexResponse parses an HTTP response from a WorkflowsIndexWithResponse call
func ParseWorkflowsIndexResponse(rsp *http.Response) (*WorkflowsIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowsIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowIndexResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkflowsCreateResponse parses an HTTP response from a WorkflowsCreateWithResponse call
func ParseWorkflowsCreateResponse(rsp *http.Response) (*WorkflowsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FullWorkflowResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkflowsDestroyResponse parses an HTTP response from a WorkflowsDestroyWithResponse call
func ParseWorkflowsDestroyResponse(rsp *http.Response) (*WorkflowsDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowsDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkflowDestroyResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkflowsShowResponse parses an HTTP response from a WorkflowsShowWithResponse call
func ParseWorkflowsShowResponse(rsp *http.Response) (*WorkflowsShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowsShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FullWorkflowResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkflowsUpdateResponse parses an HTTP response from a WorkflowsUpdateWithResponse call
func ParseWorkflowsUpdateResponse(rsp *http.Response) (*WorkflowsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FullWorkflowResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get paginated access request forwards
	// (GET /public/v1/accessRequestForwards)
	AccessRequestForwardsIndex(ctx echo.Context, params AccessRequestForwardsIndexParams) error
	// Create an access request forward
	// (POST /public/v1/accessRequestForwards)
	AccessRequestForwardsCreate(ctx echo.Context) error
	// Delete an access request forward
	// (DELETE /public/v1/accessRequestForwards/{id})
	AccessRequestForwardsDestroy(ctx echo.Context, id openapi_types.UUID) error
	// Get an access request forward by id
	// (GET /public/v1/accessRequestForwards/{id})
	AccessRequestForwardsShow(ctx echo.Context, id openapi_types.UUID) error
	// Create a new access request
	// (POST /public/v1/accessRequests)
	AccessRequestsCreate(ctx echo.Context) error
	// Get access request by id
	// (GET /public/v1/accessRequests/{id})
	AccessRequestsShow(ctx echo.Context, id string) error
	// Get paginated access review forwards
	// (GET /public/v1/accessReviewForwards)
	AccessReviewForwardsIndex(ctx echo.Context, params AccessReviewForwardsIndexParams) error
	// Create an access review forward
	// (POST /public/v1/accessReviewForwards)
	AccessReviewForwardsCreate(ctx echo.Context) error
	// Delete an access review forward
	// (DELETE /public/v1/accessReviewForwards/{id})
	AccessReviewForwardsDestroy(ctx echo.Context, id openapi_types.UUID) error
	// Get an access review forward by id
	// (GET /public/v1/accessReviewForwards/{id})
	AccessReviewForwardsShow(ctx echo.Context, id openapi_types.UUID) error
	// Get a list of accounts
	// (GET /public/v1/accounts)
	AccountsIndex(ctx echo.Context, params AccountsIndexParams) error
	// Get the list of agent tokens
	// (GET /public/v1/agentTokens)
	AgentTokensIndex(ctx echo.Context, params AgentTokensIndexParams) error
	// Create a new agent token
	// (POST /public/v1/agentTokens)
	AgentTokensCreate(ctx echo.Context) error
	// Delete agent token by id
	// (DELETE /public/v1/agentTokens/{id})
	AgentTokensDestroy(ctx echo.Context, id openapi_types.UUID) error
	// Get agent token by id
	// (GET /public/v1/agentTokens/{id})
	AgentTokensShow(ctx echo.Context, id openapi_types.UUID) error
	// Update agent token by id
	// (PUT /public/v1/agentTokens/{id})
	AgentTokensUpdate(ctx echo.Context, id openapi_types.UUID) error
	// Search audit logs (Experimental)
	// (POST /public/v1/auditLogs/search)
	AuditLogsSearch(ctx echo.Context) error
	// Get a list of bundles
	// (GET /public/v1/bundles)
	BundlesIndex(ctx echo.Context, params BundlesIndexParams) error
	// Create a new bundle
	// (POST /public/v1/bundles)
	BundlesCreate(ctx echo.Context) error
	// Delete a bundle by id
	// (DELETE /public/v1/bundles/{id})
	BundlesDestroy(ctx echo.Context, id openapi_types.UUID) error
	// Get bundle by id
	// (GET /public/v1/bundles/{id})
	BundlesShow(ctx echo.Context, id openapi_types.UUID) error
	// Update a bundle
	// (PUT /public/v1/bundles/{id})
	BundlesUpdate(ctx echo.Context, id openapi_types.UUID) error
	// Get a list of directory groups
	// (GET /public/v1/directoryGroups)
	DirectoryGroupsIndex(ctx echo.Context, params DirectoryGroupsIndexParams) error
	// Get a list of integrations
	// (GET /public/v1/integrations)
	IntegrationsIndex(ctx echo.Context, params IntegrationsIndexParams) error
	// Create a new integration
	// (POST /public/v1/integrations)
	IntegrationsCreate(ctx echo.Context) error
	// Delete integration by id
	// (DELETE /public/v1/integrations/{id})
	IntegrationsDestroy(ctx echo.Context, id openapi_types.UUID) error
	// Get integration by id
	// (GET /public/v1/integrations/{id})
	IntegrationsShow(ctx echo.Context, id openapi_types.UUID) error
	// Update integration by id
	// (PUT /public/v1/integrations/{id})
	IntegrationsUpdate(ctx echo.Context, id openapi_types.UUID) error
	// Get permissions (Filter by time created, Experimental)
	// (GET /public/v1/permissions)
	PermissionsIndex(ctx echo.Context, params PermissionsIndexParams) error
	// Get a list of policies
	// (GET /public/v1/policies)
	PoliciesIndex(ctx echo.Context, params PoliciesIndexParams) error
	// Create a new policy
	// (POST /public/v1/policies)
	PoliciesCreate(ctx echo.Context) error
	// Delete a policy
	// (DELETE /public/v1/policies/{id})
	PoliciesDestroy(ctx echo.Context, id openapi_types.UUID) error
	// Get policy by id
	// (GET /public/v1/policies/{id})
	PoliciesShow(ctx echo.Context, id openapi_types.UUID) error
	// Update a policy
	// (PUT /public/v1/policies/{id})
	PoliciesUpdate(ctx echo.Context, id openapi_types.UUID) error
	// Get a list of resources
	// (GET /public/v1/resources)
	ResourcesIndex(ctx echo.Context, params ResourcesIndexParams) error
	// Create a resource - virtual or manual
	// (POST /public/v1/resources)
	ResourcesCreate(ctx echo.Context) error
	// Delete a resource
	// (DELETE /public/v1/resources/{id})
	ResourcesDelete(ctx echo.Context, id openapi_types.UUID) error
	// Get a resource by id
	// (GET /public/v1/resources/{id})
	ResourcesShow(ctx echo.Context, id openapi_types.UUID) error
	// Update a resource
	// (PUT /public/v1/resources/{id})
	ResourcesUpdate(ctx echo.Context, id openapi_types.UUID) error
	// Get a list of roles
	// (GET /public/v1/roles)
	RolesIndex(ctx echo.Context, params RolesIndexParams) error
	// Create a role
	// (POST /public/v1/roles)
	RolesCreate(ctx echo.Context) error
	// Delete a role
	// (DELETE /public/v1/roles/{id})
	RoleDelete(ctx echo.Context, id openapi_types.UUID) error
	// Get a role by id
	// (GET /public/v1/roles/{id})
	RolesShow(ctx echo.Context, id openapi_types.UUID) error
	// Update a role
	// (PUT /public/v1/roles/{id})
	RolesUpdate(ctx echo.Context, id openapi_types.UUID) error
	// Get a list of users
	// (GET /public/v1/users)
	UsersIndex(ctx echo.Context, params UsersIndexParams) error
	// Get a list of user accounts
	// (GET /public/v1/usersAccounts)
	UsersAccountsIndex(ctx echo.Context, params UsersAccountsIndexParams) error
	// Create a new user account
	// (POST /public/v1/usersAccounts)
	UsersAccountsCreate(ctx echo.Context) error
	// Delete a user account
	// (DELETE /public/v1/usersAccounts/{id})
	UsersAccountsDelete(ctx echo.Context, id openapi_types.UUID) error
	// Get a list of workflows
	// (GET /public/v1/workflows)
	WorkflowsIndex(ctx echo.Context, params WorkflowsIndexParams) error
	// Create a new workflow
	// (POST /public/v1/workflows)
	WorkflowsCreate(ctx echo.Context) error
	// Delete a workflow
	// (DELETE /public/v1/workflows/{id})
	WorkflowsDestroy(ctx echo.Context, id openapi_types.UUID) error
	// Get workflow by id
	// (GET /public/v1/workflows/{id})
	WorkflowsShow(ctx echo.Context, id openapi_types.UUID) error
	// Update a workflow
	// (PUT /public/v1/workflows/{id})
	WorkflowsUpdate(ctx echo.Context, id openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccessRequestForwardsIndex converts echo context to params.
func (w *ServerInterfaceWrapper) AccessRequestForwardsIndex(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccessRequestForwardsIndexParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccessRequestForwardsIndex(ctx, params)
	return err
}

// AccessRequestForwardsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) AccessRequestForwardsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccessRequestForwardsCreate(ctx)
	return err
}

// AccessRequestForwardsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) AccessRequestForwardsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccessRequestForwardsDestroy(ctx, id)
	return err
}

// AccessRequestForwardsShow converts echo context to params.
func (w *ServerInterfaceWrapper) AccessRequestForwardsShow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccessRequestForwardsShow(ctx, id)
	return err
}

// AccessRequestsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) AccessRequestsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccessRequestsCreate(ctx)
	return err
}

// AccessRequestsShow converts echo context to params.
func (w *ServerInterfaceWrapper) AccessRequestsShow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccessRequestsShow(ctx, id)
	return err
}

// AccessReviewForwardsIndex converts echo context to params.
func (w *ServerInterfaceWrapper) AccessReviewForwardsIndex(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccessReviewForwardsIndexParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccessReviewForwardsIndex(ctx, params)
	return err
}

// AccessReviewForwardsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) AccessReviewForwardsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccessReviewForwardsCreate(ctx)
	return err
}

// AccessReviewForwardsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) AccessReviewForwardsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccessReviewForwardsDestroy(ctx, id)
	return err
}

// AccessReviewForwardsShow converts echo context to params.
func (w *ServerInterfaceWrapper) AccessReviewForwardsShow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccessReviewForwardsShow(ctx, id)
	return err
}

// AccountsIndex converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsIndex(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountsIndexParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Required query parameter "integrationId" -------------

	err = runtime.BindQueryParameter("form", true, true, "integrationId", ctx.QueryParams(), &params.IntegrationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter integrationId: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountsIndex(ctx, params)
	return err
}

// AgentTokensIndex converts echo context to params.
func (w *ServerInterfaceWrapper) AgentTokensIndex(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AgentTokensIndexParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AgentTokensIndex(ctx, params)
	return err
}

// AgentTokensCreate converts echo context to params.
func (w *ServerInterfaceWrapper) AgentTokensCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AgentTokensCreate(ctx)
	return err
}

// AgentTokensDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) AgentTokensDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AgentTokensDestroy(ctx, id)
	return err
}

// AgentTokensShow converts echo context to params.
func (w *ServerInterfaceWrapper) AgentTokensShow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AgentTokensShow(ctx, id)
	return err
}

// AgentTokensUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) AgentTokensUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AgentTokensUpdate(ctx, id)
	return err
}

// AuditLogsSearch converts echo context to params.
func (w *ServerInterfaceWrapper) AuditLogsSearch(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuditLogsSearch(ctx)
	return err
}

// BundlesIndex converts echo context to params.
func (w *ServerInterfaceWrapper) BundlesIndex(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BundlesIndexParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BundlesIndex(ctx, params)
	return err
}

// BundlesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) BundlesCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BundlesCreate(ctx)
	return err
}

// BundlesDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) BundlesDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BundlesDestroy(ctx, id)
	return err
}

// BundlesShow converts echo context to params.
func (w *ServerInterfaceWrapper) BundlesShow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BundlesShow(ctx, id)
	return err
}

// BundlesUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) BundlesUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BundlesUpdate(ctx, id)
	return err
}

// DirectoryGroupsIndex converts echo context to params.
func (w *ServerInterfaceWrapper) DirectoryGroupsIndex(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DirectoryGroupsIndexParams
	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortOrder: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "sortFields" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortFields", ctx.QueryParams(), &params.SortFields)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortFields: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DirectoryGroupsIndex(ctx, params)
	return err
}

// IntegrationsIndex converts echo context to params.
func (w *ServerInterfaceWrapper) IntegrationsIndex(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params IntegrationsIndexParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IntegrationsIndex(ctx, params)
	return err
}

// IntegrationsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) IntegrationsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IntegrationsCreate(ctx)
	return err
}

// IntegrationsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) IntegrationsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IntegrationsDestroy(ctx, id)
	return err
}

// IntegrationsShow converts echo context to params.
func (w *ServerInterfaceWrapper) IntegrationsShow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IntegrationsShow(ctx, id)
	return err
}

// IntegrationsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) IntegrationsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IntegrationsUpdate(ctx, id)
	return err
}

// PermissionsIndex converts echo context to params.
func (w *ServerInterfaceWrapper) PermissionsIndex(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PermissionsIndexParams
	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortOrder: %s", err))
	}

	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PermissionsIndex(ctx, params)
	return err
}

// PoliciesIndex converts echo context to params.
func (w *ServerInterfaceWrapper) PoliciesIndex(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PoliciesIndexParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PoliciesIndex(ctx, params)
	return err
}

// PoliciesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) PoliciesCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PoliciesCreate(ctx)
	return err
}

// PoliciesDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) PoliciesDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PoliciesDestroy(ctx, id)
	return err
}

// PoliciesShow converts echo context to params.
func (w *ServerInterfaceWrapper) PoliciesShow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PoliciesShow(ctx, id)
	return err
}

// PoliciesUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) PoliciesUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PoliciesUpdate(ctx, id)
	return err
}

// ResourcesIndex converts echo context to params.
func (w *ServerInterfaceWrapper) ResourcesIndex(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ResourcesIndexParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Required query parameter "integrationId" -------------

	err = runtime.BindQueryParameter("form", true, true, "integrationId", ctx.QueryParams(), &params.IntegrationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter integrationId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ResourcesIndex(ctx, params)
	return err
}

// ResourcesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ResourcesCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ResourcesCreate(ctx)
	return err
}

// ResourcesDelete converts echo context to params.
func (w *ServerInterfaceWrapper) ResourcesDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ResourcesDelete(ctx, id)
	return err
}

// ResourcesShow converts echo context to params.
func (w *ServerInterfaceWrapper) ResourcesShow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ResourcesShow(ctx, id)
	return err
}

// ResourcesUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ResourcesUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ResourcesUpdate(ctx, id)
	return err
}

// RolesIndex converts echo context to params.
func (w *ServerInterfaceWrapper) RolesIndex(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params RolesIndexParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Required query parameter "resourceId" -------------

	err = runtime.BindQueryParameter("form", true, true, "resourceId", ctx.QueryParams(), &params.ResourceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RolesIndex(ctx, params)
	return err
}

// RolesCreate converts echo context to params.
func (w *ServerInterfaceWrapper) RolesCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RolesCreate(ctx)
	return err
}

// RoleDelete converts echo context to params.
func (w *ServerInterfaceWrapper) RoleDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RoleDelete(ctx, id)
	return err
}

// RolesShow converts echo context to params.
func (w *ServerInterfaceWrapper) RolesShow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RolesShow(ctx, id)
	return err
}

// RolesUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) RolesUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RolesUpdate(ctx, id)
	return err
}

// UsersIndex converts echo context to params.
func (w *ServerInterfaceWrapper) UsersIndex(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersIndexParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersIndex(ctx, params)
	return err
}

// UsersAccountsIndex converts echo context to params.
func (w *ServerInterfaceWrapper) UsersAccountsIndex(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersAccountsIndexParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// ------------- Optional query parameter "userId" -------------

	err = runtime.BindQueryParameter("form", true, false, "userId", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Optional query parameter "accountId" -------------

	err = runtime.BindQueryParameter("form", true, false, "accountId", ctx.QueryParams(), &params.AccountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accountId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersAccountsIndex(ctx, params)
	return err
}

// UsersAccountsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) UsersAccountsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersAccountsCreate(ctx)
	return err
}

// UsersAccountsDelete converts echo context to params.
func (w *ServerInterfaceWrapper) UsersAccountsDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersAccountsDelete(ctx, id)
	return err
}

// WorkflowsIndex converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowsIndex(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkflowsIndexParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowsIndex(ctx, params)
	return err
}

// WorkflowsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowsCreate(ctx)
	return err
}

// WorkflowsDestroy converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowsDestroy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowsDestroy(ctx, id)
	return err
}

// WorkflowsShow converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowsShow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowsShow(ctx, id)
	return err
}

// WorkflowsUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) WorkflowsUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkflowsUpdate(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/public/v1/accessRequestForwards", wrapper.AccessRequestForwardsIndex)
	router.POST(baseURL+"/public/v1/accessRequestForwards", wrapper.AccessRequestForwardsCreate)
	router.DELETE(baseURL+"/public/v1/accessRequestForwards/:id", wrapper.AccessRequestForwardsDestroy)
	router.GET(baseURL+"/public/v1/accessRequestForwards/:id", wrapper.AccessRequestForwardsShow)
	router.POST(baseURL+"/public/v1/accessRequests", wrapper.AccessRequestsCreate)
	router.GET(baseURL+"/public/v1/accessRequests/:id", wrapper.AccessRequestsShow)
	router.GET(baseURL+"/public/v1/accessReviewForwards", wrapper.AccessReviewForwardsIndex)
	router.POST(baseURL+"/public/v1/accessReviewForwards", wrapper.AccessReviewForwardsCreate)
	router.DELETE(baseURL+"/public/v1/accessReviewForwards/:id", wrapper.AccessReviewForwardsDestroy)
	router.GET(baseURL+"/public/v1/accessReviewForwards/:id", wrapper.AccessReviewForwardsShow)
	router.GET(baseURL+"/public/v1/accounts", wrapper.AccountsIndex)
	router.GET(baseURL+"/public/v1/agentTokens", wrapper.AgentTokensIndex)
	router.POST(baseURL+"/public/v1/agentTokens", wrapper.AgentTokensCreate)
	router.DELETE(baseURL+"/public/v1/agentTokens/:id", wrapper.AgentTokensDestroy)
	router.GET(baseURL+"/public/v1/agentTokens/:id", wrapper.AgentTokensShow)
	router.PUT(baseURL+"/public/v1/agentTokens/:id", wrapper.AgentTokensUpdate)
	router.POST(baseURL+"/public/v1/auditLogs/search", wrapper.AuditLogsSearch)
	router.GET(baseURL+"/public/v1/bundles", wrapper.BundlesIndex)
	router.POST(baseURL+"/public/v1/bundles", wrapper.BundlesCreate)
	router.DELETE(baseURL+"/public/v1/bundles/:id", wrapper.BundlesDestroy)
	router.GET(baseURL+"/public/v1/bundles/:id", wrapper.BundlesShow)
	router.PUT(baseURL+"/public/v1/bundles/:id", wrapper.BundlesUpdate)
	router.GET(baseURL+"/public/v1/directoryGroups", wrapper.DirectoryGroupsIndex)
	router.GET(baseURL+"/public/v1/integrations", wrapper.IntegrationsIndex)
	router.POST(baseURL+"/public/v1/integrations", wrapper.IntegrationsCreate)
	router.DELETE(baseURL+"/public/v1/integrations/:id", wrapper.IntegrationsDestroy)
	router.GET(baseURL+"/public/v1/integrations/:id", wrapper.IntegrationsShow)
	router.PUT(baseURL+"/public/v1/integrations/:id", wrapper.IntegrationsUpdate)
	router.GET(baseURL+"/public/v1/permissions", wrapper.PermissionsIndex)
	router.GET(baseURL+"/public/v1/policies", wrapper.PoliciesIndex)
	router.POST(baseURL+"/public/v1/policies", wrapper.PoliciesCreate)
	router.DELETE(baseURL+"/public/v1/policies/:id", wrapper.PoliciesDestroy)
	router.GET(baseURL+"/public/v1/policies/:id", wrapper.PoliciesShow)
	router.PUT(baseURL+"/public/v1/policies/:id", wrapper.PoliciesUpdate)
	router.GET(baseURL+"/public/v1/resources", wrapper.ResourcesIndex)
	router.POST(baseURL+"/public/v1/resources", wrapper.ResourcesCreate)
	router.DELETE(baseURL+"/public/v1/resources/:id", wrapper.ResourcesDelete)
	router.GET(baseURL+"/public/v1/resources/:id", wrapper.ResourcesShow)
	router.PUT(baseURL+"/public/v1/resources/:id", wrapper.ResourcesUpdate)
	router.GET(baseURL+"/public/v1/roles", wrapper.RolesIndex)
	router.POST(baseURL+"/public/v1/roles", wrapper.RolesCreate)
	router.DELETE(baseURL+"/public/v1/roles/:id", wrapper.RoleDelete)
	router.GET(baseURL+"/public/v1/roles/:id", wrapper.RolesShow)
	router.PUT(baseURL+"/public/v1/roles/:id", wrapper.RolesUpdate)
	router.GET(baseURL+"/public/v1/users", wrapper.UsersIndex)
	router.GET(baseURL+"/public/v1/usersAccounts", wrapper.UsersAccountsIndex)
	router.POST(baseURL+"/public/v1/usersAccounts", wrapper.UsersAccountsCreate)
	router.DELETE(baseURL+"/public/v1/usersAccounts/:id", wrapper.UsersAccountsDelete)
	router.GET(baseURL+"/public/v1/workflows", wrapper.WorkflowsIndex)
	router.POST(baseURL+"/public/v1/workflows", wrapper.WorkflowsCreate)
	router.DELETE(baseURL+"/public/v1/workflows/:id", wrapper.WorkflowsDestroy)
	router.GET(baseURL+"/public/v1/workflows/:id", wrapper.WorkflowsShow)
	router.PUT(baseURL+"/public/v1/workflows/:id", wrapper.WorkflowsUpdate)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w9CW/cxnp/hWAL+D2AllZy4qQCClSJD+ghsVXZadq6RkAtR6uJeWzIoeR9hv57MRc5",
	"JOfkkquVNA9FrXCHc3wXv2u+71u4LLJ1kYMcVeHJt7BaXoMsJn+eLpegqi7AXzWo0Ol6ncJljGCRX4Bq",
	"XeQV+ECG4pHrsliDEkFA3svjDOB/E1AtS7jGr4Qn4cdrEMTtJM+qgIyLQrRZg/AkrFAJ81V4dxeFJfir",
	"hiVIwpNPdLLPzaji8k+wROFd1N3dT3EFPsblCiDT5ug838J/LcFVeBL+y2F7/EN29sPXeZ2d15cpXH6E",
	"yy8AfcTv9DdGJjJvrM6TFPxcghgptwQTObQQOVBwSaZ4VgUwMUILJrZbotDSb4yujP+K0/T9VXjySQ83",
	"08nvPkfKYz6r2EHxfqdFUsQP4gQaEyFNABy6kAVw9gw0roSspeBIIy+aF61EBZndTl5QsvypSDZK9ILr",
	"OL3CeNXD+rcKlK9zBBGf6S4Kk7qM6Slkh+K/BsVVgLBQJBsLSrozIIAor7NLUOIZ/6wrBK+Y6JRP2xkS",
	"XBWlZPIwCrP46y8gX6Hr8OR48d2PUZjBnD84kiCHEqBWQEnPEUZhkYNt+KIrOiKHWS4K+Ryf+xTTIKoP",
	"4ebcRko6yxFYlVbfReHrN1JsqD/CcukB2809q8SvLz6Gilu7L7mybPdtR76NOjAywp7KuAtQ1Smy4WM7",
	"iFNutoJvXYEOm93GAh9jHjRLg3Z4IxdgHlRgWeRJFfzt+VGQgTiv8GTgBpR/l0kHFSa7HKlE5nTCZUgn",
	"dI92u2ODJQcsi5Ri02IWMjZARVCCJYA3mKggAlllEuQDCdKngGZfcVnGG/zfFYpRXbl+jT/QtzqydYwK",
	"oVJ55aQ6gBNbfGsxPQDTKEE9OMNdFGLumoVtB7BY4s8E5taeZGqERyR+KggX9b8XDfFSWm2Io8EyO49R",
	"qF2AqqjLJTB9TVRMX7L3lewuSOiRpKf+5snhLW5JWFz7HRHecf6IiIvYwFsL55J8XgjEncWI5AM1ECO9",
	"c7DlzNsutjQrMZ1OZ1RKBKY9xRYa4wBW5yUgu6kgktDK73FFvkV4kiBOEpAEl2AZ1xUIIApgFcTBWpyg",
	"WeKyKFIQm6iw0JgfGEqUSEfykYLVFUxEt9IsqWWALtCEjVoh0sY3gLcz9tiFm1+ALDWD6UvmdQCIUVJs",
	"BxJ7b8C+AGRSRh/JhKN8ADcQ3J7WCUS/FCuj1Sa8M9zfuzgDAwOYDI1C8DXO1pgk2Lrsl+Do+IUMAEQJ",
	"AcmpxNh+FaN2FbzvIC1WnRWOF8dHzxdHz4+PPi4WJ+T/DhaLxf+GUXhVlFmMwpMwiRF4jqBclHFa6oF/",
	"s5YvnNcZBrcInAN2AGzFiY8TkALZ4yIH/Wf1OpHNEC8RvOE/rNdlcROnp+mqKCG6zsRlB78Jaw9+axej",
	"biZhIvagfZs9aF/BnBbnm4OrGKYgOag2+fIggSVYoqKEoDpYlUW9riwGYqVQNe66ZEN/jfN41R23LlK4",
	"3BysQZnBqoJFXkl2xwbhNQ7IsHx1ihcWJzJv3bhn5WYFRYwfjCL2YMUsM+WAEtwUXxRDyHoxP4hyQFUB",
	"pBsgwK43Sr2AembDlAw5B3GaFrcgecXMCe0wLnGVg/o0rRpXo+K0quAqvwDLIstAnoCEKx+/xjBHMcyH",
	"GLN6/f1tTswe2YvLOKff+VMZKIVRrxOIzo2gWxb5FVwJdphkTAKu4jpFpzbgK0GFihKcZfEKKIbA6r9g",
	"ieo4VfyeGYE3NEnanwoErzanl0WNXn9FoMzj1AyEQgPvEsRJkaeb3s+tXBOftsINdsw5glX+zkEW53Wc",
	"9qdshrFJTMPsiF8+XIHF4WA9MwzGDxEzGKLE7mCkBCuDMVhqvgJXMAfJK+Eja/3Sx3il2AbWyCwxRoba",
	"YY0MdcPc8BUD9rov2GGw8w7DIv/QcSkQo3j4tCpK9L5MCKLYTy1rsActVyCiLvMPxqqMczR42nyk2OMS",
	"0E/gAcjWaPMWf0glP14V5W1cJpJf8kL4eA5//Aji7FeQXcp/R8VvFXWf8h9QuelvnD7s77sCOeqPJM+I",
	"z1nysPM2/j5kMYLLU4bA9qcWvuzBEL4wj1P6oviYbEZ8sMYf3eQDorKaP2zE5WmKhd/m9VdYIdnvF+Qg",
	"nQmb334vcnQxwCT+b2E4def9fB3nK/ExiqsvP/cPiZl2eCTKyssU8zK2TlrlXae3DhR17hXtKuoY9cHt",
	"dRGsQYkVfpAwk4TJmHYx/P5/FOXqICmwfDNaVK1ZEmlzHoo6R1U3QKUJy3Brb3zyB1mv64nUrNeLvRkM",
	"c+1ZmoBLC9MF+99zyf/j/xMtsbrW28CTxsvIYfTQ6ZiedvYiyGKYSvYahaCm4Bm68maCWs+hbYNbFd2M",
	"wgGg+6IQiToMY/ZEo6J0y6MirzyrggRW6zTeKH2T1EiTCooqiKuqWEK8zeAWomsuK4rSNlqGp7H0aLMN",
	"0v1IgbACOfpYfAG5OS2Dw0TwreC3A4Rf57BoKIZBY3yOWW9ndh7uncmFKCTH7q6Z/Pe7dJl9f335+28v",
	"l2/f/HP5IrlZZv/570O4nFzGFXj5nZ1Pja4U2cDqFfl4mWBVfBFO1Djje0sXXwxr7RlG3LyRzSmqX6A5",
	"ELWOVzC3knLnzchhDNs1nKWCtInrhd1G2qCWe17pWGbua1nWHuCBXaJ3A7PhQSzYMYK8GvzsHcLeIewd",
	"wt4h7B3C3iHsHcLeIewdwt4h7B3C3iH8oB3C7AQ0K5cQvsnMAmSoySAlU8lzfe0ToiS7++MV02cZlypS",
	"pNgmLY882VH38ojv6jS1R2pep2l8iSkOlTXQGJxuJ/sdomusL9F1pjjSIzkKPkZSm7Ny743t+Ab/eJ//",
	"HKep4JLnv0wGg+3OzmeZhhV3cGws+6dBe3u7cSqs4xn/IHrJFKec6nT7cKo3aXFrckGS1bhrm/tvLS/w",
	"KD9Pxis7Op5ye7kTNnJ5URDMdzIg9q9mEVMaguQJAewdO7Lmo+ICQUx+5FKUAzNgEn7P37uLwtbAOvkW",
	"ZjCHWZ2J14z5Db8ez4h2WbONaMgEEjQbGQyBta2/f1racb0nZ/Mxd6elrSaQKHz3yIwPEqDvRFCMBuhY",
	"3sTUr+RPPU868qE4t5QnWeztp1jNhz7+5eNfPv7l418+/uXjXz7+5eNfPv7l418+/uXjXw8i/mWZWyhJ",
	"x3Srx6O5ym5rzJoSIo3zDG050yu0gNDI9QSX+fYzcCE63UxYHI+c7ZzI3JEv0/oOqpfNbgWHQjRsjUqX",
	"qZ/FX7GV3k2/bq3yvh0u4+wM5ttOwa14q2Rn4i5hZ3t9A3JWLMMAKL5LGaS0dK4pKarOLmZjRAFGF/FZ",
	"xN6L4r0o3ovivSjei+K9KN6L4r0o3ovivSjei/KQvSjUsnkFKlQWmzkvFNOFzvIEfKX1AOzuFe/kmjDb",
	"GwLZvJvqljPV2cmquqWaGgnaAqT0hL9RearzKQw+F06Wff9lUp9cmslLDf0orHP4V01AX9ER2J6OEVgV",
	"5Yb5OHjvhO8XnVYKx5E5S7jDat+GnRmME3BEarcxxDIvpm4FubPkPC7jrGozJDOYM4gcDTNTENYmxLnd",
	"9qbFx10U3hbll6u0uHXd9Z2S6irO9Pt3994klKa6gk8/NFjUs/Io7B+9mBlVM3qwlJbb6RATmAzbF75t",
	"TrOImZe9w9VUIeL7szqoLlt5C4DSWhvCOnN+Jbv3R/aXcbr7nIlrtIsME9KV5ZJ2XjOmKOEK5o4ljlht",
	"I/auDB7SawJqOOg0x+ZsfNkdAU0GALoF9YHdijfRd7bsfCdVZsilB+I9P/pxsYhevFwsoqMF/vP4CP/9",
	"3YvjxSL6/gf8948vv8PPv/83/Ojl4jsy6uXxj4vFIvrhxx+/w/8eff/DS/LgxdH3eLJF9PLF4odj/Mfz",
	"o8+SHi2Wl87affY4SDhqi+dR12eEJdSD7FZr73UIk/7W7eOhe797pUuY45QbtyGXJMxED6NQ2G7rRe0+",
	"5+7RobdVeMgHtfa9cdedBH5hu3GeEO63mqCTZew0ySD2Nqx+xqNFAZ6B9PmpQFwur330yEePfPTIR498",
	"9MhHj3z0yEePfPTIR4989Mg5eiTVy9uvMVbK/xgYciut/dZ7u29N1TprqntdUmlN7YEFRVM3CWi45dIF",
	"T0Ra62ttT0mXULuep02vycYEahG9jPMlSFPyN5UQYRS2lNxS3Fl+XharElQVcXz9CZZ0REt1tzFEMF+9",
	"Kcqzj53/bHjM5mRyw67T8a0pmkBP0+Q89hqUtWu8odJL37KOiTiXpqLDChHSvmzULUbaAY/p62q5Cuv+",
	"VsvKTLRn07auZnDaQUSVrdR0wJyyxyab29Gxq/HlyiecgoAcutL2iGguv7ArcTqcQEegZDO2VFqnKQ1+",
	"TU044sTuATUdBelnnj+S7Ri5dg1OG8dvnXvgFJVW5kTcWYSkZ4s6/87G2eRFSGyXBj9d6LMTtJ2lmXnR",
	"7EpFj1QlmYGFmoknZyHNzIrbEvY0Q+eWyhUJ1VjSM8zfUs+k2y6sApNi+3x1S3yHVS272tsXBYHUU/OW",
	"O2c5SgRa5W3R9eVAMO4V3KMhWBOdCjNKKNWNMrVzbZuJ5ZjAU7ugvtl4bUa+vHML2TtdVAadtwAJXYb2",
	"sIWFrAXSVFkAbwHJ7Kj2GgLd9JD5gLC3h5/n1MqSmLsUB0qWNWzZpXf3aUDVyQAmICcOmfKQ5EXwO3zc",
	"w9FYK59szZVh8gde6nm7kMTct8uMImdtvTqq8664M8vOGpLU5B2YQmdXxIERwIoCJgrQNayCKwjSBD/k",
	"m6ett+IWuBSoLlUopZ45RQnKvpeuBVUvW3JHTZTs0HiWayspb0Wuo+v29p19Cogrj2S6v75npdB6DfbU",
	"l5PFgeIOhBOrrin7i8I+1cOnevhUD5/q4VM9fKqHT/XwqR4+1cOneviLwnYXhQUD46e4AhYV3q27wSv7",
	"0+5HH3jxKJpLxAKAzE2246bpr71jBJuBgkekgQm/CRO+z4N1CbKATE7OQgQ0Vc0+gPTq13i9xseUpByw",
	"sYT6iQ1BfJmisqJ5CR+3fUk3tPlWDMj7f4o6yOoKBZhRYAICANE1KHkKTnyZguD/6sXi+KX46KfNK6oO",
	"Bu8vgs4KfHDnYTP8oKUJ1RabsXu813u+qN1j8onI+G1RrFIQsJAXIWOZeSJaNXKCk71FjBnFC8sizwER",
	"p/+otDH5lumTOss2Fy2O35c9u0S6UNbdumNdSrnb1VS7EH8+hi9Z9ZYYFULTmj70I6uADtW0RzQWWpeA",
	"CO8KItCTXA2IHWF9Lp1yIN/t4GjIgWhsOylUBEGyDwKpYdvOWeT73StJatz4FgUQJGGirvJg+saqPqgC",
	"cQzElIV41MtCS14VIMN51EL+GTSlHaRJ2lei3d+YwIVQNkYdG2gqwIjb4K/6qICPCviogI8K+KiAjwr4",
	"qICPCviogI8K+KiAjwpMFhXgbHo/Jt0vsEL2BTynjyf0ErgsG5pIIilusYluOphNbEJRWXTkHQD5xEIm",
	"sP0VANNUO77gNfqC1n7T1nau59ZmGNMfuH1b1tbXxRU9rLjHfcZb3rjs4nh+nzLWac6Fj5U7SIZe5I6f",
	"eOjf3P6ynkKhtWGRvlo72aVBO7zzmzpqjJuFrEQjZrcHhzp795Kh0hAQHKtd00NEZut0dRLzRfpw3Z14",
	"8waXZ9Hr1IRf8a5O7+r0rk7v6vSuTu/q9K5O7+r0rk7v6vSuTu/qnNzVidnUItd3p5matgl7RlP9wWfT",
	"Gfwgtq2Yhu15bqi+BP8JEm6huk3g7rjoz2F0XPSbQg133QWRM8WbujK4ZYv2Nne2i+vwrm6U+wls4JXv",
	"O7ixdTsz+4CN1AEnULEr0iauzaVexb76iWMMpD/97uMgOyerx+d0n4FR3L9DTsJlh/51gb0lNpjgHO+6",
	"w11FQYVPupcFlJwxM0l1JRWYaJfIvdJoH7suOpNCaIPyag8NGJeA97B55l5frjIdPatTBMtCRSjjtGvH",
	"6Li0WPauI+P3bx+6NXG1sJWUioQrPtUB+EGHW6cIfKvioXgl09hstrlFeN7ZypWkP4ksNMrEfVBqwu5V",
	"hH1UDx62yPfSeYR0ftIi0MCnk+d1TpDPafJfzF14Yk7/yFS1TnZU5mAud84jTS2duZCBPBX1QfrAHMoX",
	"2NcLGH9B36lXxPCavtIL1U/RbBJStrndLzq2pKAw3eG3KAJgec3fJc30QSjL8kz4qRVkW8XYpRyTL5f0",
	"qMol3VcZI1+2yJct2pWp5gsT7WFhogGS9dq2uoXDGE12t50WtJbA4GAj9/Yb6yDIE9XcwSI/Vq9Ta3sq",
	"oWjeJBk3tqkwvDssT3uUdIlVbQs0PWSNqWa2WND1qlVAlO1CdzY6wbs6TU3UsvdHYvozSCzbbd6LZj6u",
	"t6itRq7cqOzwki/Wz3VZghwFa5qFm8EcZnUWnhxFww5xa1CeSyd5R4YExVVAd1oFa1A2U8Zf2ZSLhWEB",
	"VKA4xUvI2hTj34K8WWkdU/OtmXChmpC64yymZJvXTzrEEwhb0PSW7BxJij6VT2I/aLfd3tRk2594aDxi",
	"u9HekUzMTGUDpXa5Z1VAZ8aWg90F0DatPCBv9NOvt74KmoB1CZaOW+Evbbsb8zX/bnaCy41zO3yIC/Ry",
	"x6ZfrJmdhbxnWgXPrEu7pzTYv2stZIb1GpMLnENutagd60p9aaRKxNZ7EHeq6Y0f3feJMBEdJa58FMo+",
	"Hv7+tL8/7e9P+/vT/v60vz/t70/7+9P+/rS/P+3vT/v701b3p6nd9BPRkifu5m1RKNFgzunvtFLV3iEZ",
	"fHApYXjDgbW3sU9nEJs0y9Jviml32ErCk286J+UgI/sttw041Pje1NDfwc1aoZ/0vMQ3R4trI/me5Qn4",
	"up8O087+6hTN5fY3rDMay5TMWzy37pAOhxi4guCQ/ia+qDuJdUavQ/qpyVfWZIdOLnq7KXbqc9uWp7Xc",
	"psNNMhPcRx1aXF9z6GLuT6L9DWQtGnRHbRZQn5NmyPmv7KivrASmFcI6XcUTSadJ/cdTshnHpv5bph8N",
	"Npjo0n57lyL5ar1dJU26rDpgYJsGPW5/E170HnG2+jKFS6pk79vFXnlS5DJGYFWUm+0LFiWGe0DGCcZl",
	"DG4rEjKYM4gcSZLs+/eTHLMZHSoob9/rjkJCmFVGoff3gb+Huvt47qROgT5Tih61a6yfBpRZApiAnKQI",
	"NeG6ik0qmuyfbG/x4Fmft3MKu1YfV3ayj8Rh8TCioNS5YoqCslHiyvSQ3XLSPhzqw6E+HOrDoT4c6sOh",
	"Phzqw6E+HOrDoT4c6sOhruFQwc3G/mkuCmlqZXQMKTvrB2QxTKUuYVBTy1PRyMzCDKZzR50Tk1kNJ8b2",
	"986Pu8WpDMcx1Dehgxz8rmqC6CfpW7ZWmqnih831NzPWpTgQKaqmQprDUYUM6UW74R0uTh/N6Ti6FWBz",
	"KyotEJB+n1s6gw7JGtzRwCA0wh00EG1TOYikF7fnun+5ReWsLqTPrgK8pQBWBKZRgK5hFVxBkCb4GT93",
	"cAvRdRC3aKHocL7Wya6o7koCXsUZTDfvVCHCFbwBufJXuIua7GRIu4/Oll0Es5H7h7rAsyrg8zt8+luv",
	"cXdGSmcBU7YtrpropAavZMO1xTfDqjaDk1YIOAQ+xZk/ILB2zNKgi9lufYYt20RTnPdsDqCNjBjVLhGj",
	"poxRnYIx5+TBmVqVg8UX2EEWFl9qjjysba+/R6ovGd/0/iZZ9Xc4X5qVeaW9R+Me5Z6KrG3M8so3PJqo",
	"qBMkyENbgtF8UMakz+jYW5qew0802xK6HD2s6yag5A66cTkP6vRX8XT9pXrYEvcZdTBtopp7o5YtqIQM",
	"7xdBmoI2pNH2LZKu5iAQEdFjicWWQPakTdAokUhTBZOHqHwNE9QqsKxLTpIs2RHEJSVA+tcbDtx//P4R",
	"ywMyErMsHdfMeo3QOry7IxxyVRALschRvMTKQj8HihohKQhOz8+CpFjWGcgRpynyS3dMGIU3oKzou0cH",
	"C1LVbA3yeA3Dk/DFAX4UhesYXZMjHK5JstnhzdEhzz0ggQtW34UWjqJ5FxhtZOGzJDwJT2WjiUZBpi/j",
	"DCBSY+7TtxDivfxVg3LDqeaElxipGrpo8vKOIn0SpWK+plaJbEpSpMW2ZMvdZ6I+ka8SAcDxYsGRBKgP",
	"UMiDPvyTFehr17XQGFXVfQhVdAmgQ30EnpzuPn3GW63qLIvLTXgSvgWk5A2dP6D45JXNgiuOUZ6Q9kmO",
	"w/AzqTlQ2eKcGlhtxVPM7ZNBiy3S7cDQFUYsBXE2hLEt0KRMG2xF4fHiyGn5vrDZggQopII4V6DfAvt3",
	"kVEqHH6DyR3lsBQgYEkpzDZVyAcsklp2Zj2lRCSLnD25B+vz/BQkN823wvYrAv6tsB05iPcP10R1eZLY",
	"s+d/F2mtxFxwuQngltxKfRlmST6vCO8sNaxeulth3tnMlMjkcjfIwW0PpQMkBg1+9OhrpKyZQxWs2ctq",
	"JZFxcWvPqgAmQVEGzbU2d2beJS/Ohj7Ci11GlDOgGXc3ENxaa8/iYK8876PyjDGk05076DarzuJwrznv",
	"ueYs4t6MerM4sFabxZe81rwDrdkN05G9UPcq85wqs4g2pcZsYtOm65QKqWTAI/k6K5YQ8o3P3NQ9xYQV",
	"iMvldXhfiuJbgBQXqrenvyCFFQqKqyBue/8INEcfDehsBXL0sfgCcg2ptWO8Lmi2BVpoSfoXbY1mdA1a",
	"ROOlAkSxJyCbPGZI1ah+7UbnNbSbde7dyu7t5MHoftR6b7GtRraSu806Xjv2qap2LQioKjaHctcicagY",
	"9PnWJI2fpBLXnn/yL6gLbta1Hjc0xry/2Hkacn5KEqEYdaGSnjBm9QyqQ6aEqr3gfOQHrq3Ogi++yj0i",
	"Sl7iYSs0UZi15RGq4G+vv65BCUmCQvp3AV3i8wG6hIpRUjlM6+B4jdiMZRFS81k9bUVIjl62rkYFZiNm",
	"VX+1VZN27fms01RaJHU6LZWiQYoFKX8Z9VL2/lPVSenxZ/Q2MowNvmUi9+gE4NP0JM7CSFigWWBDqnqy",
	"AU9P7aQHH6Z0PgrRynVOe7HKCwNt2sRpKfe+6o5zUGPELGOBXFgJqtMPP4dR+Oo1+SeuliE9vPSqp6Wa",
	"NJFqNGIafNQ3EKQkwtrO1GT3Ksozt/m6e+mE7qJ+ZrWsocegKWTFSbjZR8BotU/LgvdfTchil3SvjMcO",
	"hQpn8U+3mO9gr8W6uAGNai4Om1U/Fxa6b/VcUx96v13T3YqVCkyredtoA4gzPVVDQIDBfNaAgJWBCjpg",
	"XKM4fpKmgSMTu8hWJ+xIrQRx1NMzFYanfzCy3tFgcKCUrlgWK2aqNC6hKuI9mQ1d6LyBKQKl0K63Cup1",
	"gIogDpagRDHMg3UBc8w/AatrItsg4wYZWbdVgvt1gcO9NmtmzXlVVbbfPttVQOTfGHIvNwR1AavOEgWj",
	"fPqkqiDUOPXP2QBvSMRuzXdmsiEahLUI5ijS2A58yLx+/WFvr3twOTUdVebx5jfdmyXQl7OWUZfnMzxV",
	"PV7XlWwah74OaZFe7j1ZZ/70fES+ZGTWgQbWFWG1Bh9PT0eXNHN6FGK18eTbi1Te9EqtrvAazI88C9zC",
	"Xz55/vjuXAQUg/P6YltSaumuWVqjSTVjduWC7S24L/a5vF+dzie7tfrFURY8D25o04OgKANaI16BRYX4",
	"MKpkzRxUhXjiLjsCijn1s6aZoYoX9bLee1Xt2dFNWjYs11fYeqKy1qHnSbtVe1B4cOLbWZsz8HJPIhe6",
	"hNKLIn3sihyH1tmOCX8/8zAUDTvnVgWLbpbsRaHPkSW/71r9w4vuowZYpA/o0hhp5DpEtEQmmTXEIgVe",
	"ORTJYFYFUY64SPPd8EqhG4c6KoaFJCVXEJy1Ci1eGeQftX1UCIuZknWtBC/t2qlSBknv9Sfv1Zu5FAMB",
	"8nyaFu/LyumALCeng1NTuY9OL/7HTRcYIMRAcPb2ssIXhpd3QVTzF/nAUJJV+iDLB0K9D5Ve39nnrPo9",
	"nVzs1XVvX4HzonJH0P7k2YpI1+FcI2GMqn4HPE9U56fH7jbhm17NH4fNW1Y1Xv2t4HXlfRaTGdO6/jsT",
	"SusWaS2eGzRphHQzZlYBrexJdQ+Rd0UnnelkKEeFAhMKZjOKzWaOp5rXpO/0NY3ENOAuMsjDJ5vdNAdT",
	"YQHH8THwjfRkW63DytPzkaj70DwSgdt4QkzClkxY3nCU12XK2tBUJ4eH8RoeANpB5gAW4d3nu/8PAAD/",
	"/0o1kFLuogEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
